---eliminateBools.ml log---
-----before boolean elimination-------
entry event DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl);

event DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl);

event ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count);

memop inc(int<<8>> src,int<<8>> unused)
 {return src+1;
}

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_mysrefst_ttl = Array.create(8);


global Array.t<<8>> mysre = Array.create(8);


memop mysrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g<2);
b2=(b2,g==8)
cell1=(b1||b2 -> 8|memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

memop mysrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f<8);
b2=(b2,memval+0<1)
cell1=(b1||b2 -> g^^memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

event mysrereset(int<<32>> mysrereset_mysreidx);

handle DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl) {

}

handle ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count) {

}

handle mysrereset(int<<32>> mysrereset_mysreidx) {
Array.set(assigned_var_mysrefst_ttl,mysrereset_mysreidx,0);
Array.set(mysre,mysrereset_mysreidx,0);
}

handle DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl) {
bool ansmysre = true;
int<<32>> mysreidx = 0;
int<<8>> f_synthesized_meta_varmysre = 0;
int<<8>> g_synthesized_meta_varmysre = 0;
int<<8>> memop_synthesized_meta_varmysre = 0;
int<<32>> fst_ttl = Array.setm(assigned_var_mysrefst_ttl,mysreidx,re12351sdaCheckThenSet,DNS_packet_fwd_ttl);
int<<8>> countermysre = 0;
if (fst_ttl!=DNS_packet_fwd_ttl) {
countermysre = countermysre<<1+1;
} else {
countermysre = countermysre<<1;
}
int<<8>> resmysre = 0;
match countermysre with 
| 1 -> {
f_synthesized_meta_varmysre = 173;
g_synthesized_meta_varmysre = 5;
memop_synthesized_meta_varmysre = 0;
}
| 0 -> {
f_synthesized_meta_varmysre = 243;
g_synthesized_meta_varmysre = 181;
memop_synthesized_meta_varmysre = 2;
}
| _ -> {

}
int<<8>> resmysre = 0;
match memop_synthesized_meta_varmysre with 
| 0 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop0,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| 2 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop2,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| _ -> {

}
match resmysre with 
| 181 -> {
ansmysre = true;
}
| _ -> {
ansmysre = false;
}
if (ansmysre) {
generate ttl_changes_found(0,0);
} 
generate DNS_packet_out(DNS_packet_fwd_sip,DNS_packet_fwd_cip,DNS_packet_fwd_smac,DNS_packet_fwd_cmac,DNS_packet_fwd_ttl);
}
-----end before boolean elimination-------
-----after phase 1: non-immediate elimination-------
entry event DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl);

event DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl);

event ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count);

memop inc(int<<8>> src,int<<8>> unused)
 {return src+1;
}

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_mysrefst_ttl = Array.create(8);


global Array.t<<8>> mysre = Array.create(8);


memop mysrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g<2);
b2=(b2,g==8)
cell1=(b1||b2 -> 8|memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

memop mysrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f<8);
b2=(b2,memval+0<1)
cell1=(b1||b2 -> g^^memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

event mysrereset(int<<32>> mysrereset_mysreidx);

handle DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl) {

}

handle ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count) {

}

handle mysrereset(int<<32>> mysrereset_mysreidx) {
Array.set(assigned_var_mysrefst_ttl,mysrereset_mysreidx,0);
Array.set(mysre,mysrereset_mysreidx,0);
}

handle DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl) {
bool ansmysre = true;
int<<32>> mysreidx = 0;
int<<8>> f_synthesized_meta_varmysre = 0;
int<<8>> g_synthesized_meta_varmysre = 0;
int<<8>> memop_synthesized_meta_varmysre = 0;
int<<32>> fst_ttl = Array.setm(assigned_var_mysrefst_ttl,mysreidx,re12351sdaCheckThenSet,DNS_packet_fwd_ttl);
int<<8>> countermysre = 0;
if (fst_ttl!=DNS_packet_fwd_ttl) {
countermysre = countermysre<<1+1;
} else {
countermysre = countermysre<<1;
}
int<<8>> resmysre = 0;
match countermysre with 
| 1 -> {
f_synthesized_meta_varmysre = 173;
g_synthesized_meta_varmysre = 5;
memop_synthesized_meta_varmysre = 0;
}
| 0 -> {
f_synthesized_meta_varmysre = 243;
g_synthesized_meta_varmysre = 181;
memop_synthesized_meta_varmysre = 2;
}
| _ -> {

}
int<<8>> resmysre = 0;
match memop_synthesized_meta_varmysre with 
| 0 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop0,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| 2 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop2,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| _ -> {

}
match resmysre with 
| 181 -> {
ansmysre = true;
}
| _ -> {
ansmysre = false;
}
if (ansmysre) {
generate ttl_changes_found(0,0);
} 
generate DNS_packet_out(DNS_packet_fwd_sip,DNS_packet_fwd_cip,DNS_packet_fwd_smac,DNS_packet_fwd_cmac,DNS_packet_fwd_ttl);
}
-----end after phase 1: non-immediate elimination-------
-----after phase 2: if expression cannonization-------
entry event DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl);

event DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl);

event ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count);

memop inc(int<<8>> src,int<<8>> unused)
 {return src+1;
}

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_mysrefst_ttl = Array.create(8);


global Array.t<<8>> mysre = Array.create(8);


memop mysrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g<2);
b2=(b2,g==8)
cell1=(b1||b2 -> 8|memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

memop mysrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f<8);
b2=(b2,memval+0<1)
cell1=(b1||b2 -> g^^memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

event mysrereset(int<<32>> mysrereset_mysreidx);

handle DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl) {

}

handle ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count) {

}

handle mysrereset(int<<32>> mysrereset_mysreidx) {
Array.set(assigned_var_mysrefst_ttl,mysrereset_mysreidx,0);
Array.set(mysre,mysrereset_mysreidx,0);
}

handle DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl) {
bool ansmysre = true;
int<<32>> mysreidx = 0;
int<<8>> f_synthesized_meta_varmysre = 0;
int<<8>> g_synthesized_meta_varmysre = 0;
int<<8>> memop_synthesized_meta_varmysre = 0;
int<<32>> fst_ttl = Array.setm(assigned_var_mysrefst_ttl,mysreidx,re12351sdaCheckThenSet,DNS_packet_fwd_ttl);
int<<8>> countermysre = 0;
int<<32>> if_precomp = fst_ttl-DNS_packet_fwd_ttl;
if (if_precomp!=0) {
countermysre = countermysre<<1+1;
} else {
countermysre = countermysre<<1;
}
int<<8>> resmysre = 0;
match countermysre with 
| 1 -> {
f_synthesized_meta_varmysre = 173;
g_synthesized_meta_varmysre = 5;
memop_synthesized_meta_varmysre = 0;
}
| 0 -> {
f_synthesized_meta_varmysre = 243;
g_synthesized_meta_varmysre = 181;
memop_synthesized_meta_varmysre = 2;
}
| _ -> {

}
int<<8>> resmysre = 0;
match memop_synthesized_meta_varmysre with 
| 0 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop0,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| 2 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop2,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| _ -> {

}
match resmysre with 
| 181 -> {
ansmysre = true;
}
| _ -> {
ansmysre = false;
}
if (ansmysre==true) {
generate ttl_changes_found(0,0);
} 
generate DNS_packet_out(DNS_packet_fwd_sip,DNS_packet_fwd_cip,DNS_packet_fwd_smac,DNS_packet_fwd_cmac,DNS_packet_fwd_ttl);
}
-----end after phase 2: if expression cannonization-------
-----after phase 3: immediate elimination-------
entry event DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl);

event DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl);

event ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count);

memop inc(int<<8>> src,int<<8>> unused)
 {return src+1;
}

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_mysrefst_ttl = Array.create(8);


global Array.t<<8>> mysre = Array.create(8);


memop mysrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g<2);
b2=(b2,g==8)
cell1=(b1||b2 -> 8|memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

memop mysrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f<8);
b2=(b2,memval+0<1)
cell1=(b1||b2 -> g^^memval), (true -> f+8)
cell2=None, None

ret=(true -> cell1)
}}

event mysrereset(int<<32>> mysrereset_mysreidx);

handle DNS_packet_out(int<<32>> DNS_packet_out_sip,int<<32>> DNS_packet_out_cip,int<<32>> DNS_packet_out_smac,int<<32>> DNS_packet_out_cmac,int<<32>> DNS_packet_out_ttl) {

}

handle ttl_changes_found(int<<32>> ttl_changes_found_idx,int<<8>> ttl_changes_found_count) {

}

handle mysrereset(int<<32>> mysrereset_mysreidx) {
Array.set(assigned_var_mysrefst_ttl,mysrereset_mysreidx,0);
Array.set(mysre,mysrereset_mysreidx,0);
}

handle DNS_packet_fwd(int<<32>> DNS_packet_fwd_sip,int<<32>> DNS_packet_fwd_cip,int<<32>> DNS_packet_fwd_smac,int<<32>> DNS_packet_fwd_cmac,int<<32>> DNS_packet_fwd_ttl) {
int<<1>> ansmysre = 1;
int<<32>> mysreidx = 0;
int<<8>> f_synthesized_meta_varmysre = 0;
int<<8>> g_synthesized_meta_varmysre = 0;
int<<8>> memop_synthesized_meta_varmysre = 0;
int<<32>> fst_ttl = Array.setm(assigned_var_mysrefst_ttl,mysreidx,re12351sdaCheckThenSet,DNS_packet_fwd_ttl);
int<<8>> countermysre = 0;
int<<32>> if_precomp = fst_ttl-DNS_packet_fwd_ttl;
if (if_precomp!=0) {
countermysre = countermysre<<1+1;
} else {
countermysre = countermysre<<1;
}
int<<8>> resmysre = 0;
match countermysre with 
| 1 -> {
f_synthesized_meta_varmysre = 173;
g_synthesized_meta_varmysre = 5;
memop_synthesized_meta_varmysre = 0;
}
| 0 -> {
f_synthesized_meta_varmysre = 243;
g_synthesized_meta_varmysre = 181;
memop_synthesized_meta_varmysre = 2;
}
| _ -> {

}
int<<8>> resmysre = 0;
match memop_synthesized_meta_varmysre with 
| 0 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop0,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| 2 -> {
resmysre = Array.update_complex(mysre,mysreidx,mysrememop2,f_synthesized_meta_varmysre,g_synthesized_meta_varmysre,0);
}
| _ -> {

}
match resmysre with 
| 181 -> {
ansmysre = 1;
}
| _ -> {
ansmysre = 0;
}
if (ansmysre==1) {
generate ttl_changes_found(0,0);
} 
generate DNS_packet_out(DNS_packet_fwd_sip,DNS_packet_fwd_cip,DNS_packet_fwd_smac,DNS_packet_fwd_cmac,DNS_packet_fwd_ttl);
}
-----end after phase 3: immediate elimination-------
