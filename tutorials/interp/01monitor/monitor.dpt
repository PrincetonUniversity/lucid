// some constants -- not important.
const int<9> OUT_PORT = 1;
const int<9> SERVER_PORT = 2;

// type definitions in lucid are structs 
// in c. 
// The types we define here specify 
// the formats of packet headers. 
type eth_t = {
	int<48> dmac;
	int<48> smac;
	int<16> etype;
}
type ip_t = {
	int src;
	int dst;
	int<16> len; 
} // note: for simplicity, ip_t is not the full packet header.


/********** Events *********/
// A lucid program is event driven. Events have names and carry data. 
// Events abstract two things: 
// 1) Packets from the outside network. For example, 
//    in this program, there is an "eth_ip" event that 
//    represents an ethernet / IP packet.  
// 2) Internal messages and delayed computations. In the process 
//    of handling an event, your program can generate other events 
//    that get raised at the current switch, or at other connected 
//    switches. In this program, there is a 
//    "prepare_report" internal event, which does some processing 
//    before sending a report event to an external monitoring server. 

event eth_ip(eth_t eth, ip_t ip);

event prepare_report(eth_t eth, ip_t ip);

event report(int src, int dst, int<16> len) {skip;}


/********** Handlers *********/
// When an event arrives, it triggers the handler with the same name. 
// A handler typically generates other events, to process 
// at a later point in time or at a different location in the network.  
// The "generate(<event>)" command produces an event that will be 
// handled later on the same node. 
// The "generate_port(<port>, <event>)" command produces an event that 
// will be sent out of the specified port for processing at another node.
handle eth_ip(eth_t eth, ip_t ip) {
	// 1. forward an event representing the packet out of port 1.
	generate_port(OUT_PORT, eth_ip(eth, ip));
	// 2. prepare a report to send to the monitoring server.
	generate(prepare_report(eth, ip));
}

handle prepare_report(eth_t eth, ip_t ip) {
	printf("sending report about packet {src=%d; dst=%d; len=%d} to monitor on port %d", ip#src, ip#dst, ip#len, SERVER_PORT);
	// make an report event and send it to the monitoring server. 
	event r = report(ip#src, ip#dst, ip#len);
	generate_port(SERVER_PORT, r);
}
