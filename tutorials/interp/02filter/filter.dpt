const int<9> OUT_PORT = 1;
const int<9> SERVER_PORT = 2;


type eth_t = {
	int<48> dmac;
	int<48> smac;
	int<16> etype;
}
type ip_t = {
	int src;
	int dst;
	int<16> len; 
}

/********** Events *********/
event eth_ip(eth_t eth, ip_t ip);

event prepare_report(eth_t eth, ip_t ip);

event report(int src, int dst, int<16> len) {skip;}

/********** Tables *********/
// When you call a table, it will 
// execute a pre-installed action. 
// Actions have two sets of parameters. 
// The first set of parameters are bound 
// when the action is installed into the table; 
// the second set of parameters is bound 
// when the action is called by Table.lookup.
action bool mk_result(bool b)() {
	return b;
}


type key_t = {
	int s;
	int d;
}

/* 
	Table.t's type args (inside the << >>): 
		1. key type
		2. action install-time argument type
		3. action run-time argument type
		4. action return type

	Table.create(num_entries, possible_actions (list), default_action, default_action_installtime_arg);
*/
global Table.t<<key_t, bool, (), bool>> filter_table = Table.create(1024, [mk_result], mk_result, false);



/********** Filtering functions *********/

fun bool filter_with_if(ip_t ip) {
	if (ip#src == 1 && ip#dst == 2) {
		return true;
	} 
	else {
		if (ip#src == 3 && ip#dst == 4) {
			return true;
		}
		else {
			return false;
		}
	}
}

fun bool filter_with_match(ip_t ip) {
	match (ip#src, ip#dst) with 
	| 1, 2 -> {return true;}
	| 3, 4 -> {return true;}
	|	   _ -> {return false;}
}


fun bool filter_with_table(ip_t ip) {
	/* Table.lookup(table, key, action_runtime_arg); */
	bool r = Table.lookup(
		filter_table, 
		{s=ip#src; d=ip#dst},
		() // () just means there is no runtime argument
		);
	return r;
}

/********** Handlers *********/
handle eth_ip(eth_t eth, ip_t ip) {
	generate_port(OUT_PORT, eth_ip(eth, ip));

	// if (filter_with_if(ip)) {
	// if (filter_with_match(ip)) {
	if (filter_with_table(ip)) {
		generate(prepare_report(eth, ip));
	}
}

handle prepare_report(eth_t eth, ip_t ip) {
	printf("sending report about packet {src=%d; dst=%d; len=%d} to monitor on port %d", ip#src, ip#dst, ip#len, SERVER_PORT);
	event r = report(ip#src, ip#dst, ip#len);
	generate_port(SERVER_PORT, r);
}
