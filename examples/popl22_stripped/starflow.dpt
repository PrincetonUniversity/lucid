include "Memops.dpt"
const int h1_poly = 10398247;
const int H_SLOTS = 1024;
const int L_SLOTS = 128;
const int SIZE_SHORT = 2;
const int MAX_IDX = 7;
const int MMATCH = 0;

entry event monitor_pkt(int src, int len);
const int COLLECTION_SERVER = 1234;
exit event short_record(int src, int len, int[2] recs);
exit event long_record(int src, int len, int[8] recs);

event free_block(int block_id);

global Array.t<<32>> srcarr = Array.create(H_SLOTS);
global Array.t<<32>> ctarr = Array.create(H_SLOTS);
global Array.t<<32>> idxarr = Array.create(H_SLOTS);

global Array.t<<32>> stack_top = Array.create(1);
global Array.t<<32>> longblock_stack = Array.create(L_SLOTS);
global Array.t<<32>> block_map = Array.create(H_SLOTS);

global Array.t<<32>>[8] rec = [Array.create(H_SLOTS) for i < 8];

memop incr_idx (int stored, int nothingval) {
  if (stored == MAX_IDX) {
    return 0;
  } else {
    return stored + 1;
  }
}

memop decr_sat (int stored, int nothingval) {
  if (stored == 0) {
    return 0;
  } else {
    return stored - 1;
  }
}

fun int update_or_get(Array.t<<32>> rec, int h1, int len, bool update) {
  if (update) {
    return Array.update(rec, h1, fst, 0, snd, len);
  } else {
    return Array.get(rec, h1);
  }
}

handle monitor_pkt(int src, int len) {
  int ct = 0; int idx = 0;   int[8] stored_recs = [0; 0; 0; 0; 0; 0; 0; 0];
  int blk_id = 0;
    int h1 = hash<<32>>(h1_poly, src);
  int stored_src = Array.update(srcarr, h1, fst, 0, snd, src);
    int mtch = src - stored_src;
  if (mtch == MMATCH) {
    ct = Array.update(ctarr, h1, sum, 1, sum, 1);
    idx = Array.update(idxarr, h1, incr_idx, 1, incr_idx, 1);
  }
        if (ct == SIZE_SHORT) {
    int stack_idx = Array.update(stack_top, 0, fst, 0, decr_sat, 1);
        if (stack_idx != 0) {
      blk_id = Array.get(longblock_stack, stack_idx);
      Array.set(block_map, h1, blk_id);
    }
  } else {
        blk_id = Array.get(block_map, h1);
  }
  if (blk_id == 0) {
        match idx with
    | 2 -> { idx = 0; }
    | 4 -> { idx = 0; }
    | 6 -> { idx = 0; }
    | 3 -> { idx = 1; }
    | 5 -> { idx = 1; }
    | 7 -> { idx = 0; }
  }
  if (mtch == MMATCH) {
    stored_recs = [update_or_get(rec[i], h1, len, idx == size_to_int(i)) for i < 8];
  } else {      stored_recs = [Array.get(rec[i], h1) for i < 8];
  }

      if (mtch == MMATCH) {
    if (idx == 0) {
      if (blk_id == 0) {
        generate Event.sslocate(short_record(src, len, [stored_recs[0]; stored_recs[1]]), COLLECTION_SERVER);
      } else {
        generate Event.sslocate(long_record(src, len, stored_recs), COLLECTION_SERVER);
      }
    }
  } else {
            if (blk_id == 0) {
      generate Event.sslocate(short_record(src, len, [stored_recs[0]; stored_recs[1]]), COLLECTION_SERVER);
    } else {
      generate Event.sslocate(long_record(src, len, stored_recs), COLLECTION_SERVER);
            generate free_block(blk_id);
    }
  }
}

handle free_block(int block_id) {
    int stack_idx = Array.update(stack_top, 0, sum, 1, sum, 1);
    Array.set(longblock_stack, stack_idx, block_id);
}
