// A stateful firewall with the same functionality as sfw.dpt, 
// but with two entry events: 
// request_packet -- a packet from a local client to a remote server. 
// response_packet -- a packet from a remote client to a local server. 

const int num_entries = 1024;
const int timeout_thresh = 10000;
const int NULL = 0;
const int TRUE = 1;
const int FALSE = 0;
const int seed1_val = 10398247;
const int seed2_val = 1295981879;

// entry events
entry event request_packet (int client_ip, int server_ip);
entry event response_packet (int server_ip, int client_ip);
// exit events
exit event request_continue (int src_ip, int dst_ip);
exit event response_continue (int src_ip, int dst_ip);

// background events
event insert (int client_ip, int server_ip, int ts, int first_client_ip, int first_server_ip, int<<8>> retry_ct);
event reinsert(int client_ip, int server_ip, int ts, int first_client_ip, int first_server_ip, int<<8>> retry_ct);
event scan (int prev_idx, int<<8>> prev_stage);
event delete (int cur_idx, int<<8>> cur_stage);

// persistent state
// (client_ip, server_ip) -> last_accessed_ts
global Array.t<<32>> stg1_client = Array.create(num_entries);
global Array.t<<32>> stg1_server = Array.create(num_entries);
global Array.t<<32>> stg1_last_accessed  = Array.create(num_entries);

global Array.t<<32>> stg2_client = Array.create(num_entries);
global Array.t<<32>> stg2_server = Array.create(num_entries);
global Array.t<<32>> stg2_last_accessed  = Array.create(num_entries);

global Array.t<<32>> client_stash = Array.create(1);
global Array.t<<32>> server_stash = Array.create(1);

/* get_functions */
memop get_mem(int stored_val, int unused) {
    return stored_val;
}
memop get_cmp(int stored_val, int target_val) {
    if (stored_val == target_val){
        return TRUE;
    }
    else {
        return FALSE;
    }
}
/* check if timestamp is older than threshold. */
memop get_is_over_thresh(int stored_ts, int cur_ts) {
    if ((cur_ts - stored_ts) > timeout_thresh) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}
/* set functions */
memop set_mem(int stored_val, int new_val) { 
    return new_val;
}
memop set_mem_if_null(int stored_val, int new_val) {
    if (stored_val == NULL) {
        return new_val;
    }
    else {
        return stored_val;
    }
}


// packet from remote server to local client
handle response_packet(int server_ip, int client_ip) {
    int sip = server_ip; int cip = client_ip;
    /* check if the key is in the first hash table stage */
    int h1h = hash<<32>>(seed1_val, client_ip, server_ip);
    int stg1_client_stored = Array.getm(stg1_client, h1h, get_cmp, cip);
    int stg1_server_stored = Array.getm(stg1_server, h1h, get_cmp, sip);
    if (stg1_client_stored==TRUE && stg1_server_stored==TRUE) {
        generate response_continue(client_ip, server_ip);
    }
    else {
        int h2h = hash<<32>>(seed2_val, client_ip, server_ip);
        /* check if the key is in the second hash table stage. */
        int stg2_client_stored = Array.getm(stg2_client, h2h, get_cmp, client_ip);
        int stg2_server_stored = Array.getm(stg2_server, h2h, get_cmp, server_ip);
        if (stg2_client_stored==TRUE && stg2_server_stored==TRUE) {
            generate response_continue(client_ip, server_ip);
        }
        else {
            /* check if reverse direction of the flow is in the stash. */
            int client_stored_stash = Array.getm(client_stash, 0, get_cmp, server_ip);
            int server_stored_stash = Array.getm(server_stash, 0, get_cmp, client_ip);
            if (client_stored_stash == TRUE && server_stored_stash == TRUE) {
                generate response_continue(client_ip, server_ip);
            }           
        }
    }
}

// packet from local client to remote server
handle request_packet(int client_ip, int server_ip) {
	int<<32>> h1h = hash<<32>>(seed1_val, client_ip, server_ip);
    int cur_ts = Sys.time();

    /* check if the key is in the first hash table stage */
    int stg1_client_stored = Array.getm(stg1_client, h1h, get_cmp, client_ip);
    int stg1_server_stored = Array.getm(stg1_server, h1h, get_cmp, server_ip);
    /* found in first stage of hash table */
    if (stg1_client_stored==TRUE && stg1_server_stored==TRUE) {
        Array.setm(stg1_last_accessed, h1h, set_mem, cur_ts);
        generate request_continue(client_ip, server_ip);
    }
    else {
        int h2h = hash<<32>>(seed2_val, client_ip, server_ip);
        /* check if the key is in the second hash table stage. */
        int stg2_client_stored = Array.getm(stg2_client, h2h, get_cmp, client_ip);
        int stg2_server_stored = Array.getm(stg2_server, h2h, get_cmp, server_ip);
        if (stg2_client_stored==TRUE && stg2_server_stored==TRUE) {
            // set last access timestamp of this flow to cur_ts
            Array.setm(stg2_last_accessed, h2h, set_mem, cur_ts);
            generate request_continue(client_ip, server_ip);
        }
        else {
            // fetch contents of stash, write flow key to the stash if its empty. 
            int stashed_client = Array.update(client_stash, 0, get_mem, 0, set_mem_if_null, client_ip);
            int stashed_server = Array.update(server_stash, 0, get_mem, 0, set_mem_if_null, server_ip);

            int stashed_client_eq = client_ip - stashed_client;
            int stashed_server_eq = server_ip - stashed_server;
            /* stash is empty: spawn an insert event and allow the packet to continue. */
            if (stashed_client == NULL && stashed_server == NULL) {
                generate insert (client_ip, server_ip, cur_ts, client_ip, server_ip, 0);
                generate request_continue (client_ip, server_ip);
            }
            /* stash is not empty. 
            We only continue if current flow is pending an install.  */
            else {
                if (stashed_client_eq == NULL && stashed_server_eq == NULL) {
                    generate request_continue (client_ip, server_ip);                    
                }
            }
        }
    }
}

handle insert(int client_ip, int server_ip, int ts, int first_client_ip, int first_server_ip, int<<8>> retry_ct) {
    int sip = server_ip; int cip = client_ip;
    int h1h = hash<<32>>(seed1_val, client_ip, server_ip);
    /* insert and evict to stage 1 */
    int client_victim = Array.update(stg1_client, h1h, get_mem, 0, set_mem, cip);
    int server_victim = Array.update(stg1_server, h1h, get_mem, 0, set_mem, sip);
    int ts_victim = Array.update(stg1_last_accessed, h1h, get_mem, 0, set_mem, ts);

    /* if there was a collision, insert and evict to stage 2 */
    // if (client_victim != 0 && server_victim != 0) { 
    if (client_victim != NULL && server_victim != NULL) { 
        /* insert and evict to stage 2. */
        int h2h = hash<<32>>(seed2_val, client_victim, server_victim);
        client_victim = Array.update(stg2_client, h2h, get_mem, 0, set_mem, client_victim);
        server_victim = Array.update(stg2_server, h2h, get_mem, 0, set_mem, server_victim);
        ts_victim = Array.update(stg2_last_accessed, h2h, get_mem, 0, set_mem, ts_victim);

        if (client_victim != NULL && server_victim != NULL) { 
            /* we've evicted something from the second stage. 
            This entry needs to be re-inserted, so put it in the stash. */
            Array.setm(client_stash, 0, set_mem, client_victim);
            Array.setm(server_stash, 0, set_mem, server_victim);
            generate reinsert(client_victim, server_victim, ts_victim, first_client_ip, first_server_ip, retry_ct);
        }
    }
}

/* check for an insertion cycle and possibly call insert again. */
handle reinsert(int client_ip, int server_ip, int ts, int first_client_ip, int first_server_ip, int<<8>> retry_ct) {
    /* check if we're re-inserting the original element */
    int client_diff = client_ip - first_client_ip;
    int server_diff = server_ip - first_server_ip;    
    int<<8>> next_retry_ct = retry_ct;
    if (client_diff == 0 && server_diff == 0) {
        next_retry_ct = next_retry_ct + 1;
    }
    /* A retry_ct of 2 means that there is an unresolvable cycle 
    (we consider the table full.) */
    if (next_retry_ct == 2) {        
        Array.set(client_stash, 0, 0);
        Array.set(server_stash, 0, 0); 
    }
    /* if we did not reach a cycle, insert again. */
    else {  
        generate insert(client_ip, server_ip, ts, first_client_ip, first_server_ip, retry_ct);
    }
}

handle scan (int prev_idx, int<<8>> prev_stage) {
    /* calculate address to scan */
    int ts = Sys.time();
    int over_thresh = 0; 
    int next_scan_idx = 0;
    int<<8>> next_stage = 0;
    if (prev_stage == 1) {
        next_stage = 2;
    }
    else { /* prev_stage == 2 */
        next_scan_idx = prev_idx + 1;
        next_stage = 1;
    }
    if (next_stage == 1) {
        // Check if an entry in stage 1 of the map is over threshold. 
        over_thresh = Array.getm(stg1_last_accessed, next_scan_idx, get_is_over_thresh, ts);
    }
    else {
        // Check if an entry in stage 2 of the map is over threshold. 
        over_thresh = Array.getm(stg2_last_accessed, next_scan_idx, get_is_over_thresh, ts);    
    }
    if (over_thresh == 1) {
        // delete this index. 
        generate delete(next_scan_idx, next_stage);
    }
    else {
        // continue scanning. 
        generate scan(next_scan_idx, next_stage);            
    }
}

handle delete (int cur_idx, int<<8>> cur_stage) {
    int i = cur_idx;
    /* set all arrays at this position to zero.  */
    if (cur_stage == 1) {
        Array.set(stg1_client, i, 0);
        Array.set(stg1_server, i, 0);
        Array.set(stg1_last_accessed, cur_idx, 0);
    }
    else {
        Array.set(stg2_client, cur_idx, 0);
        Array.set(stg2_server, cur_idx, 0);
        Array.set(stg2_last_accessed, cur_idx, 0);
    }
    /* continue scanning */
    generate scan(cur_idx, cur_stage);    
}
