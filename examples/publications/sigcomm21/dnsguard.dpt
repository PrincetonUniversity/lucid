/*
This program protects client againt DNS reflection 
attacks. 
1.  A count min sketch measures the number of DNS responses sent to each monitored client. 
2.  When the number of DNS responses crosses a threshold, 
    the monitored client gets added to a "protected client" bloom filter.  
3.  DNS Packets from clients in the protected clients set are passed 
    through a probabalistic stateful firewall (another bloom filter, basically). 
4.  The stateful firewall blocks DNS responses to clients unless the response 
    is for a request that the client has previously made. 
5.  Background threads, which are not yet implemented, will periodically 
    reset the count min sketches and bloom filters. 
*/

/* 


Done:
  - pass type checker
  - adjust integer sizes (bloom filters and TRUE/FALSE should be 1 bit.)

Todo:
  - test in virtual network with python backend
  - compile to P4-tofino
  - write simple P4 driver program
  - compile to Tofino
  - add background tasks
*/

const int<<1>> TRUE = 1;
const int<<1>> FALSE = 0;

const int DNS_REQ = 0;
const int DNS_RES = 1;
const int THRESH = 1000;

const int T_INTERVAL = 1000; // How long between rotations. 

const int h1_poly = 10398247;
const int h2_poly = 1295981879;

entry event dnsrequest_in(int src, int dst, int req_id);
entry event dnsresponse_in(int src, int dst, int req_id);
// Exit point back to the P4 program. Generated when a packet is allowed to 
// proceed.
exit event dnspkt_out (int<<1>> packet_allowed);

event clear(int idx);
event rotate();

/*========================================
=            count-min sketch            =
========================================*/

global Array.t<<32>> iid = Array.create(1);

const int countmin_slots = 1024;
/* Arrays are mutable data structures that persist across packets. */
global Array.t<<32>> cm1 = Array.create(countmin_slots);
global Array.t<<32>> cm2 = Array.create(countmin_slots);

global Array.t<<32>> cm3 = Array.create(countmin_slots);
global Array.t<<32>> cm4 = Array.create(countmin_slots);

global Array.t<<32>> cm5 = Array.create(countmin_slots);
global Array.t<<32>> cm6 = Array.create(countmin_slots);

const int sfw_slots = 1024;
global Array.t<<1>> sfw1 = Array.create(sfw_slots);
global Array.t<<1>> sfw2 = Array.create(sfw_slots);

global Array.t<<1>> sfw3 = Array.create(sfw_slots);
global Array.t<<1>> sfw4 = Array.create(sfw_slots);

global Array.t<<1>> sfw5 = Array.create(sfw_slots);
global Array.t<<1>> sfw6 = Array.create(sfw_slots);

// zero out a position in all the arrays.
handle clear(int idx) {  
  // rot_id determines which copy is being cleared. 
  int rot_id = Array.get(iid, 0);
  int tmp_idx1 = idx;
  int tmp_idx2 = idx;
  int next_idx = tmp_idx1 + 1;
  if (rot_id == 0) {
    Array.set(cm1, tmp_idx1, 0);
    Array.set(cm2, tmp_idx2, 0);
    Array.set(sfw1, tmp_idx1, 0);
    Array.set(sfw2, tmp_idx2, 0);
  }
  else {
    if (rot_id == 1) {
      Array.set(cm3, tmp_idx1, 0);
      Array.set(cm4, tmp_idx2, 0);
      Array.set(sfw3, tmp_idx1, 0);
      Array.set(sfw4, tmp_idx2, 0);
    }
    else {
      Array.set(cm5, tmp_idx1, 0);
      Array.set(cm6, tmp_idx2, 0);
      Array.set(sfw5, tmp_idx1, 0);
      Array.set(sfw6, tmp_idx2, 0);
    }
  }
  if (next_idx != countmin_slots) {
    generate clear(next_idx);
  }
}

memop incr (int stored_ct, int incr_by) {
  return stored_ct + incr_by;
}


memop do_rotate (int stored_ct, int incr_by) {
  if (stored_ct == 2){
    return 0;
  }
  else {
    return stored_ct + 1;
  }
}

// rotate the data structures. 
handle rotate() {
  Array.setm(iid, 0, do_rotate, 1);
  generate clear(0);
  generate Event.delay (rotate(), T_INTERVAL);
}


memop gt_thresh (int stored_ct, int not_used) {
  if (stored_ct > THRESH) {
    return 1;
  }
  else {
    return 0;
  }
}
memop greatest (int stored_ct, int prev_max) {
  if (stored_ct > prev_max) {
    return stored_ct;
  }
  else {
    return prev_max;
  }
}


/* a DNS request. We assume its 
from a monitored host to some DNS server. */
handle dnsrequest_in(int src, int dst, int req_id) {

  // get the current rotation index. 

  int rot_id = Array.get(iid, 0);

  int h1 = hash<<32>>(h1_poly, src);
  int h2 = hash<<32>>(h2_poly, src);

  int ct1_gt_thresh = 0;
  int ct2_gt_thresh = 0;

  // this handler just reads. So rot_id --> which replica to read.
  if (rot_id == 0) {
    ct1_gt_thresh = Array.getm(cm1, h1, gt_thresh, 0);
    ct2_gt_thresh = Array.getm(cm2, h2, gt_thresh, 0);
  } 
  else {
    if (rot_id == 1) {
      ct1_gt_thresh = Array.getm(cm3, h1, gt_thresh, 0);
      ct2_gt_thresh = Array.getm(cm4, h2, gt_thresh, 0);
    }
    else {
      ct1_gt_thresh = Array.getm(cm5, h1, gt_thresh, 0);
      ct2_gt_thresh = Array.getm(cm6, h2, gt_thresh, 0);
    }
  }

  // if count > thresh, the host is protected.
  if (ct1_gt_thresh == 1 && ct2_gt_thresh == 1) { //ct1 and ct2 gt thresh
    // this handler just writes here. So rot_id --> which replicas to write. 
    int sfwh1 = hash<<32>>(h1_poly, src, dst, req_id);
    int sfwh2 = hash<<32>>(h2_poly, src, dst, req_id);
    if (rot_id == 0) {
      // 1 is active, 2 is warming.
      Array.set(sfw1, sfwh1, TRUE);
      Array.set(sfw2, sfwh2, TRUE);
      Array.set(sfw3, sfwh1, TRUE);
      Array.set(sfw4, sfwh2, TRUE);
    }
    else {
      if (rot_id == 1) {
        // 2 is active, 3 is warming.
        Array.set(sfw3, sfwh1, TRUE);
        Array.set(sfw4, sfwh2, TRUE);
        Array.set(sfw5, sfwh1, TRUE);
        Array.set(sfw6, sfwh2, TRUE);
      }
      else {
        // 3 is active, 1 is warming. (but we must access them in order)
        Array.set(sfw1, sfwh1, TRUE);
        Array.set(sfw2, sfwh2, TRUE);
        Array.set(sfw5, sfwh1, TRUE);
        Array.set(sfw6, sfwh2, TRUE);
      }
    } 
  }
  generate dnspkt_out(TRUE);
}

handle dnsresponse_in(int src, int dst, int req_id) {
  int rot_id = Array.get(iid, 0);

  // countmin 
  int h1 = hash<<32>>(h1_poly, dst);
  int h2 = hash<<32>>(h2_poly, dst);
  int ct1_gt_thresh = 0;
  int ct2_gt_thresh = 0;

  // this handler reads and writes.
  // so rot determine which ones we write to and which one we read from. 
  // 1 active, 2 warming
  if (rot_id == 0) {    
    ct1_gt_thresh = Array.update(cm1, h1, incr, 1, gt_thresh, 0);
    ct2_gt_thresh = Array.update(cm2, h2, incr, 1, gt_thresh, 0);
    Array.setm(cm3, h1, incr, 1);
    Array.setm(cm4, h2, incr, 1);
  } 
  else {
    // 2 active, 3 warming.
    if (rot_id == 1) {
      ct1_gt_thresh = Array.update(cm3, h1, incr, 1, gt_thresh, 0);
      ct2_gt_thresh = Array.update(cm4, h2, incr, 1, gt_thresh, 0);
      Array.setm(cm5, h1, incr, 1);
      Array.setm(cm6, h2, incr, 1);      
    }
    // 3 active, 1 warming.
    else {
      Array.setm(cm1, h1, incr, 1);
      Array.setm(cm2, h2, incr, 1);            
      ct1_gt_thresh = Array.update(cm5, h1, incr, 1, gt_thresh, 0);
      ct2_gt_thresh = Array.update(cm6, h2, incr, 1, gt_thresh, 0);
    }
  }
  // if count > thresh, the host is protected.
  if (ct1_gt_thresh == 1 && ct2_gt_thresh == 1) { //ct1 and ct2 gt thresh
    // stateful firewall.
    int sfwh1 = hash<<32>>(h1_poly, src, dst, req_id);
    int sfwh2 = hash<<32>>(h2_poly, src, dst, req_id);
    int<<1>> in_1 = FALSE;
    int<<1>> in_2 = FALSE;
    // This thread only reads. 
    if (rot_id == 0) {
      in_1 = Array.get(sfw1, sfwh1);
      in_2 = Array.get(sfw2, sfwh2);
    }
    else {
      if (rot_id == 1){
        in_1 = Array.get(sfw3, sfwh1);
        in_2 = Array.get(sfw4, sfwh2);
      }
      else {
        in_1 = Array.get(sfw5, sfwh1);
        in_2 = Array.get(sfw6, sfwh2);        
      }      
    }
    if (in_1 == TRUE){
      if (in_2 == TRUE) {
        generate (dnspkt_out(TRUE));
      }
    }
  }
  // host not protected, always allow.
  else {
    generate dnspkt_out(TRUE);
  }
}
