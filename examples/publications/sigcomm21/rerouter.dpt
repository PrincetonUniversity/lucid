// ! work in progress !
// 1/17/21 -- check_neighbors has syntax for 
// delayed and multicast event generation. 

// This is a version of fault_tolerant_router.dpt 
// with placeholders for location and timed events 
// Program components
// 1. destination-based forwarding
// 2. routing
// 3. fault-tolerance (detecting links that are down and rerouting)

// Program highlights: 
// Fast fault detection (t_detect <= t_down + (p * t_event))
// Fast rerouting (t_reroute <= ~ t_down + t_wait + (n * t_event))
// where:
// p = the number of neighbor switches
// n = size of routing table
// t_event = time to generate, enqueue, and process an event (~600ns)



// Consts
const int TRUE = 1;
const int FALSE = 0;
// I am a switch with 8 output ports.
const int neighbor_ct = 8;
const int INF = 2147483647; // max 32-bit signed int (maybe should be unsigned?)
const int NO_ROUTE = 255; // 0xff
// Number of hosts in my network. 
const int tbl_sz = 1024; 
// If a link has not been successfully probed in 
// 10ms (10 million nanoseconds), consider it down.
const int t_down = 10000000;
// update routing table once every 10us.
const int t_wait = 10000;


// Location identifiers
// Set by macro preprocessor.
const int SELF = 0;
group NEIGHBORS = {1};

// state 
// map dst --> (shortest known pathlen, next hop)
global Array.t<<32>> nexthop_pathlen  = Array.create(tbl_sz);
global Array.t<<32>> nexthop_nid  = Array.create(tbl_sz);

// map neighbor --> (last pinged time, port)
global Array.t<<32>> last_seen = Array.create(neighbor_ct);
global Array.t<<32>> nid_port = Array.create(neighbor_ct);

// routing failure counters
global Array.t<<32>> noroute_ct = Array.create(tbl_sz);
global Array.t<<32>> linkdown_ct = Array.create(tbl_sz);

// ---- events ----

// forwarding
// Select an output port based on dst.
// Assume that dst is an integer in the range 0 - (tbl_sz-1)
// (the native P4 can have a static table that does this 
// mapping)
entry event packetin(int dst);
exit event packetout(int outport);

// routing 
// Hi this is q_nid, what is your shortest path to dst?
event query_nexthop (int q_nid, int dst);
// placeholder for a multicast event.
// mevent query_nexthop (int q_nid, int dst);

// Hi, this is r_nid, my shortest path to dst is pathlen hops. 
event reply_nexthop (int r_nid, int dst, int len_from_nexthop);

// Recursive event (and the main router thread): 
// Check if the route for entry i needs to be updated. 
// If so, broadcast a query to all neighbors. 
// Finally, recurse to check entry i+1.
event update_route(int i);


// ault detection 
// Hi this is src_nid, can I still reach you? 
event query_probe (int src_nid);
// Placeholder for a multicast event
// mevent query_probe (int src_nid);

// Hi, this is nid, you can still reach me
event reply_probe (int nid);

// Recursive event: generate a query probe to all neighbors and wait.
event check_neighbors();


// ----- memops for arrays ------
memop update_pathlen(int cur_pathlen, int len_from_nexthop) {
    // I would rather write this as: (cur_pathlen > len_from_nexthop + 1)
    // but the compiler backend doesn't support a constant on the rhs of a conditional yet.
    if ((len_from_nexthop + 1) < cur_pathlen)  {
        return len_from_nexthop + 1;
    }
    else{
        return cur_pathlen;
    }
}

memop test_path_change(int cur_pathlen, int len_from_nexthop) {
    if ((len_from_nexthop + 1) < cur_pathlen) {
        // update_pathlen has changed the route. 
        return TRUE;
    }
    else {
        // update_pathlen has not changed the route.
        return FALSE;
    }
}

memop nid_is_down(int last_seen_ts, int cur_ts) {
    // Note: this logic assumes that cur_ts will never 
    // rollover and loop last_seen_ts. 
    // This takes 4.29 seconds, so it will never happen 
    // because a neighbor that is reachable will always 
    // have replied to a probe in the last 4 seconds. 
    if ((cur_ts - last_seen_ts) > t_down) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}

memop incr_ctr(int cur_val, int incr_by) {
    return cur_val + incr_by;
}

// ----- Forwarding -----
handle packetin(int dst) {
    int ts = Sys.time();    
    // check if a path exists. 
    int next_hop = Array.get(nexthop_nid, dst);
    int nexthop_is_down = Array.getm(last_seen, next_hop, nid_is_down, ts);
    if ((next_hop != NO_ROUTE)) {
        if (nexthop_is_down == FALSE) {
            int outport = Array.get(nid_port, next_hop);
            generate packetout(outport);        
        }
    }
    // if there is no route or nexthop is down, we should increment a counter 
    // or generate an alert so that the operator can figure out what 
    // happened to the packet.
    // e.g., generate: http://www.networksorcery.com/enp/rfc/rfc792.txt
    if (next_hop == NO_ROUTE) {
        Array.setm(noroute_ct, dst, incr_ctr, 1);
    }
    else {
        if (nexthop_is_down == TRUE) {
            Array.setm(linkdown_ct, dst, incr_ctr, 1);
        }
    }
}

// ----- Routing -----
// lookup pathlen to dst, send message back to q_nid
handle query_nexthop(int q_nid, int dst) {
    int pathlen = Array.get(nexthop_pathlen, dst);
    generate Event.sslocate(reply_nexthop(SELF, dst, pathlen), q_nid);
}

// update the routing table if the path is shorter. 
handle reply_nexthop (int r_nid, int dst, int len_from_nexthop) {
    // update pathlen and test if the path length has changed. 
    // we only change paths if the new path is shorter than 
    // the current path. Note that this implicitly breaks ties: 
    // if two nexthops offer paths of equal length, 
    // the nexthop that replies first will be chosen. 
    int found_shorter_path = Array.update(nexthop_pathlen, dst, 
        test_path_change, len_from_nexthop, 
        update_pathlen, len_from_nexthop);
    // If this is a shorter path, update the nexthop table.
    if (found_shorter_path == TRUE) {
        Array.set(nexthop_nid, dst, r_nid);
    }
}

handle update_route(int i) {
    int ts = Sys.time();
    int next_i = i + 1;
    int pathlen = Array.get(nexthop_pathlen, i);
    // If the path length is infinite, 
    // query all neighbors for a route to i.
    if (pathlen == INF) {
        mgenerate Event.smlocate(query_nexthop(SELF, i), NEIGHBORS);
    }
    else {
        // If the pathlength is not zero (i.e., this is not 
        // a directly-connected host), we need to check if 
        // the current route is invalid due to a failure 
        // of the link to nexthop.
        if (pathlen != 0) {
            int next_hop = Array.get(nexthop_nid, i);
            int nexthop_is_down = Array.getm(last_seen, next_hop, nid_is_down, ts);
            if (nexthop_is_down == TRUE) {
                mgenerate Event.smlocate(query_nexthop(SELF, i), NEIGHBORS);
            }
        }
    }
    // scan the next entry in the routing table. 
    if (next_i == 0) { // pause between restarts.
        generate Event.delay(update_route(next_i), t_wait);      
    } else {
        generate update_route(next_i);      
    }
}

// ---- fault detection ----
// Just reply to src_nid.
handle query_probe(int src_nid) {
    generate Event.sslocate(reply_probe(SELF), src_nid);
}
// update the last_seen table.
handle reply_probe (int nid) {
    int ts = Sys.time();
    Array.set(last_seen, nid, ts);
}

handle check_neighbors() {
    mgenerate Event.smlocate(query_probe(SELF), NEIGHBORS);
    generate Event.delay(check_neighbors(), t_wait);
}

// ----- initialization -----

// To start the network, a controller must
// 1. initialize every entry of the routing table to infinite length path and no route.
// 2. add entries for directly connected hosts with path length 1.
// 3. configure the mapping from nid to port on every switch. 
// We assume the management CPU does this when loading the program. 

// // Add an entry to the routing table from the controller. 
// // If we split this event out into two events, we get a 
// // compiler error in P4t backend. Debugging.
// event add_route_entry(int host_ip, int pathlen, int nid);
// handle add_route_entry(int host_ip, int pathlen, int nid) {
//  Array.set(nexthop_pathlen, host_ip, pathlen);
//  Array.set(nexthop_nid, host_ip, nid);
// }

// // Add an entry to the port-to-nid map.
// event configure_port(int nid, int port);
// handle configure_port(int nid, int port) {
//  Array.set(nid_port, nid, port);
// }
