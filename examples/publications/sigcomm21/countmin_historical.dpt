/*

*/

const int<<1>> TRUE = 1;
const int<<1>> FALSE = 0;
const int T_INTERVAL = 1000; // How long between rotations. 

const int h1_poly = 10398247;
const int h2_poly = 1295981879;


// measure count. 
entry event pktin(int src, int dst);

// clear a slice of the sketch and export.
event clear(int idx, int ts);
event rotate();

// export a sketch slice to a telemetry collection server. 
const int collector = 101;
event export(int idx, int ts, int val1, int val2);


global Array.t<<32>> iid = Array.create(1);

const int countmin_slots = 1024;
/* Arrays are mutable data structures that persist across packets. */
global Array.t<<32>> cm1 = Array.create(countmin_slots);
global Array.t<<32>> cm2 = Array.create(countmin_slots);

global Array.t<<32>> cm3 = Array.create(countmin_slots);
global Array.t<<32>> cm4 = Array.create(countmin_slots);

global Array.t<<32>> cm5 = Array.create(countmin_slots);
global Array.t<<32>> cm6 = Array.create(countmin_slots);


memop read(int stored, int dummy){
  return stored;
}
memop wipe(int stored, int dummy){
  return 0;
}


// zero out a position in all the arrays
handle clear(int idx, int ts) {  
  // rot_id determines which copy is being cleared. 
  int rot_id = Array.get(iid, 0);
  int tmp_idx1 = idx; int tmp_idx2 = idx; // 2 copies -- just an optimization.
  int next_idx = tmp_idx1 + 1;
  int val1 = 0; int val2 = 0;
  if (rot_id == 0) {
    Array.update(cm1, tmp_idx1, read, 0, wipe, 0);
    Array.update(cm2, tmp_idx2, read, 0, wipe, 0);
  }
  else {
    if (rot_id == 1) {
    Array.update(cm3, tmp_idx1, read, 0, wipe, 0);
    Array.update(cm4, tmp_idx2, read, 0, wipe, 0);
    }
    else {
    Array.update(cm5, tmp_idx1, read, 0, wipe, 0);
    Array.update(cm6, tmp_idx2, read, 0, wipe, 0);
    }
  }
  if (next_idx != countmin_slots) {
    generate clear(next_idx, ts);
  }
  // export to collector.
  generate Event.sslocate(export(idx, ts, val1, val2), collector); 
}


memop do_rotate (int stored_ct, int incr_by) {
  if (stored_ct == 2){
    return 0;
  }
  else {
    return stored_ct + 1;
  }
}

// rotate the data structures. 
handle rotate() {
  Array.setm(iid, 0, do_rotate, 1);
  int t_rotate = Sys.time();
  generate clear(0, t_rotate);
  generate Event.delay (rotate(), T_INTERVAL);
}

memop incr (int stored_ct, int incr_by) {
  return stored_ct + incr_by;
}

// packet in is dead simple: just write to the active and warming up sketches. 
handle pktin(int src, int dst) {
  int rot_id = Array.get(iid, 0);

  int h1 = hash<<32>>(h1_poly, dst);
  int h2 = hash<<32>>(h2_poly, dst);

  // 1 active, 2 warming
  if (rot_id == 0) {    
    Array.setm(cm1, h1, incr, 1);
    Array.setm(cm2, h2, incr, 1);
    Array.setm(cm3, h1, incr, 1);
    Array.setm(cm4, h2, incr, 1);
  } 
  else {
    // 2 active, 3 warming.
    if (rot_id == 1) {
      Array.setm(cm3, h1, incr, 1);
      Array.setm(cm4, h2, incr, 1);
      Array.setm(cm5, h1, incr, 1);
      Array.setm(cm6, h2, incr, 1);
    }
    // 3 active, 1 warming.
    else {
      Array.setm(cm1, h1, incr, 1);
      Array.setm(cm2, h2, incr, 1);            
      Array.setm(cm5, h1, incr, 1);
      Array.setm(cm6, h2, incr, 1);
    }
  }
}

// export is really an external event, handled on a server, but the compiler will complain if we don't have something for it.
handle export(int idx, int ts, int val1, int val2) {int x = 1;} 
