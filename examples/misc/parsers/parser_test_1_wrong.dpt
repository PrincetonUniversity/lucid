type eth = { int srcMac; int dstMac; int<16> etherTy; }
type ip =  { int srcIp; int dstIp; int srcPort; int dstPort; }

event background(int x) { printf("%d", x); }
event eth(eth e) { generate background(e#srcMac); }
event etheth(eth e, eth e') { generate background(e#srcMac); }
event eth_ip(eth e, ip ip) { generate background(ip#srcIp); }

parser parse_ip(bitstring p, eth e) {
  ip ip = read(p);
  generate eth_ip(e, ip);
}

parser main(bitstring p) {
  eth e = read(p);
  match e#etherTy with
  | LUCID_ETHERTY -> { do_lucid_parsing(p); }
  | 7 -> { parse_ip(p, e); }
  | 0 -> { 
    eth e2 = read(p);
           parse_ip(p, e2); } // ERROR: e and e2 share a slot
  | _ -> {
      e#etherTy = 0x9999;
      generate eth(e);
  }
}
