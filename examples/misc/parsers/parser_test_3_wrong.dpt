type eth = { int srcMac; int dstMac; int etherTy; }
type ip =  { int srcIp; int dstIp; int srcPort; int dstPort; }

event background(int x) { printf("%d", x); }
event eth(eth e) { generate background(e#srcMac); }
event etheth(eth e, eth e2) { generate background(e#srcMac); }

// LUCID_ETHERTY is builtin
const int IP_ETHERTY = 0x8000;

// ERROR: Transitively unifies args of etheth
parser main() {
  read eth e;
  match e#etherTy with
  | 0 -> {
         read eth e1;
         read eth e2;
         match e1#etherTy with
         | 1 -> { generate eth(e1); }
         | 2 -> { generate etheth(e1, e2); }
         }
  | 3 -> {
         read eth e3;
         read eth e4;
         match e3#etherTy with
         | 4 -> { generate eth(e3); }
         | 5 -> { generate etheth(e4, e3); }
         }
}
