/*
A distributed probabilistic stateful firewall implemented using a Bloom filter,
with timeouts.
*/

// Implement a Bloom filter with m = 16, k = 2
const int NUM_REGISTERS = 16;
const int HASH_SEED_1 = 22;
const int HASH_SEED_2 = 33;
const int ROTATE_PERIOD = 1000;
const int EMPTY_PERIOD = 50;

const int<<1>> TRUE = 1;
const int<<1>> FALSE = 0;

/* Information about the chain. */
/* I want this to read "extern location foo;" but we don't have that syntax yet */
const int head = 0;
const int tail = 0;
const int succ = 0;

/* We have three Bloom filters -- at any given time, one is active, one is
"warming up", and one is being zeroed out. */

// Basically a counter, but we need to be able to read and write simultaneously
// in order to to mod it by 3
global active = new Array<<2>>(1);

global filter0_1 = new Array<<1>>(NUM_REGISTERS);
global filter0_2 = new Array<<1>>(NUM_REGISTERS);
global filter1_1 = new Array<<1>>(NUM_REGISTERS);
global filter1_2 = new Array<<1>>(NUM_REGISTERS);
global filter2_1 = new Array<<1>>(NUM_REGISTERS);
global filter2_2 = new Array<<1>>(NUM_REGISTERS);

event add_to_filter(int idx1, int idx2);
event rotate_active();
event write_empty(int<<32>> idx);

// Request_x is for packets coming from inside, response_x is for packets coming from outside
// entry events
event request_packet (int client_ip, int server_ip);
event response_packet (int server_ip, int client_ip);
// exit events
event request_continue (int src_ip, int dst_ip);
event response_continue (int src_ip, int dst_ip);

handle add_to_filter(int idx1, int idx2) {
  int<<2>> curr = Array.get(active, 0);
  // Add only to active and warmup filters
  if (curr == 0) {
    Array.set(filter0_1, idx1, TRUE);
    Array.set(filter0_2, idx2, TRUE);
    Array.set(filter1_1, idx1, TRUE);
    Array.set(filter1_2, idx2, TRUE);
  } else {if (curr == 1) {
    Array.set(filter1_1, idx1, TRUE);
    Array.set(filter1_2, idx2, TRUE);
    Array.set(filter2_1, idx1, TRUE);
    Array.set(filter2_2, idx2, TRUE);
  } else {
    Array.set(filter0_1, idx1, TRUE);
    Array.set(filter0_2, idx2, TRUE);
    Array.set(filter2_1, idx1, TRUE);
    Array.set(filter2_2, idx2, TRUE);
  }}
  // Send to next in chain
  if (self != tail) {
    event this = add_to_filter(idx1, idx2);
    generate Event.sslocate(this, succ);
  }
}

// Increment by 1 and mod by 3
memop rotate (int<<2>> x, int<<2>> dummy) {
  if (x == 2) {
    return 0;
  } else {
    return x + 1;
  }
}

handle rotate_active() {
  Array.setm(active, 0, rotate, 0);
  generate Event.delay(rotate_active(), ROTATE_PERIOD);
}

handle write_empty (int<<32>> idx) {
  int<<2>> curr = Array.get(active, 0);
  if (curr == 0) {
    Array.set(filter2_1, idx, FALSE);
    Array.set(filter2_2, idx, FALSE);
  } else {if (curr == 1) {
    Array.set(filter0_1, idx, FALSE);
    Array.set(filter0_2, idx, FALSE);
  } else {
    Array.set(filter1_1, idx, FALSE);
    Array.set(filter1_2, idx, FALSE);
  }}
  int<<32>> next_index = idx+1;
  if (next_index == 16) { next_index = 0; }
  generate Event.delay(write_empty(next_index), EMPTY_PERIOD);
}

fun bool in_filter(int idx1, int idx2) {
  bool ret = false;
  int<<2>> curr = Array.get(active, 0);
  if (curr == 0) {
    ret = Array.get(filter0_1, idx1) == TRUE &&
          Array.get(filter0_2, idx2) == TRUE;
  } else {if (curr == 1) {
    ret = Array.get(filter1_1, idx1) == TRUE &&
          Array.get(filter1_2, idx2) == TRUE;
  } else {
    ret = Array.get(filter2_1, idx1) == TRUE &&
          Array.get(filter2_2, idx2) == TRUE;
  }}
  return ret;
}

handle request_packet(int src, int dst) {
  int idx1 = hash<<32>>(HASH_SEED_1, src, dst);
  int idx2 = hash<<32>>(HASH_SEED_2, src, dst);
  bool in_filter = in_filter(idx1, idx2);
  if (!in_filter) {
    generate Event.sslocate(add_to_filter(idx1, idx2), head);
  }
  generate request_continue(src, dst);
}

handle response_packet(int src, int dst) {
  int idx1 = hash<<32>>(HASH_SEED_1, src, dst);
  int idx2 = hash<<32>>(HASH_SEED_2, src, dst);
  bool in_filter = in_filter(idx1, idx2);
  if (in_filter) {
    generate request_continue(src, dst);
  }
}
