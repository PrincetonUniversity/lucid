// A Bloom filter with parametric k
// Exact copy of BloomFilter.dpt in interp_test
module BloomFilter : {
  global type t<<'key_sz, 'idx_sz, 'k>>;
  constr t<<'a, 'b, 'k>> create(int m, int['k] seeds);

  fun void add_to_filter(t<<'a, 'b, 'k>> filter, int<<'a>> key) [start <= filter; end filter];
  fun bool in_filter(t<<'a, 'b, 'k>> filter, int<<'a>> key) [start <= filter; end filter];
  fun void clear_index(t<<'a, 'b, 'k>> filter, int<<'b>> idx) [start <= filter; end filter];
}
{
  type t<<'key_sz, 'idx_sz, 'k>> = {
    Array.t<<1>>['k] arrs;
    int['k] hash_seeds;
    int<<'idx_sz>> m;
  }

  constr t<<'a, 'b, 'k>> create(int m, int['k] seeds) = {
    arrs = [Array.create(m) for i < 'k];
    hash_seeds = seeds;
    m = (int<<'b>>) m;
  };

  fun void add_to_filter(t<<'a, 'b, 'c>> filter, int<<'a>> key) {
    for (i < 'k) {
      Array.set(filter#arrs[i], hash<<'b>>(filter#hash_seeds[i], key), 1);
    }
  }

  fun bool in_filter(t<<'a, 'b, 'k>> filter, int<<'a>> key) {
    bool acc = true;
    for (i < 'k) {
      int<<1>> x = Array.get(filter#arrs[i], hash<<'b>>(filter#hash_seeds[i], key));
      acc = acc && x == 1;
    }
    return acc;
  }

  // Can be used to clean out the array, one index at a time.
  fun void clear_index(t<<'a, 'b, 'k>> filter, int<<'b>> idx) {
    for (i < 'k) {
      Array.set(filter#arrs[i], idx, 0);
    }
  }

  event clear_all(t<<'a, 'b, 'k>> filter); // Zero all entries in the filter
  event clear_helper(t<<'a, 'b, 'k>> filter, int<<'b>> idx);

  handle clear_all(t<<'a, 'b, 'k>> filter) { generate clear_helper(filter, 0); }

  handle clear_helper(t<<'a, 'b, 'k>> filter, int<<'b>> idx) {
    clear_index(filter, idx);
    if (idx < filter#m - 1) {
      generate clear_helper(filter, idx+1);
    }
  }
}

global BloomFilter.t<<32, 2, 4>> bf1 = BloomFilter.create(4, [0; 1; 2; 3]);

exit event allowed(int x);
exit event denied(int x);

extern add_to_filter(int x);
extern record_query(int x, bool b);

entry event in(bool add, int x) {
  if (add) {
    BloomFilter.add_to_filter(bf1, x);
    add_to_filter(x);
  } else {
    bool b = BloomFilter.in_filter(bf1, x);
    record_query(x, b);
    if (b) {
      generate allowed(x);
    } else {
      generate denied(x);
    }
  }
}
