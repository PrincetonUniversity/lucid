// a packet generator


// command events from controller
// start generating a flow of ct ethernet packets
event start_flow@1(int<16> port, int<32> ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl);
// ask for a report about flow stats, id is query id
event send_report@3(int<16> port, int id);
// the report back to the controller
event report@2(int<16> port, int id, int txct, int rxct, int txstart, int txend, int rxstart, int rxend){skip;}

// ethernet packet to / from the server
packet event eth(int<48> dst, int<48> src, int<16> ety, Payload.t pl);
// recirculating packet generation event
event send_pkt@11(int<16> port, int<32> ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl);

/**** program state ****/
// time is in units of 2^16 nanoseconds, or 64 microseconds.
global Array.t<32> txct = Array.create(256);
global Array.t<32> tx_start = Array.create(256);
global Array.t<32> tx_end = Array.create(256);

global Array.t<32> rxct = Array.create(256);
global Array.t<32> rx_start = Array.create(256);
global Array.t<32> rx_end = Array.create(256);
memop incr(int m, int c) {
    return m + c;
}
memop cval(int m, int c) {
    return c;
}
memop mem(int m, int c) {
    return m;
}

memop incr_16(int<16> m, int<16> c) {
    return m + c;
}

/**** functions and handlers ****/


handle start_flow(int<16> port, int<32> ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl) {
    Array.set(txct, port, 0);
    Array.set(tx_start, port, 0);
    Array.set(tx_end, port, 0);
    Array.set(rxct, port, 0);
    Array.set(rx_start, port, 0);
    Array.set(rx_end, port, 0);
    generate(send_pkt(port, ct, dst, src, ety, pl));

}

handle send_pkt(int<16> port, int<32> ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl) {
    int<16> port_cpy = hash<16>(0, port);
    int tx_ct = Array.update(txct, port, incr, 1, incr, 1);
    if (tx_ct == 1) {
        Array.set(tx_start, port, Sys.time());
    }
    Array.set(tx_end, port, Sys.time());
    // send packet to server
    generate_port((int<9>)port_cpy, eth(dst, src, ety, pl));
    // if count is not 1, generate another packet
    if (ct != 1) {
        generate(send_pkt(port, ct - 1, dst, src, ety, pl));
    }
}

handle send_report(int<16> port, int id) {
    int tx = Array.get(txct, port);
    int txs = Array.get(tx_start, port);
    int txe = Array.get(tx_end, port);
    int rx = Array.get(rxct, port);
    int rxs = Array.get(rx_start, port);
    int rxe = Array.get(rx_end, port);
    generate_port(ingress_port, report(port, id, tx, rx, txs, txe, rxs, rxe));
}

handle eth(int<48> dst, int<48> src, int<16> ety, Payload.t pl) {
    int<16> port = hash<16>(0, ingress_port);
    int rx_ct = Array.update(rxct, port, incr, 1, incr, 1);
    if (rx_ct == 1) {
        Array.set(rx_start, port, Sys.time());
    }
    Array.set(rx_end, port, Sys.time());
}



// const int<9> server_port = 148;
// // infinite flow events
// event start_flow@5(int<8> flow_id, int<32> max_pkts, int<48>dst, int<48> src, int<16> ety, Payload.t pl);
// event stop_flow@6(int<8> flow_id);
// event continue_flow@4(int<8> flow_id, int<32> max_ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl);

// global Array.t<8> flow_status = Array.create(256);

// handle continue_flow(int<8> flow_id, int<32> max_ct, int<48> dst, int<48> src, int<16> ety, Payload.t pl) {
//     Array.setm(txct, 0, incr, 1);
//     generate_port(server_port, eth(dst, src, ety, pl));
//     if (Array.get(flow_status, flow_id) == 1) {
//         if (max_ct != 0) {
//             generate(continue_flow(flow_id, max_ct - 1, dst, src, ety, pl));
//         }
//     }
// }

// handle start_flow(int<8> flow_id, int<32> max_pkts, int<48>dst, int<48> src, int<16> ety, Payload.t pl) {
//     Array.set(flow_status, flow_id, 1);
//     generate(continue_flow(flow_id, max_pkts, dst, src, ety, pl));
// }

// handle stop_flow(int<8> flow_id) {
//     Array.set(flow_status, flow_id, 0);
// }

