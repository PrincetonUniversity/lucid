// A Bloom filter with k = 2. We don't currently have a way to make this
// parametric over k.
module BloomFilter : {
  global type t<<'key_sz, 'idx_sz>>;
  constr t<<'a, 'b>> create(int<<'b>> m, int seed1, int seed2);

  fun void add_to_filter(t<<'a, 'b>> filter, int<<'a>> key) [start <= filter; end filter];
  fun bool in_filter(t<<'a, 'b>> filter, int<<'a>> key) [start <= filter; end filter];
  fun void clear_index(t<<'a, 'b>> filter, int<<'b>> idx) [start <= filter; end filter];
}
{
  type t<<'key_sz, 'idx_sz>> = {
    Array.t<<1>> arr1;
    Array.t<<1>> arr2;
    int hash_seed1;
    int hash_seed2;
    int<<'idx_sz>> m;
  }

  constr t<<'a, 'b>> create(int<<'b>> m, int seed1, int seed2) = {
    arr1 = Array.create(m);
    arr2 = Array.create(m);
    hash_seed1 = seed1;
    hash_seed2 = seed2;
    m = m;
  };

  fun void add_to_filter(t<<'a, 'b>> filter, int<<'a>> key) {
    Array.set(filter#arr1, hash<<'b>>(filter#hash_seed1, key), 1);
    Array.set(filter#arr2, hash<<'b>>(filter#hash_seed2, key), 1);
  }

  fun bool in_filter(t<<'a, 'b>> filter, int<<'a>> key) {
    int<<1>> x = Array.get(filter#arr1, hash<<'b>>(filter#hash_seed1, key));
    int<<1>> y = Array.get(filter#arr2, hash<<'b>>(filter#hash_seed2, key));
    return x == 1 && y == 1;
  }

  // Can be used to clean out the array, one index at a time.
  fun void clear_index(t<<'a, 'b>> filter, int<<'b>> idx) {
    Array.set(filter#arr1, idx, 0);
    Array.set(filter#arr2, idx, 0);
  }

  event clear_all(t<<'a, 'b>> filter); // Zero all entries in the filter
  event clear_helper(t<<'a, 'b>> filter, int<<'b>> idx); // TODO: Make this private

  handle clear_all(t<<'a, 'b>> filter) { generate clear_helper(filter, 0); }

  handle clear_helper(t<<'a, 'b>> filter, int<<'b>> idx) {
    clear_index(filter, idx);
    if (idx < filter#m - 1) {
      generate clear_helper(filter, idx+1);
    }
  }
}

global BloomFilter.t<<32, 2>> bf1 = BloomFilter.create(0x04, 0, 1);

exit event allowed(int x);
exit event denied(int x);

entry event packet_in(bool add, int x) {
  if (add) {
    BloomFilter.add_to_filter(bf1, x);
  } else {
    if (BloomFilter.in_filter(bf1, x)) {
      generate allowed(x);
    } else {
      generate denied(x);
    }
  }
}
