/* Measure */

// report cumulative size every 4 packets.
// (in real deployment, this would be much much higher)
const int pktct_interval = 4;
const int<<9>> collector_port = 0x84;
const int NULL = 0;

// histogram of packet sizes.
// [0] : pkts size (0, 128)
// [1] : pkts size (128, 512)
// [2] : pkts size (512, 1024)
// [3] : pkts size (1024, MAX)
sre<<5>> myVR2 =  DATA {global Counter.t<<32>> error_count = Counter.create(0);}
                  DETECT {(report(true))*
                          .report(true)} 
                          => {int count = Counter.add(error_count, 1);
                              generate error(count+1);};
global Array.t<<32>> hist_arr = Array.create(4);
// total packet count.
global Array.t<<32>> total_arr = Array.create(1);





// Events
entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);
event report(int idx);
exit event ip_out (int<<9>> egr_port, int src, int dst);

exit event error(int lastIdx);

// Helper memop functions
memop incr(int memval, int incrval) {
    return memval + incrval;
}
memop getf(int memval, int newval){
  return memval;
}
memop setf(int memval, int newval){
  return newval;
}

memop checkThenSet(int memval, int newval) {
  if (memval == 0) {
    return newval;
  }
  else {
    return memval;
  }
}
// Handlers
handle report(int idx){
    // get count at index and reset.
    int cur_idx = idx;
    int column_ct = Array.update(hist_arr, cur_idx, getf, 0, setf, 0);
    // send count to collector, encoded in ip packet.
    generate ip_out(collector_port, cur_idx, column_ct);
    // reset the total count
    if (cur_idx == 0) {
      Array.set(total_arr, 0, 0);
    }
}

handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos) {
  int idx = 0;
  if (len <= 128) {
    idx = 0;
  } else {
    if (len <= 512) {
      idx = 1;
    } else {
      if (len <= 1024){
        idx = 2;
      } else {
        idx = 3;
      }
    }
  }

  Array.setm(hist_arr, idx, incr, 1);
  int total_ct = Array.update(total_arr, 0, incr, 1, incr, 1);
  generate ip_out(igr_port, src, dst);
}
