event ip_pkt (int src, int dst);
event count_src (int src);

// component: basic packet forwarding
fun int get_output_port(int current_switch, int dst) {
	match (current_switch, dst) with 
		| 0, 22 -> {return 0;}
		| 1, 22 -> {return 1;}
		| 2, 22 -> {return 1;}
		| 3, 22 -> {return 99;}
		| 0, 11 -> {return 99;}
		| 1, 11 -> {return 0;}
		| 2, 11 -> {return 0;}
		| 3, 11 -> {return 0;}
		| _, _  -> {return 0;} // default case
}
handle ip_pkt(int src, int dst) {
	// ingress_port 
	int out_port = get_output_port(self, dst);
	printf ("packet entered switch %d from port %d. Forwarding out of port: %d", self, ingress_port, out_port);
	generate_port(out_port, ip_pkt(src, dst));

	generate(count_src(src));
}

// component: basic packet counting
global Array.t<32> src_cts = Array.create(16);
memop incr(int mv, int lv) {
	return mv + 1;
}
handle count_src(int src) {
	int<4> h = hash<4>(7, src);
	printf("counting packet with src=%d at switch %d", src, self);
	Array.setm(src_cts, h, incr, 0);
}
