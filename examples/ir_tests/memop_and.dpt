/* A simple program with a memop that uses a binary and. */

entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);
exit event ip_out (int<<9>> egr_port, int src, int dst);

global Array.t<<32>> test_arr = Array.create(4);

memop incr(int memval, int incrval) {

    return (memval & incrval);
}

/* 
test case: 
(15, 0) --> (write 15 to memory) --> (15, 6)
(2, 0) --> (read 15 & 2 = 2 from memory) --> (2, 2)
*/

handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos) {
  // write dest to memory. 
  int new_dst = 0;
  int<<10>> foo = hash<<10>>(101, src);
  // mem = src;
  // dst = 0;
  if (tos == 1) {
    Array.set(test_arr, 0, src);
    new_dst = 6;
  } 
  // dst = last src & current src;
  else {
    new_dst = Array.getm(test_arr, 0, incr, src);
  }
  generate ip_out(igr_port, src, new_dst);  
}