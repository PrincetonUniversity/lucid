// Starflow telemetry cache.
/* 
A P4 program passes control to *Flow by generating a "monitor_pkt" event. 
This calls the "monitor_pkt" handler in this program (around line 75)
That handler may generate two other events: 
  1. GPV records to collection servers (the events short_record and long_record)
  2. A memory release event (free_block) that gets recirculated
*/

/* 
[1/22] Refactoring notes

- ip_in.len should be replaced with ip_in.len_short, because 
lengths should now be 16-bit instead of 32-bit.

- all of the generate of short_record and long_record events should be turned into events that will get to the collector.

- BUG: long block records must be indexed with block id, not flow hash.

How many events might get generated on ip_in?
  1. ip_out (on every packet, as a port event)
  2. short_record or long_record (sometimes, to the collector. would like it to be as a port or switch event)
  3. free_block (rarest of all, always a recirculate event)
*/

/* Lucid todos: 

1. dead code elimination -- support handlers with no body.
2. implement modulo operator.

 * lucid optimizations: 

  - more sophisticated copy elimination
  int x = foo();
  int z = x; 
  we should recognize that it is safe to replace x with z. This would 
  reduce overhead where we calculate a variable and then use it as output 
  (passed to array.update or in a generate statement).
  - lower overhead safe branching.
    code like this has overhead because the compiler adds 
    code to make a copy of x's value before entering the 
    branch. 
    int x = foo();
    if (x == 0) {
      x = bar();
      x = x + 1;
    } else {
      x = baz();
      x = x + 1;
    }
    - alternately, at least have a warning
      that a copy has been introduced. The programmer 
      can optimize around it manually. 
*/
const int h1_poly = 10398247;
const int MMATCH = 0;

// Symbolic variables 
const int H_SLOTS = 1024;
const int L_SLOTS = 128;
const int SIZE_SHORT = 2;
const int LOG_SIZE_SHORT = 1;
const int MAX_IDX = 7; // TODO: replace with SIZE_LONG = 6 and compute max_idx as a const


entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len_short, int<<8>> tos);
exit event ip_out (int<<9>> egr_port, int src, int dst);


// records that the cache emits when something gets evicted. 
const int COLLECTION_SERVER = 1234;
event short_record(int src, int len, int rec0, int rec1);
event long_record(int src, int len, int rec0, int rec1, int rec2, int rec3, int rec4, int rec5, int rec6, int rec7);

// free a "long slot" by pushing it's index back onto the stack. 
event free_block(int block_id);

global Array.t<<32>> srcarr = Array.create(H_SLOTS);
global Array.t<<32>> ctarr = Array.create(H_SLOTS);
global Array.t<<32>> idxarr = Array.create(H_SLOTS);

global Array.t<<32>> stack_top = Array.create(1);
global Array.t<<32>> longblock_stack = Array.create(L_SLOTS);
global Array.t<<32>> block_map = Array.create(H_SLOTS);

global Array.t<<32>> rec0 = Array.create(H_SLOTS);
global Array.t<<32>> rec1 = Array.create(H_SLOTS);
global Array.t<<32>> rec2 = Array.create(L_SLOTS);
global Array.t<<32>> rec3 = Array.create(L_SLOTS);
global Array.t<<32>> rec4 = Array.create(L_SLOTS);
global Array.t<<32>> rec5 = Array.create(L_SLOTS);
global Array.t<<32>> rec6 = Array.create(L_SLOTS);
global Array.t<<32>> rec7 = Array.create(L_SLOTS);

memop read (int stored, int nothingval) { 
  return stored;
}
memop write (int stored, int newval) {
  return newval;
}
memop incr (int stored, int nothingval) { 
  return stored + 1;
}

memop sub (int stored, int cur) {
  return stored - cur;
}


// increment index with rollover.
memop incr_idx (int stored, int nothingval) { 
  if (stored == MAX_IDX) {
    return 0;
  }
  else {
    return stored + 1;
  }
}

// We need to get the index, and also the count. 

memop decr_sat (int stored, int nothingval) {
  if (stored == 0) {
    return 0;
  }
  else {
    return stored - 1;
  }
}




handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len_short, int<<8>> tos) {  
  int len = (int<<32>>) len_short;
  int ct  = 0; int idx = 0; // idx = (count % num_rec_slots)
  int stored_rec0 = 0; int stored_rec1 = 0; 
  int stored_rec2 = 0; int stored_rec3 = 0; 
  int stored_rec4 = 0; int stored_rec5 = 0;
  int stored_rec6 = 0; int stored_rec7 = 0;
  int blk_id = 0;
  // update the key. 
  int h1 = hash<<32>>(h1_poly, src); 
  // end stage 0

  // update the count and index (if its a hit). 
  /*
    // optimization to save a stage in early control flow. 
    // instead of reading the source, read stored_src - src, 
    // do the match check on that and transform back into stored_src 
    // as needed later. 
  */
  // new code: 
  int is_match = Array.update(srcarr, h1, sub, src, write, src);
  // end stage 1
  if (is_match == MMATCH) {
    ct = Array.update(ctarr, h1, incr, 1, incr, 1);
    idx = Array.update(idxarr, h1, incr_idx, 1, incr_idx, 1);
  }
  int stored_src = is_match + src; // restore stored_src from is_match. 
  // end stage 2

  // old code: 
  // int stored_src = Array.update(srcarr, h1, read, 0, write, src);
  // // end stage 1
  // int is_match = src - stored_src;
  // // end stage 2
  // if (is_match == MMATCH) {
  //   ct = Array.update(ctarr, h1, incr, 1, incr, 1);
  //   idx = Array.update(idxarr, h1, incr_idx, 1, incr_idx, 1);
  // }
  // end stage 3


  // take care of memory allocation ahead of time. 
  // each flow gets to try and allocate a block once
  //  -- when it reaches SIZE_SHORT packets. 
  // POSSIBLE ALTERNATIVE management strategy: 
  //  - choose a random block id. If it is not taken, take it. 
  //  - This would save 1 stage. 
  if (ct == SIZE_SHORT) {  
    int stack_idx = Array.update(stack_top, 0, read, 0, decr_sat, 1);
    // end stage 3
    // we have allocated an extended block from the stack.
    if (stack_idx != 0) {
      blk_id = Array.get(longblock_stack, stack_idx);
      // end stage 4
      Array.set(block_map, h1, blk_id);      
      // end stage 5
    }
  } else {
    // if we are not at this count, then we want to see if we have a block id.
    blk_id = Array.get(block_map, h1);
    // end stage 5
  }
  // int idx_cpy = idx; 
  // we make a copy here because otherwise, the 
  // compiler will make a copy of index and cost 
  // us an extra stage. 

  // If we didn't load a block id, adjust index 
  // so that its in mod SIZE_SHORT
  if (blk_id == 0) {
    idx = idx & LOG_SIZE_SHORT;
  }
  // If we found a block ID, but are evicting 
  // owner flow, free the block.
  else {
    if (is_match != MMATCH) {
      generate free_block(blk_id);
    }
  }
  // End stage 6
  // Now we're done with all the control logic and just have 
  // to update all the packet record cells.
  // always read from every cell. 
  // only write to the cell if: an evict has not happened AND we are at the right index value 
  // rec0 isn't starting until stage10... is that right? 
  if (is_match == MMATCH) {
    if (idx == 0) {
      stored_rec0 = Array.update(rec0, h1, read, 0, write, len);
    } else {
      stored_rec0 = Array.get(rec0, h1);
    if (idx == 1) {
      stored_rec1 = Array.update(rec1, h1, read, 0, write, len);
    } else {
      stored_rec1 = Array.get(rec1, h1);
    if (idx == 2) {
      stored_rec2 = Array.update(rec2, h1, read, 0, write, len);
    } else {
      stored_rec2 = Array.get(rec2, h1);
    if (idx == 3) {
      stored_rec3 = Array.update(rec3, h1, read, 0, write, len);
    } else {
      stored_rec3 = Array.get(rec3, h1);
    if (idx == 4) {
      stored_rec4 = Array.update(rec4, h1, read, 0, write, len);
    } else {
      stored_rec4 = Array.get(rec4, h1);
    if (idx == 5) {
      stored_rec5 = Array.update(rec5, h1, read, 0, write, len);
    } else {
      stored_rec5 = Array.get(rec5, h1);
    if (idx == 6) {
      stored_rec6 = Array.update(rec6, h1, read, 0, write, len);
    } else {
      stored_rec6 = Array.get(rec6, h1);
    if (idx == 7) {
      stored_rec7 = Array.update(rec7, h1, read, 0, write, len);
    } else {
      stored_rec7 = Array.get(rec7, h1);
      } } } } } } }
    } 
  }  
  // No match, just read for evict.
  else {
    stored_rec0 = Array.get(rec0, h1);
    stored_rec1 = Array.get(rec1, h1);
    stored_rec2 = Array.get(rec2, h1);
    stored_rec3 = Array.get(rec3, h1);
    stored_rec4 = Array.get(rec4, h1);
    stored_rec5 = Array.get(rec5, h1);
    stored_rec6 = Array.get(rec6, h1);
    stored_rec7 = Array.get(rec7, h1);
  }
  // end stages 7 and 8 (8 arrays with 4 arrays per stage)

  // finally, generate some events depending on whether there was an evict or buffer rollover. 
  // there was a collision. So we generate either a short or long record. 
  if (is_match != MMATCH) {
    if (blk_id == 0) {
      generate short_record(stored_src, ct, stored_rec0, stored_rec1);
      // generate Event.sslocate(short_record(src, ct, stored_rec0, stored_rec1), COLLECTION_SERVER);
    } else {
      generate long_record(stored_src, ct, stored_rec0, stored_rec1, stored_rec2, stored_rec3, stored_rec4, stored_rec5, stored_rec6, stored_rec7);
    }
  }
  // There was not a collision. But, we still generate a short or long record if 
  // there was a rollover. (idx == 0) 
  else {
    if (idx == 0) {
      if (blk_id == 0) {
        generate short_record(stored_src, ct, stored_rec0, stored_rec1);
        // generate Event.sslocate(short_record(src, ct, stored_rec0, stored_rec1), COLLECTION_SERVER);
      } else {
        generate long_record(stored_src, ct, stored_rec0, stored_rec1, stored_rec2, stored_rec3, stored_rec4, stored_rec5, stored_rec6, stored_rec7);
        // generate Event.sslocate(long_record(src, ct, stored_rec0, stored_rec1, stored_rec2, stored_rec3, stored_rec4, stored_rec5, stored_rec6, stored_rec7), COLLECTION_SERVER);
      }
    }
  }
  // end stage 9 -- 2 stages left free for auto-generated Lucid entry / exit blocks.
} 

handle free_block(int block_id) {
  // get a pointer to an unused slot in the free stack.
  int stack_idx = Array.update(stack_top, 0, incr, 1, incr, 1);
  // write the block id to the unused slot. 
  Array.set(longblock_stack, stack_idx, block_id);
}


handle short_record(int src, int len, int rec0, int rec1) {
  int foo_short = 1; // TODO: backend fails on empty handlers. Should have dead-code elimination.
  printf("short_record output event\n");
}
handle long_record(int src, int len, int rec0, int rec1, int rec2, int rec3, int rec4, int rec5, int rec6, int rec7){
  int foo_long = 1;
  printf("long_record output event\n");

}
