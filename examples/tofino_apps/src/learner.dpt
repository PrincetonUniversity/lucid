/* Simple unoptimized IP address learner. */
include "../libs/ip_default.dpt"


global Array.t<<32>> adst = Array.create(1024);
global Array.t<<32>> aegr = Array.create(1024);

global Array.t<<32>> asrc = Array.create(1024);
global Array.t<<32>> aigr = Array.create(1024);


// learn an address
event learn_addr(int<<32>> port, int addr) {
    int<<10>> h = hash<<10>>(3, addr);
    Array.set(adst, h, addr);
    Array.set(aegr, h, port);

    Array.set(asrc, h, addr);
    Array.set(aigr, h, port);
}

handle ip_pkt (eth_hdr eth, ip_hdr_prefix ip, int<<32>> src, int<<32>> dst) {
    int<<10>> hdst = hash<<10>>(3, dst);
    int sdst = Array.get(adst, hdst);
    int segr = Array.get(aegr, hdst);
    // mapping found --> unicast
    if ((sdst == dst)) {
        generate_port((int<<9>>)segr, ip_pkt(eth, ip, src, dst));
    }
    // mapping not found --> multicast flood
    else {
        generate_ports(flood ingress_port, ip_pkt(eth, ip, src, dst));
    }

    // Learning: if the source address is
    // not in the table (and there is room)
    // generate an event to learn the address:port
    int<<10>> hsrc = hash<<10>>(3, src);
    int ssrc = Array.get(asrc, hsrc);

    // if (ssrc == 0){
        generate(learn_addr((int<<32>>)ingress_port, src));
    // }
}
