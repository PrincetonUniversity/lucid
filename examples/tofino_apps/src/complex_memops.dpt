/* Testing complex memops. */
include "ip_default.dpt"

global Array.t<<32>> arr_1 = Array.create(1024);
global Array.t<<32>> arr_2 = Array.create(1024);

const int vmax = 10;
// rollover counter at 10, return current counter value. 
memop postcount_rollover(int memval1, int localval1, int localval2) {
  bool ismax = (memval1 == vmax);
  if (ismax) { // rollover
    cell1 = 0;
  } 
  else { // no rollover
    if (true) {
        cell1 = memval1 + 1;
    }
  }
  if (true) { // post-update return
    return cell1;
  }
}

// set memval to newval, check if it is equal to seekval
memop set_and_check(int memval, int newval, int seekval) {
  bool b1 = (memval == seekval);
  // set to newval
  if (true) {
    cell1 = newval;
  }
  // check for seekval
  if (b1) {
    cell2 = 1;
  } else {
    if (true) {cell2 = 0;}
  }
  // return
  if (true) {
    return cell2;
  }
}

handle ip_pkt (eth_hdr eth, ip_hdr_prefix ip, int<<32>> src, int<<32>> dst){
  int a1_out = Array.update_complex(arr_1, 0, postcount_rollover, src, dst, 0);
  int a2_out = Array.update_complex(arr_2, 0, set_and_check, src, dst, 0);
  generate_port(ingress_port, ip_pkt(eth, ip, a1_out, a2_out));
}