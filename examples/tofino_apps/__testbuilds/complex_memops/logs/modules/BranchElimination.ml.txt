---BranchElimination.ml log---
[eliminate_branch_nodes] adding full constraints to all tables 
----cid decls before eliminating control branches ----
// Stage not set by dptc
    table dpt_0_selectEventType {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_621_ip_in;
        }
        const default_action = dpt_621_ip_in();
        
    }
    
    action dpt_621_ip_in( ){
        //next tables: [dpt_776_tbl_0_opstmt]
        
    }
    
    bit<32> a1_out;
    
    // Stage not set by dptc
    table dpt_776_tbl_0_opstmt {
        actions = {
            dpt_776_acn_0_opstmt;
        }
        const default_action = dpt_776_acn_0_opstmt();
        
    }
    
    action dpt_776_acn_0_opstmt( ){
        dpt_776_salu_0_opstmt();
        //next tables: [dpt_777_tbl_0_opstmt]
        
    }
    
    RegisterAction<fmt_arr_1,bit<32>,bit<32>>(arr_1) dpt_776_sprog_784_salu_0_opstmt = {
        void apply(inout fmt_arr_1 remote, out bit<32> remoteRet) {
            fmt_arr_1 local = remote;
            bit<32> remoteHi = 0;
            if (local.lo == 10) { remote.lo = 0; }
            if (! (local.lo == 10)) { remote.lo = (1 + local.lo); }
            
            remoteRet = remote.lo;
            }
        };
        action dpt_776_salu_0_opstmt() {
            a1_out=dpt_776_sprog_784_salu_0_opstmt.execute((bit<32>)0);
        }
        
        bit<32> a2_out;
        
        // Stage not set by dptc
        table dpt_777_tbl_0_opstmt {
            actions = {
                dpt_777_acn_0_opstmt;
            }
            const default_action = dpt_777_acn_0_opstmt();
            
        }
        
        action dpt_777_acn_0_opstmt( ){
            dpt_777_salu_0_opstmt();
            //next tables: [dpt_779_tbl_0_opstmt]
            
        }
        
        RegisterAction<fmt_arr_2,bit<32>,bit<32>>(arr_2) dpt_777_sprog_785_salu_0_opstmt = {
            void apply(inout fmt_arr_2 remote, out bit<32> remoteRet) {
                fmt_arr_2 local = remote;
            bit<32> remoteHi = 0;
            remote.lo = md.ip_in.src;
            
            if (local.lo == md.ip_in.dst) { remoteHi = 1; }
            if (! (local.lo == md.ip_in.dst)) { remoteHi = 0; }
            remoteRet = remoteHi;
                }
            };
            action dpt_777_salu_0_opstmt() {
                a2_out=dpt_777_sprog_785_salu_0_opstmt.execute((bit<32>)0);
            }
            
            // Stage not set by dptc
            table dpt_779_tbl_0_opstmt {
                actions = {
                    dpt_779_acn_0_opstmt;
                }
                const default_action = dpt_779_acn_0_opstmt();
                
            }
            
            action dpt_779_acn_0_opstmt( ){
                dpt_779_generate_port_alu_0_opstmt();
                //next tables: []
                
            }
            
            action dpt_779_generate_port_alu_0_opstmt( ){
                md.ip_out.src = a1_out;
                md.ip_out.dst = a2_out;
                md.ip_out.eventType = 2;
                md.ip_out.eventLoc = 0;
                md.ip_out.eventDelay = 0;
                md.dptMeta.exitEventType = 2;
                ig_tm_md.ucast_egress_port = md.ip_in.igr_port;
                
            }
            
            Register<fmt_arr_1, bit<32>>(1024) arr_1;
            
            Register<fmt_arr_2, bit<32>>(1024) arr_2;
            
            
            
----end cid decls before eliminating control branches ----
[get_preconditions] adding precondition:
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

*** [condition_table] STARTING TABLE: dpt_776_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_776_tbl_0_opstmt {
        actions = {
            dpt_776_acn_0_opstmt;
        }
        const default_action = dpt_776_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[normalize_conditioned_rule] conditions BEFORE:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[refine_condition_with_pat] anding two patterns: 
[refine_condition_with_pat] pos: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] pat: 
<EMPTY PATTERN>
Result: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] original pos
md.dptMeta.eventType: 1;
[refine_condition_with_pat] refined pos
md.dptMeta.eventType: 1;
[normalize_conditioned_rule] conditions AFTER:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[to_rule_list] PROCESSING CONDITON: 
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

---------

***[condition_table] summary for dpt_776_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_776_tbl_0_opstmt {
        actions = {
            dpt_776_acn_0_opstmt;
        }
        const default_action = dpt_776_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

****conditioned table**** 
// Stage not set by dptc
    table dpt_776_tbl_0_opstmt {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_776_acn_0_opstmt;
            dpt_786_noop;
        }
        const entries = {
            1 : dpt_776_acn_0_opstmt();
            (_) : dpt_786_noop();
        }
        
    }
    

*** [condition_table] END TABLE: dpt_776_tbl_0_opstmt
[get_preconditions] adding precondition:
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

*** [condition_table] STARTING TABLE: dpt_777_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_777_tbl_0_opstmt {
        actions = {
            dpt_777_acn_0_opstmt;
        }
        const default_action = dpt_777_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[normalize_conditioned_rule] conditions BEFORE:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[refine_condition_with_pat] anding two patterns: 
[refine_condition_with_pat] pos: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] pat: 
<EMPTY PATTERN>
Result: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] original pos
md.dptMeta.eventType: 1;
[refine_condition_with_pat] refined pos
md.dptMeta.eventType: 1;
[normalize_conditioned_rule] conditions AFTER:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[to_rule_list] PROCESSING CONDITON: 
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

---------

***[condition_table] summary for dpt_777_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_777_tbl_0_opstmt {
        actions = {
            dpt_777_acn_0_opstmt;
        }
        const default_action = dpt_777_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

****conditioned table**** 
// Stage not set by dptc
    table dpt_777_tbl_0_opstmt {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_777_acn_0_opstmt;
            dpt_788_noop;
        }
        const entries = {
            1 : dpt_777_acn_0_opstmt();
            (_) : dpt_788_noop();
        }
        
    }
    

*** [condition_table] END TABLE: dpt_777_tbl_0_opstmt
[get_preconditions] adding precondition:
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

*** [condition_table] STARTING TABLE: dpt_779_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_779_tbl_0_opstmt {
        actions = {
            dpt_779_acn_0_opstmt;
        }
        const default_action = dpt_779_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[normalize_conditioned_rule] conditions BEFORE:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[refine_condition_with_pat] anding two patterns: 
[refine_condition_with_pat] pos: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] pat: 
<EMPTY PATTERN>
Result: 
md.dptMeta.eventType: 1
[refine_condition_with_pat] original pos
md.dptMeta.eventType: 1;
[refine_condition_with_pat] refined pos
md.dptMeta.eventType: 1;
[normalize_conditioned_rule] conditions AFTER:
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]
[to_rule_list] PROCESSING CONDITON: 
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

---------

***[condition_table] summary for dpt_779_tbl_0_opstmt
****original table****
// Stage not set by dptc
    table dpt_779_tbl_0_opstmt {
        actions = {
            dpt_779_acn_0_opstmt;
        }
        const default_action = dpt_779_acn_0_opstmt();
        
    }
    

****preconditions****
number of conditions: 1
[
	<no negative clauses>;
	md.dptMeta.eventType: 1;
]

****conditioned table**** 
// Stage not set by dptc
    table dpt_779_tbl_0_opstmt {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_779_acn_0_opstmt;
            dpt_790_noop;
        }
        const entries = {
            1 : dpt_779_acn_0_opstmt();
            (_) : dpt_790_noop();
        }
        
    }
    

*** [condition_table] END TABLE: dpt_779_tbl_0_opstmt
----cid decls after eliminating control branches ----
// Stage not set by dptc
    table dpt_0_selectEventType {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_621_ip_in;
        }
        const default_action = dpt_621_ip_in();
        
    }
    
    action dpt_621_ip_in( ){
        //next tables: [dpt_776_tbl_0_opstmt]
        
    }
    
    bit<32> a1_out;
    
    // Stage not set by dptc
    table dpt_776_tbl_0_opstmt {
        key = {
            md.dptMeta.eventType : ternary;
        }
        actions = {
            dpt_776_acn_0_opstmt;
            dpt_786_noop;
        }
        const entries = {
            1 : dpt_776_acn_0_opstmt();
            (_) : dpt_786_noop();
        }
        
    }
    
    action dpt_776_acn_0_opstmt( ){
        dpt_776_salu_0_opstmt();
        //next tables: [dpt_777_tbl_0_opstmt]
        
    }
    
    RegisterAction<fmt_arr_1,bit<32>,bit<32>>(arr_1) dpt_776_sprog_792_salu_0_opstmt = {
        void apply(inout fmt_arr_1 remote, out bit<32> remoteRet) {
            fmt_arr_1 local = remote;
            bit<32> remoteHi = 0;
            if (local.lo == 10) { remote.lo = 0; }
            if (! (local.lo == 10)) { remote.lo = (1 + local.lo); }
            
            remoteRet = remote.lo;
            }
        };
        action dpt_776_salu_0_opstmt() {
            a1_out=dpt_776_sprog_792_salu_0_opstmt.execute((bit<32>)0);
        }
        
        bit<32> a2_out;
        
        // Stage not set by dptc
        table dpt_777_tbl_0_opstmt {
            key = {
                md.dptMeta.eventType : ternary;
            }
            actions = {
                dpt_777_acn_0_opstmt;
                dpt_788_noop;
            }
            const entries = {
                1 : dpt_777_acn_0_opstmt();
                (_) : dpt_788_noop();
            }
            
        }
        
        action dpt_777_acn_0_opstmt( ){
            dpt_777_salu_0_opstmt();
            //next tables: [dpt_779_tbl_0_opstmt]
            
        }
        
        RegisterAction<fmt_arr_2,bit<32>,bit<32>>(arr_2) dpt_777_sprog_793_salu_0_opstmt = {
            void apply(inout fmt_arr_2 remote, out bit<32> remoteRet) {
                fmt_arr_2 local = remote;
            bit<32> remoteHi = 0;
            remote.lo = md.ip_in.src;
            
            if (local.lo == md.ip_in.dst) { remoteHi = 1; }
            if (! (local.lo == md.ip_in.dst)) { remoteHi = 0; }
            remoteRet = remoteHi;
                }
            };
            action dpt_777_salu_0_opstmt() {
                a2_out=dpt_777_sprog_793_salu_0_opstmt.execute((bit<32>)0);
            }
            
            // Stage not set by dptc
            table dpt_779_tbl_0_opstmt {
                key = {
                    md.dptMeta.eventType : ternary;
                }
                actions = {
                    dpt_779_acn_0_opstmt;
                    dpt_790_noop;
                }
                const entries = {
                    1 : dpt_779_acn_0_opstmt();
                    (_) : dpt_790_noop();
                }
                
            }
            
            action dpt_779_acn_0_opstmt( ){
                dpt_779_generate_port_alu_0_opstmt();
                //next tables: []
                
            }
            
            action dpt_779_generate_port_alu_0_opstmt( ){
                md.ip_out.src = a1_out;
                md.ip_out.dst = a2_out;
                md.ip_out.eventType = 2;
                md.ip_out.eventLoc = 0;
                md.ip_out.eventDelay = 0;
                md.dptMeta.exitEventType = 2;
                ig_tm_md.ucast_egress_port = md.ip_in.igr_port;
                
            }
            
            Register<fmt_arr_1, bit<32>>(1024) arr_1;
            
            Register<fmt_arr_2, bit<32>>(1024) arr_2;
            
            
            
            action dpt_786_noop( ){
                //next tables: []
                
            }
            
            action dpt_788_noop( ){
                //next tables: []
                
            }
            
            action dpt_790_noop( ){
                //next tables: []
                
            }
            
----end cid decls after eliminating control branches ----
[eliminate_branch_nodes] removing noop tables 
[visit_node_noop_delete] node_id = dpt_0_DptIngressParser
[visit_node_noop_delete] node_id = dpt_641_a1_out
[visit_node_noop_delete] node_id = dpt_642_a2_out
[visit_node_noop_delete] node_id = dpt_0_dptMeta_t
[visit_node_noop_delete] node_id = dpt_621_e_ip_in
[visit_node_noop_delete] node_id = dpt_624_e_ip_out
[visit_node_noop_delete] node_id = dpt_625_e_raw_out
[visit_node_noop_delete] node_id = dpt_0_egr_serialize_clone
[visit_node_noop_delete] node_id = dpt_0_ev_out_flags_t
[visit_node_noop_delete] node_id = dpt_0_event_pkt_generator
[visit_node_noop_delete] node_id = dpt_621_ip_in_t
[visit_node_noop_delete] node_id = dpt_624_ip_out_t
[visit_node_noop_delete] node_id = dpt_0_lucid_footer
[visit_node_noop_delete] node_id = dpt_0_lucid_footer_t
[visit_node_noop_delete] node_id = dpt_0_lucid_return_table
[visit_node_noop_delete] node_id = dpt_625_raw_out_t
[visit_node_noop_delete] node_id = dpt_0_selectEventType
[delete_if_noop] deleting noop table selectEventType~0!
[remove_noop_tbl] tbl_id = dpt_0_selectEventType
[remove_noop_tbl] predecessor actions = []
[visit_node_noop_delete] node_id = dpt_626_fmt_0_arr_1
[visit_node_noop_delete] node_id = dpt_627_fmt_0_arr_2
[visit_node_noop_delete] node_id = dpt_0_hdr_0_ev_out_flags
[visit_node_noop_delete] node_id = dpt_0_md_0_dptMeta
[visit_node_noop_delete] node_id = dpt_621_md_0_ip_in
[visit_node_noop_delete] node_id = dpt_624_md_0_ip_out
[visit_node_noop_delete] node_id = dpt_625_md_0_raw_out
[visit_node_noop_delete] node_id = dpt_621_ip_in
[visit_node_noop_delete] node_id = dpt_776_tbl_0_opstmt
[visit_node_noop_delete] node_id = dpt_776_acn_0_opstmt
[visit_node_noop_delete] node_id = dpt_777_tbl_0_opstmt
[visit_node_noop_delete] node_id = dpt_776_salu_0_opstmt
[visit_node_noop_delete] node_id = dpt_777_acn_0_opstmt
[visit_node_noop_delete] node_id = dpt_626_arr_1
[visit_node_noop_delete] node_id = dpt_779_tbl_0_opstmt
[visit_node_noop_delete] node_id = dpt_777_salu_0_opstmt
[visit_node_noop_delete] node_id = dpt_779_acn_0_opstmt
[visit_node_noop_delete] node_id = dpt_627_arr_2
[visit_node_noop_delete] node_id = dpt_779_generate_port_alu_0_opstmt
[eliminate_branch_nodes] rebuilding graph...
[BranchElimination.do_passes (end)] validating output...
[BranchElimination.do_passes (end)] DONE.
