---eliminateBools.ml log---
-----before boolean elimination-------
entry event ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos);

exit event ip_out(int<<32>> src,int<<32>> dst);

exit event raw_out();

global Array.t<<32>> arr_1 = Array.create(1024);


global Array.t<<32>> arr_2 = Array.create(1024);


memop postcount_rollover(int<<32>> memval1,int<<32>> localval1,int<<32>> localval2)
 {{
b1=(ismax,memval1==10);
b2=None
cell1=(ismax -> 0), (true -> memval1+1)
cell2=None, None

ret=(true -> cell1)
}}

memop set_and_check(int<<32>> memval,int<<32>> newval,int<<32>> seekval)
 {{
b1=(b1,memval==seekval);
b2=None
cell1=(true -> newval), None
cell2=(b1 -> 1), (true -> 0)

ret=(true -> cell2)
}}

handle ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos) {
int<<32>> a1_out = Array.update_complex(arr_1,0,postcount_rollover,src,dst,0);
int<<32>> a2_out = Array.update_complex(arr_2,0,set_and_check,src,dst,0);
generate_port (igr_port, ip_out(a1_out,a2_out));
}
-----end before boolean elimination-------
-----after phase 1: non-immediate elimination-------
entry event ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos);

exit event ip_out(int<<32>> src,int<<32>> dst);

exit event raw_out();

global Array.t<<32>> arr_1 = Array.create(1024);


global Array.t<<32>> arr_2 = Array.create(1024);


memop postcount_rollover(int<<32>> memval1,int<<32>> localval1,int<<32>> localval2)
 {{
b1=(ismax,memval1==10);
b2=None
cell1=(ismax -> 0), (true -> memval1+1)
cell2=None, None

ret=(true -> cell1)
}}

memop set_and_check(int<<32>> memval,int<<32>> newval,int<<32>> seekval)
 {{
b1=(b1,memval==seekval);
b2=None
cell1=(true -> newval), None
cell2=(b1 -> 1), (true -> 0)

ret=(true -> cell2)
}}

handle ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos) {
int<<32>> a1_out = Array.update_complex(arr_1,0,postcount_rollover,src,dst,0);
int<<32>> a2_out = Array.update_complex(arr_2,0,set_and_check,src,dst,0);
generate_port (igr_port, ip_out(a1_out,a2_out));
}
-----end after phase 1: non-immediate elimination-------
-----after phase 2: if expression cannonization-------
entry event ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos);

exit event ip_out(int<<32>> src,int<<32>> dst);

exit event raw_out();

global Array.t<<32>> arr_1 = Array.create(1024);


global Array.t<<32>> arr_2 = Array.create(1024);


memop postcount_rollover(int<<32>> memval1,int<<32>> localval1,int<<32>> localval2)
 {{
b1=(ismax,memval1==10);
b2=None
cell1=(ismax -> 0), (true -> memval1+1)
cell2=None, None

ret=(true -> cell1)
}}

memop set_and_check(int<<32>> memval,int<<32>> newval,int<<32>> seekval)
 {{
b1=(b1,memval==seekval);
b2=None
cell1=(true -> newval), None
cell2=(b1 -> 1), (true -> 0)

ret=(true -> cell2)
}}

handle ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos) {
int<<32>> a1_out = Array.update_complex(arr_1,0,postcount_rollover,src,dst,0);
int<<32>> a2_out = Array.update_complex(arr_2,0,set_and_check,src,dst,0);
generate_port (igr_port, ip_out(a1_out,a2_out));
}
-----end after phase 2: if expression cannonization-------
-----after phase 3: immediate elimination-------
entry event ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos);

exit event ip_out(int<<32>> src,int<<32>> dst);

exit event raw_out();

global Array.t<<32>> arr_1 = Array.create(1024);


global Array.t<<32>> arr_2 = Array.create(1024);


memop postcount_rollover(int<<32>> memval1,int<<32>> localval1,int<<32>> localval2)
 {{
b1=(ismax,memval1==10);
b2=None
cell1=(ismax -> 0), (true -> memval1+1)
cell2=None, None

ret=(true -> cell1)
}}

memop set_and_check(int<<32>> memval,int<<32>> newval,int<<32>> seekval)
 {{
b1=(b1,memval==seekval);
b2=None
cell1=(true -> newval), None
cell2=(b1 -> 1), (true -> 0)

ret=(true -> cell2)
}}

handle ip_in(int<<9>> igr_port,int<<32>> src,int<<32>> dst,int<<16>> len,int<<8>> tos) {
int<<32>> a1_out = Array.update_complex(arr_1,0,postcount_rollover,src,dst,0);
int<<32>> a2_out = Array.update_complex(arr_2,0,set_and_check,src,dst,0);
generate_port (igr_port, ip_out(a1_out,a2_out));
}
-----end after phase 3: immediate elimination-------
