/* Basic DPT primitives: 
events, handlers, and local variables */

/* In Lucid, we write programs that process events. 
An event is like an abstract packet. Each event 
has a name and data parameters. */
event count_to_10 (int src, int count);

/* Events are also the interface to P4. 
An packet event is an initial event generated by P4, 
an exit event is one that returns to P4. */
packet event pktin (int src);
exit event pktout (int outport);

/* We perform computation in Lucid with handlers. 
An event handler executes when an event with the 
corresponding name arrives. */

/* if we do int a = testf(10); what is the value of a? */
fun int testf (int x) {
	if (x == 1){ 
		return 1;
	} else {
		int y = 2;
	}
}

/* This handler generates another event, count_to_10, 
which will be serialized into a packet, recirculated, 
and then processed. */
handle pktin (int src) {
	generate count_to_10 (src, 0);
}

/* This handler counts to 10 by recursively generating 
an event of its own type. */
handle count_to_10 (int src, int count) {
	/* Inside of an event handler, local variables can be
	declared and used in typical ways. */
	int next_count = count + 1;
	if (count > 10){
		/* Print functions are printed by the interpreter, 
		   but (currently) ignored by the P4 compiler. */
		printf("ending the count loop");
		// A generate statement does not exit the handler. 
		generate pktout(count);
	}
	else {
		printf("src: %d count: %d", src, count);
		// A handler can generate an event that will invoke itself.
		generate count_to_10(src, next_count);
	}
}
