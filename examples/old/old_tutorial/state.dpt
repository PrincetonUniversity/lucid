/* Working with state in Lucid */
/* This example counts TCP and UDP packets per 8-bit flow id. */

/* consts are immutable variables that can be used anywhere. */
const int<<8>> TCP = 6;
const int<<8>> UDP = 17;
const int      FLOW_SLOTS = 256;


/* Arrays are Lucid's abstraction of P4 register arrays. 
   they are global variables that can be accessed from any 
   handler, using methods from the Array module. */
/* This declares an array with FLOW_SLOTS 32-bit integers. */
global pkt_cts = new Array<<32>>(FLOW_SLOTS);


/* A memop is a special type of function that 
  can be passed to Array methods to operate on 
  state. Similar to a RegisterAction in P4, but 
  with syntactic restrictions to guarantee 
  that it can compile to a stateful ALU.
*/
memop incr(int counter_val, int incr_by) {
  return counter_val + incr_by;
}


packet event pktin (int<<8>> flow_id, int<<32>> sz, int<<1>> syn_flag, int<<1>> fin_flag);
exit event pktct_report (int<<8>> flow_id, int pktct);


handle pktin (int<<8>> flow_id, int<<32>> sz, int<<1>> syn_flag, int<<1>> fin_flag) {
  int pktct = 0;
  if (syn_flag == 1) {
    pktct = 1;
    // C equivalent: pkt_cts[flow_id] = 1;
    Array.set(pkt_cts, flow_id, 1);
  } else {
    if (fin_flag == 1) {
      // C equivalent: pktct = pkt_cts[flow_id];
      pktct = Array.get(pkt_cts, flow_id);
    } else {
      // Array.update reads and writes a value from an array, 
      // applying a function to both operations.
      // C equivalent: 
      // pktct            = incr(pkt_cts[flow_id], 1);
      // pkt_cts[flow_id] = incr(pkt_cts[flow_id], 1);
      pktct = Array.update(pkt_cts, flow_id, 
        incr, 1, 
        incr, 1);
    }
  }
  if (fin_flag == 1) {
    printf("flow %d finished with %d packets", flow_id, pktct);
    generate pktct_report (flow_id, pktct);      
  }
}
