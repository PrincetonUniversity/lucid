/* Simple FSM */

const int NULL = 0;
const int TRUE = 1; 
const int FALSE = 0;
const int HASH_SEED = 101;

const int STATE_NORMAL = 1;
const int STATE_EXCESS = 2;

const int INTERVAL_PKTCT   = 5;
const int INTERVAL_IAT_MIN = 5000;
const int COOLDOWN = 100000;


/* 

DFA: 

State NORMAL:
	if the average IAT for the current window is less than a threshold, 
	transition to EXCESS.

State EXCESS:
	drop packets. 
	if COOLDOWN time has elapsed since since last non-dropped
	drop packets for COOLDOWN, then return to state NORMAL.
*/


global flow_keys   		= new Array<<32>>(1024);
global flow_states 		= new Array<<32>>(1024);
// 
global last_tses     	= new Array<<32>>(1024);
global interval_pktct   = new Array<<32>>(1024);
global interval_iat    	= new Array<<32>>(1024);

packet event pkt_in(int flow_key);
exit event pkt_out(int flow_key);
event change_state(int flow_key, int new_state);

/**** operations on the flow_keys array. ****/
memop insert_if_null(int stored, int target) {
	if (stored == NULL) {
		return target;
	} else {
		return stored;
	}
}
memop contains(int stored, int target) {
	if (stored == target) {
		return NULL; // NULL means that "we found target"
	} else {
		return stored; // NULL means "we did not find the target but it is being inserted."
	}
}
fun int find_or_insert(int h, int key){
	int ret_val = FALSE;
	int result = Array.update(flow_keys, h, 
		contains, key,  	 // result = contains(flow_keys[h], key);
		insert_if_null, key);// flow_keys[h] = insert_if_null(flow_keys[h], key);
	printf ("result: %d", result);
	if (result == NULL) {
		ret_val = TRUE;
	}
	return ret_val;
}

memop write(int curval, int newval) {
	return newval;
}
memop read(int curval, int newval) {
	return curval;
}
memop incr(int curval, int addedval) {
	return curval + addedval;
}
memop cond_incr(int curval, int addedval) {
	if ((curval + addedval) == INTERVAL_PKTCT) {
		return 1;
	}
	else {
		return curval + addedval;
	}
}
memop check_iat_thresh(int savediat, int newiat) {
	if ((savediat + newiat) < INTERVAL_IAT_MIN) {
		return TRUE;
	} else {
		return FALSE;
	}
}

/***** processing functions for individual DFA states *****/
// if the average inter-arrival time, over fixed windows of INTERVAL_PKTCT
// packets, is less than a threshold, transition to state EXCESS.
fun void process_state_normal(int flow_key, int h) {
	printf("handling packet for flow in state NORMAL");
	int ts = Sys.time();
	int last_ts = Array.update(last_tses, h, read, 0, write, ts);
	int iat = ts - last_ts;	
	int last_pktct = Array.update(interval_pktct, h, read, 0, incr, 1);
	// End of an interval. Check for threshold and reset.
	if ((last_pktct + 1) == INTERVAL_PKTCT) {
		int under_thresh = Array.update(interval_iat, h, check_iat_thresh, iat, write, iat);
		if (under_thresh == TRUE) {
			generate change_state(flow_key, STATE_EXCESS);
		}
	}
	// Not end of interval. Just add to iat. 
	else {
		Array.setm(interval_iat, h, incr, iat);
		generate pkt_out(flow_key);
	}
}

fun void process_state_excess(int flow_key, int h){ 
	printf("handling packet for flow in state EXCESS");
	int ts = Sys.time();
	int last_ts = Array.update(last_tses, h, read, 0, write, ts);
	int iat = ts - last_ts;	
	if (iat > COOLDOWN) {
		generate change_state(flow_key, STATE_NORMAL);
	}
}

handle pkt_in(int flow_key) { 
	int h = (int<<32>>)hash<<10>>(HASH_SEED, flow_key);	
	printf ("h: %d", h);
	int flow_is_tracked = find_or_insert(h, flow_key);
	if (flow_is_tracked == FALSE) {
		printf ("error: collision for flow %d. Packet dropped.", flow_key);
	} 
	else {
		int current_state = Array.get(flow_states, h);
		match current_state with 
			| 0 -> { process_state_normal(flow_key, h); } // Just added.
			| 1 -> { process_state_normal(flow_key, h); } // In Normal.
			| 2 -> { process_state_excess(flow_key, h); } // In Excess.
			| _            -> { printf ("unexpected DFA state."); }
	}
}

handle change_state(int flow_key, int new_state) {
	// TODO
	int x = 1;
}
