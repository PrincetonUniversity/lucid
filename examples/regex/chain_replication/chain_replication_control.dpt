include "Memops.dpt"
/*
Implementing the SRO algorithm from section 6.1 of this paper:
https://www.microsoft.com/en-us/research/uploads/prod/2020/10/swishmem-hotnets20.pdf

As in that section, we assume reliable delivery and no router failures.
*/


// This file isn't changed from the sigcomm version except minor syntax updates

const int NUM_REGISTERS = 10;
const int TRUE = 1;
const int FALSE = 0;

/* Information about the chain. */
/* I want this to read "extern location foo;" but we don't have that syntax yet */
const int<<9>> head = 0;
const int<<9>> tail = 2;
const int<<9>> succ = 1;
//====== Added RegEx ======
// check #1: seq monotinic
sre<<4096>> re_check1 = 
IDX = {
    | write -> {(int<<32>>) hash<<12>>(1, idx)}
}
DETECT{
    (
      write(@int saved_seq=seq).write(seq<saved_seq)
    )
} => {printf ("Error");};

/* Global data: the registers which we're replicating, plus metadata about each of them */
global Array.t<<32>> pending = Array.create(NUM_REGISTERS);
global Array.t<<32>> sequence_nums = Array.create(NUM_REGISTERS);
global Array.t<<32>> registers = Array.create(NUM_REGISTERS);

event write(int idx, int seq, int data);
event ack(int idx);

event process(int src, int dst, int idx);

entry event pktin(int src, int dst);
exit event continue(int src, int dst);



//// check #2: two write to same index, before ack
// sre<<4096>> re_check2 = 
// IDX = {
//     | write -> {(int<<32>>) hash<<12>>(1, idx)}
//     | ack   -> {(int<<32>>) hash<<12>>(1, idx)}
// }
// DETECT{
//     (
//       write().write().ack()
//     )
// } => {printf ("Error");};


// // check #3: normal pattern seen at tail switch, write-process-ack
// sre<<4096>> re_check3 = 
// IDX = {
//     | write -> {(int<<32>>) hash<<12>>(1, idx)}
//     | ack   -> {(int<<32>>) hash<<12>>(1, idx)}
//     | process -> {(int<<32>>) hash<<12>>(1, idx)}
// }
// DETECT{
//     (
//       write().process().ack()
//     )
// } => {printf ("Error");};
// //====== end regex ======



memop tru (int dummy, int dummy2) {
  return TRUE;
}

memop check_and_incr (int curr, int next) {
  if (next == (curr + 1)) {
    return next;
  } else {
    return curr;
  }
}

handle write(int idx, int seq, int data) {
  // The event we just got
  // event this = write(idx, seq, data);
  // Same event but delayed
  // event delayed = Event.delay(write(idx, seq, data), 10);

  // I'm assuming Array.update does getters then setters
  int update_res = Array.update(pending, idx, fst, 0, tru, 0);
  if (update_res == TRUE) {
    // If another write is happening, wait for that one to finish
    generate write(idx, seq, data);

  } else {
    bool continue = true;
    /* The first router sets the sequence number, all other routers check it */
    if ((int<<9>>)self == head) {
      seq = Array.update(sequence_nums, idx, incr, 1, incr, 1);
    } else {
      int seq2 = Array.update(sequence_nums, idx, check_and_incr, seq, check_and_incr, seq);
      if (seq2 != seq) { continue = false; }
    }
    if (continue==false) {
      generate write(idx, seq, data);
    } else {
      Array.set(registers, idx, data);
      // Either propagate to next in chain, or tell head we're done
      if ((int<<9>>)self != tail) {
        generate_port (succ, write(idx, seq, data));
      } else {
        generate_port (head, ack(idx));
      }
    }
  }
}

// Set pending bit to false across the whole chain
handle ack(int idx) {
  Array.set(pending, idx, FALSE);
  if ((int<<9>>)self != tail) {
    generate_port (succ, ack(idx));
  }
}

fun bool need_to_write(int src, int dst) {
  // Application-specific logic
  return false;
}

/* Whatever application logic is involved in processing packets. E.g. checking
   if a flow is in the firewall, sending to the right server, etc */
fun void process_fun(int src, int dst, int idx) {
  // This will probably involve reading from the registers
  int foo = Array.get(registers, idx);
  if (foo == 0) { // Or whatever
    generate continue(src, dst);
  }
}

// Should only ever be generated at the tail
handle process(int src, int dst, int idx) {
  process_fun(src, dst, idx);
}

handle pktin(int src, int dst) {
  // See if we need to write (e.g. new flow in a stateful firewall)
  bool ntw = need_to_write(src, dst); // Can't manually inline this or function inlining fails
  if (ntw) {
    // event writer = write(0,0,0); // Specific values are application-specific
    generate_port (head, write(0,0,0));
  }

  // Actually do the processing
  int idx = hash<<32>>(0, src, dst); // Or whatever
  int r = Array.get(pending, idx);
  if (r == TRUE) {
    // If we're in the middle of a write, send it to the tail, since that has
    // the last fully consistent data
    generate_port (tail, process(src, dst, idx));
  } else {
    process_fun(src, dst, idx);
  }
}
