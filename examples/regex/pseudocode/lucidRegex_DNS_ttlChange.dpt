entry event DNS_packet_fwd(int sip, int cip, int smac, int cmac, int ttl);
exit event DNS_packet_out (int sip, int cip, int smac, int cmac, int ttl);
exit event ttl_changes_found(int idx, int<<8>> count);

memop inc(int<<8>> src, int<<8>> unused) {
    return src + 1;
}

sre<<8>> myre = 
DATA {
global Array.t<<8>> cnt = Array.create(8);
}
IDX = {
    | DNS_packet_fwd -> {(int<<32>>)hash<<3>>(13, sip, cip, smac, cmac)}
}
DETECT {
    DNS_packet_fwd(@int<<32>> fst_ttl = ttl)
    .(DNS_packet_fwd(fst_ttl != ttl))} => 
    {int<<8>> newcount = Array.setm(cnt, myreidx, inc, 0);
    if (newcount > 3){
        generate ttl_changes_found(0, 0);
    }
};

handle DNS_packet_fwd(int sip, int cip, int smac, int cmac, int ttl) {
    generate DNS_packet_out (sip, cip, smac, cmac, ttl);
}