// Simple dpt program for testing match statements

global Array.t<32> counts = Array.create(5);
global Array.t<32> counts2 = Array.create(5);

packet event packetin(int<8> idx);

memop incr(int x, int y) {
  return x + y;
}

fun void increment1(int idx) {
  printf("Incrementing index %d", idx);
  Array.setm(counts, idx, incr, 1);
}

fun void increment2(int idx) {
  printf("Incrementing index %d", idx);
  Array.setm(counts2, idx, incr, 1);
}

const int<3> five = 5;

/*
Write the same match statement two ways; the two arrays should always be the same
  If 0, update index 0.
  If 1, update index 1.
  If even, update index 2
  If at least 4 and odd, update index 3
  Otherwise (i.e. if 3), update index 4
*/
handle packetin(int<8> idx) {
  match ((int<3>)idx) with
  | 0 -> { increment1(0); }
  | 1 -> { increment1(1); }
  | 2 -> { increment1(2); }
  | 3 -> { increment1(4); }
  | 4 -> { increment1(2); }
  | five -> { increment1(3); }
  | 6 -> { increment1(2); }
  | 7 -> { increment1(3); }
  | 0x8 -> { increment1(0x2); } // Testing hex syntax

  printf("Pattern update (should be the same as before)");

  match ((int<3>)idx) with
  | 0b000 -> { increment2(0); }
  | 1 -> { increment2(1); }
  | 0b**0 -> { increment2(2); }
  | 0b1*1 -> { increment2(3); }
  | _ -> { increment2(4); }
}
