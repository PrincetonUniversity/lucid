// example program that uses control from the 
// interpreter to read and modify arrays and tables.

global Array.t<32> myarr = Array.create(8);

type res_t = {
  int val;
  bool is_hit;
}

action res_t hit_acn(int x)(int a) {
  return {val = x; is_hit = true};
}

action res_t miss_acn(int x)(int a) {
  return {val = x; is_hit = false};
}
// extend parsing to not need parens around single element tuples
table_type ftbl_t = {
  key_size: (32)
  arg_types: (int)
  ret_type: res_t
}
global ftbl_t ftbl = table_create<ftbl_t>((hit_acn, miss_acn), 1024, miss_acn(0));


event pktin(int src, int dst) {
  Array.set(myarr, 0, dst);
  res_t tbl_result = table_match(ftbl, (dst), (1234));
  printf ("table result: %d", tbl_result#val);
}