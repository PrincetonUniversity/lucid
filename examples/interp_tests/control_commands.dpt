// example program that uses control from the 
// interpreter to read and modify arrays and tables.

global Array.t<32> myarr = Array.create(8);

type res_t = {
  int val;
  bool is_hit;
}

// action res_t hit_acn(int x)(int a) {
//   return {val = x; is_hit = true};
// }

action_constr hit_acn(int x) = {
  return action res_t anon(int a) {
    return {val = x; is_hit = true};
  };
};

// action res_t miss_acn(int x)(int a) {
//   return {val = x; is_hit = false};
// }

action_constr miss_acn(int x) = {
  return action res_t anon(int a) {
    return {val = x; is_hit = false};
  };
};

// extend parsing to not need parens around single element tuples
global Table.t<<int, int, int, res_t>> ftbl = Table.create(1024, [hit_acn; miss_acn], miss_acn, 0);


event pktin(int src, int dst) {
  Array.set(myarr, 0, dst);
  res_t tbl_result = Table.lookup(ftbl, dst, 1234);
  printf ("table result: %d", tbl_result#val);
}
