// test tables in a module

// cache table: 
// a register array acts as a write cache in front of a table. 
// The cache allows synchronous, line-rate installations to the table, 
// as long as it can find free space. 

// return type of CacheTable
type res_t = {
  int val;
  bool found;
}

module WriteCacheTable : {

  global type ct<'i>;

  constr ct<'i> create(int cache_sz, int tbl_eles, int<'i> poly);

  // get a value from a cache table
  fun res_t get(ct<'i> cachetbl, int k)[start <= cachetbl; end cachetbl];

  // set a value in a cache table
  fun void set(ct<'i> cachetbl, int k, int v)[start <= cachetbl; end cachetbl];
}
{
  // types for data stored by the table
  table_type cttbl_t = {
    key_size: (32)
    arg_types: ()
    ret_type: res_t
  }
  // table actions
  action res_t hit_acn(int x)() {
    return {val = x; found = true};
  }
  action res_t miss_acn()() {
    return {val = 0; found = false};
  }

  // main module type
  type ct<'i> = {
    Array.t<32> ct_keys;
    Array.t<32> ct_vals;
    cttbl_t ct_tbl;
    int<'i> p;
  }

  // Create a cache table with cache_sz cache 
  // elements and tbl_sz table elements
  constr ct<'i> create(int cache_sz, int tbl_eles, int<'i> poly) = {
    ct_keys = Array.create(cache_sz);
    ct_vals = Array.create(cache_sz);
    ct_tbl  = table_create<cttbl_t>((hit_acn, miss_acn), tbl_eles, miss_acn());
    p = poly;
  };

  fun res_t get(ct<'i> cachetbl, int k) {
    int<'i> idx = hash<'i>(1, k);
    int stored_key = Array.get(cachetbl#ct_keys, idx);
    if (stored_key == k) { // cache hit
      int stored_val = Array.get(cachetbl#ct_vals, idx);
      return {val = stored_val; found = true;};
    } else { // cache miss
      return table_match(cachetbl#ct_tbl, (k), ());
    }
  }

  memop set_if_empty(int memval, int newval) {
    if (memval == 0) { return newval; }
    else { return memval; }
  }

  fun void set(ct<'i> cachetbl, int k, int v){
    int<'i> idx = hash<'i>(cachetbl#p, k);
    printf ("hash size arg: %d", (size_to_int('i)));
    printf ("[set] index: %d", idx);
    int cache_key = Array.update(cachetbl#ct_keys, idx, set_if_empty, k, set_if_empty, k);
    if (cache_key == k) {
      printf("installing entry for %d into CACHE at index %d", k, idx);
      Array.set(cachetbl#ct_vals, idx, v);
    } else { // cache slot is used. Install to table.
      printf("installing entry for %d into TABLE", k);
      table_install(cachetbl#ct_tbl, {(k) -> hit_acn(v)});
    }
  }
}

// create a cached table with a 256 element cache (index is 8 wide)
// and a backing table with 1024 elements
global WriteCacheTable.ct<8> global_cached_table = WriteCacheTable.create(256, 1024, 1);

event do_set(int k, int v) {
  WriteCacheTable.set(global_cached_table, k, v);
}
event do_get(int k){
  res_t retval = WriteCacheTable.get(global_cached_table, k);
  if(retval#found){
    printf ("key: %d result: %d", k, retval#val);
  } else {
    printf ("key: %d result: NOT FOUND", k);    
  }
}