// tables are like match statements that you can 
// update dynamically at runtime from the control plane, 
// by adding new rules. A big difference between tables and 
// match statements is that, while match statements can 
// execute arbitrary code in their branches, tables 
// can only execute "actions", bound to the table at compile time. 

// this file tests all the basic table components: 
// actions, table_type, multi-field table return, 
// table_create, table_match, table_install

type res_t = {
  int val;
  bool is_hit;
}
// Actions are functions that take two tuples of arguments. 
// The first tuple is populated when the action is installed
// into a table. The second tuple is populated when the action
// is called by table_match.
// All actions used in a table must agree on 
// both argument types and return type.
action res_t hit_acn(int x)(int a) {
  return {val = x; is_hit = true};
}
action res_t miss_acn(int b)(int a) {
  return {val = a; is_hit = false};
}


// table_create creates a table of the given type, binds action constructors to it, and assigns a default action. 
global Table.t<<int, int, int, res_t>> ftbl = Table.create(1024, [hit_acn; miss_acn], miss_acn, 1);

event do_match(int<32> s) {
  int a = 1000;
  // table_match takes a table (ftbl), a tuple of keys (s), and a tuple of arguments (a) to pass to the matching 
  // action. The return value is the return of the action.
  // res_t tbl_out = table_match(ftbl, (s), (a)); 
  res_t tbl_out = Table.lookup(ftbl, s, a); 

  printf("return of table match: %d", tbl_out#val);
  if (tbl_out#is_hit == true) {
    printf ("table HIT.");
  }
  else {
    printf ("table MISS. Installing hit_acn(3) for current key. ");    
    // table_install is only available in the interpreter, it takes a table and a rule to install 
    // into the table. The command below says, "install a rule into ftbl that executes hit_acn(3)
    // whenever the key passed to table_match is equal to the current value of s".
    Table.install<unordered>(ftbl, s, hit_acn, 3);
  }
}
/*


*/



event do_install(int<32> v, int<32> m) {
  printf("installing entry: (%d &&& %d)", v, m);
  Table.install<unordered>(ftbl, v, hit_acn, 2);
  Table.install_ternary<unordered>(ftbl, v, m, hit_acn, 3);
 }
