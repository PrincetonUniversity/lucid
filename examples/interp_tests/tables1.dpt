// tables are like match statements that you can 
// update dynamically at runtime from the control plane, 
// by adding new rules. A big difference between tables and 
// match statements is that, while match statements can 
// execute arbitrary code in their branches, tables 
// can only execute "actions", bound to the table at compile time. 

// this file tests all the basic table components: 
// actions, table_type, multi-field table return, 
// table_create, table_match, table_install

type res_t = {
  int val;
  bool is_hit;
}
// Actions are functions executed by tables. 
// They have two sets of parameters. 
// The first set of parameters 
// is filled at _install time_, that is, when an entry is 
// added to a table that executes the action. 
// The second set of parameters is filled at _match time_, when 
// the table is matched. 
// All the actions in a single table must have the same types for their 
// match time parameters and also their return parameter.
action res_t hit_acn(int x)(int a) {
  return {val = x; is_hit = true};
}

action res_t miss_acn(bool b)(int a) {
  return {val = a; is_hit = b};
}

// A table type defines the type of value that the table matches on, 
// the type of its actions' runtime parameters, and the type of 
// its actions' return.
table_type ftbl_t = {
  key_size: (32) // a table of type ftbl_t will match on a single 32-bit expression. If we wanted to match on a pair of 32-bit expressions, we'd write (32, 32)
  arg_types: (int) // all the actions bound to a table of type ftbl_t must take a single integer as their _match time_ argument.
  ret_type: res_t // all the actions bound to a table of type ftbl_t must return a single res_t.
}
// table_create creates a table of the given type, binds actions to it, and assigns a default action. 
// table_create<"table type">("actions bound to table", "table size", "default action");
global ftbl_t ftbl = table_create<ftbl_t>((hit_acn, miss_acn), 1024, miss_acn(false));

event do_match(int<<32>> s) {
  int a = 1000;
  // table_match takes a table (ftbl), a tuple of keys (s), and a tuple of arguments (a) to pass to the matching 
  // action. The return value is the return of the action.
  res_t tbl_out = table_match(ftbl, (s), (a)); 

  printf("return of table match: %d", tbl_out#val);
  if (tbl_out#is_hit) {
    printf ("table HIT.");
  }
  else {
    printf ("table MISS. Installing hit_acn(3) for current key. ");    
    // table_install is only available in the interpreter, it takes a table and a rule to install 
    // into the table. The command below says, "install a rule into ftbl that executes hit_acn(3)
    // whenever the key passed to table_match is equal to the current value of s".
    table_install(ftbl, 
      {(s) -> hit_acn(3)}
      );    
  }
}
/*


*/



event do_install(int<<32>> v, int<<32>> m) {
  printf("installing entry: (%d &&& %d)", v, m);
  table_multi_install(ftbl, 
    {(v) -> hit_acn(2); 
      (v &&& m) -> hit_acn(3)}
      );
 }
