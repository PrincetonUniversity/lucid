include "Memops.dpt"
// A fully parametric count-min sketch. Here, 'k is the number of arrays,
// and m (the argument to the constructor) is the length of each array.
module CountMinSketch : {
  global type t<'val_sz, 'idx_sz, 'k>;
  constr t<'a, 'b, 'k> create(int m, int['k] seeds);

  fun void add(t<'a, 'b, 'k> cms, 'any_ty any) [start <= cms; end cms];
  fun int<'a> query(t<'a, 'b, 'k> cms, 'any_ty any) [start <= cms; end cms];
  fun void clear_index(t<'a, 'b, 'k> cms, int<'b> idx) [start <= cms; end cms];
}
{
  type t<'val_sz, 'idx_sz, 'k> = {
    Array.t<'val_sz>['k] arrs;
    int['k] hash_seeds;
    int<'idx_sz> m;
  }

  constr t<'a, 'b, 'k> create(int m, int['k] seeds) = {
    arrs = [Array.create(m) for i < 'k];
    hash_seeds = seeds;
    m = (int <'b>) m;
  };

  // Add the entry to the CM sketch
  fun void add(t<'a, 'b, 'c> cms, auto any) {
    for (i < 'k) {
      // Increment the appropriate index of each array by 1
      Array.setm(cms#arrs[i], hash<'b>(cms#hash_seeds[i], any), incr, 1);
    }
  }

  // Query the CMS to get the count for a particular any
  fun int<'a> query(t<'a, 'b, 'k> cms, auto any) {
    int<'a> best = 0;
    for (i < 'k) {
      if (size_to_int(i) == 0) {
        // On the first iteration just grab the first any
        best = Array.get(cms#arrs[i], hash<'b>(cms#hash_seeds[i], any));
      } else {
        // On each subsequent iteration, take the min of the any and the current best
        best = Array.getm(cms#arrs[i], hash<'b>(cms#hash_seeds[i], any), min, best);
      }
    }
    return best;
  }

  // Can be used to clean out the array, one index at a time.
  fun void clear_index(t<'a, 'b, 'k> cms, int<'b> idx) {
    for (i < 'k) {
      Array.set(cms#arrs[i], idx, 0);
    }
  }

  event clear_all(t<'a, 'b, 'k> cms); // Zero all entries in the cms
  event clear_helper(t<'a, 'b, 'k> cms, int<'b> idx);

  handle clear_all(t<'a, 'b, 'k> cms) { generate clear_helper(cms, 0); }

  handle clear_helper(t<'a, 'b, 'k> cms, int<'b> idx) {
    clear_index(cms, idx);
    if (idx < cms#m - 1) {
      generate clear_helper(cms, idx+1);
    }
  }
}
