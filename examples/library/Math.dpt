/* Some simple 32-bit integer math functions */

// int(floor(log2(x)))
fun int log2(int x) {
    match x with 
        | 0b1******************************* -> {return 31;}
        | 0b01****************************** -> {return 30;}
        | 0b001***************************** -> {return 29;}
        | 0b0001**************************** -> {return 28;}
        | 0b00001*************************** -> {return 27;}
        | 0b000001************************** -> {return 26;}
        | 0b0000001************************* -> {return 25;}
        | 0b00000001************************ -> {return 24;}
        | 0b000000001*********************** -> {return 23;}
        | 0b0000000001********************** -> {return 22;}
        | 0b00000000001********************* -> {return 21;}
        | 0b000000000001******************** -> {return 20;}
        | 0b0000000000001******************* -> {return 19;}
        | 0b00000000000001****************** -> {return 18;}
        | 0b000000000000001***************** -> {return 17;}
        | 0b0000000000000001**************** -> {return 16;}
        | 0b00000000000000001*************** -> {return 15;}
        | 0b000000000000000001************** -> {return 14;}
        | 0b0000000000000000001************* -> {return 13;}
        | 0b00000000000000000001************ -> {return 12;}
        | 0b000000000000000000001*********** -> {return 11;}
        | 0b0000000000000000000001********** -> {return 10;}
        | 0b00000000000000000000001********* -> {return 9;}
        | 0b000000000000000000000001******** -> {return 8;}
        | 0b0000000000000000000000001******* -> {return 7;}
        | 0b00000000000000000000000001****** -> {return 6;}
        | 0b000000000000000000000000001***** -> {return 5;}
        | 0b0000000000000000000000000001**** -> {return 4;}
        | 0b00000000000000000000000000001*** -> {return 3;}
        | 0b000000000000000000000000000001** -> {return 2;}
        | 0b0000000000000000000000000000001* -> {return 1;}
        | _ -> {return 0;}
}

// saturating 2^x, i.e. min(2^x, (2^32-1))
fun int pow2(int x) {
    match x with 
        | 0 -> {return 1;}
        | 1 -> {return 2;}
        | 2 -> {return 4;}
        | 3 -> {return 8;}
        | 4 -> {return 16;}
        | 5 -> {return 32;}
        | 6 -> {return 64;}
        | 7 -> {return 128;}
        | 8 -> {return 256;}
        | 9 -> {return 512;}
        | 10 -> {return 1024;}
        | 11 -> {return 2048;}
        | 12 -> {return 4096;}
        | 13 -> {return 8192;}
        | 14 -> {return 16384;}
        | 15 -> {return 32768;}
        | 16 -> {return 65536;}
        | 17 -> {return 131072;}
        | 18 -> {return 262144;}
        | 19 -> {return 524288;}
        | 20 -> {return 1048576;}
        | 21 -> {return 2097152;}
        | 22 -> {return 4194304;}
        | 23 -> {return 8388608;}
        | 24 -> {return 16777216;}
        | 25 -> {return 33554432;}
        | 26 -> {return 67108864;}
        | 27 -> {return 134217728;}
        | 28 -> {return 268435456;}
        | 29 -> {return 536870912;}
        | 30 -> {return 1073741824;}
        | 31 -> {return 2147483648;}
        // saturating!
        | _  -> {return 4294967295;}
}

// saturating integer multiplication using logs, 
// i.e.: min(2^(log(a) + log(b)), (2^32-1))
fun int int_multiply(int a, int b) {
    return pow2(log2(a) + log2(b));
}