type eth_hdr = {
    int<<48>> dmac; 
    int<<48>> smac; 
    int<<16>> etype;
}
type ip_hdr_prefix = {
    int<<8>> v_ihl; 
    int<<8>> tos;
    int<<16>> len;
    int<<16>> id;
    int<<16>> flags_frag;
    int<<8>> ttl;
    int<<8>> proto;
    int<<16>> csum;
}
type udp_hdr = {
	int<<16>> sport;
	int<<16>> dport;
	int<<16>> ulen;
	int<<16>> csum;
}

event eth_ip_udp_payload(eth_hdr eth, ip_hdr_prefix ip, int<<32>> src, int<<32>> dst, udp_hdr udp, int<<32>> payload ){int unused=0;}

event send_report(int<<32>> src, int<<32>> dst, int<<32>> payload){
	int<<16>> ip_len=20+8+4; //ip+udp+payload
	int<<16>> udp_len=8+4; //udp+payload
	int<<8>> ipproto_udp=17;

	eth_hdr eth_h={dmac=0xffffffffffff; smac=0; etype=0x0800};
	ip_hdr_prefix ip_h={
		v_ihl=0x45; 
		tos=0x00;
		len=ip_len;
		id=0;
		flags_frag=0;
		ttl=64;
		proto=ipproto_udp;
		csum=0;
    };
    udp_hdr udp_h={
    	sport=5555;
    	dport=5555;
    	ulen=udp_len;
    	csum=0;
    };

	generate_port( (int<<9>>) 0, eth_ip_udp_payload(eth_h,ip_h,src,dst,udp_h, payload));
}

alphabet packet_sizes = S1, S2, S3;
re<<16>> RE_fingerprint_AllSmall over packet_sizes = S1.S1.S1.S1;
re<<16>> RE_fingerprint_AllBig over packet_sizes = S3.S3.S3.S3;

entry event ip_pkt (int<<16>> plen, int<<32>> src, int<<32>> dst);
handle ip_pkt (int<<16>> plen, int<<32>> src, int<<32>> dst){
	int<<32>> idx=(int<<32>>) hash<<4>>(10071,src,dst);

	//int<<16>> plen = ip#len;

	event PktSize=S3();
	if(plen<512){PktSize=S2();}
	if(plen<128){PktSize=S1();}
  
	if(transition(RE_fingerprint_AllSmall, idx, PktSize)){
		
		generate send_report(src,dst,65535);
	}
	if(transition(RE_fingerprint_AllBig, idx, PktSize)){
		generate send_report(src,dst,127);
	}

	generate_port(ingress_port, ip_pkt(plen, src, dst));
}