type eth_hdr = {int<<48>> dmac; int<<48>> smac; int<<16>> etype}

type ip_hdr_prefix = {int<<8>> v_ihl; int<<8>> tos; int<<16>> len; int<<16>> id; int<<16>> flags_frag; int<<8>> ttl; int<<8>> proto; int<<16>> csum}

entry event ip_pkt(eth_hdr eth,ip_hdr_prefix ip,int<<32>> src,int<<32>> dst) ;

const TOS_TRUSTED int<<8>> = 1;

const out_port int<<9>> = 100;

memop re12351sdaCheckThenSet(int<<'memvalsize~0>> memval,int<<'newvalsize~0>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_allowedstart_time = Array.create(4096);


global Array.t<<8>> allowed = Array.create(4096);


memop allowedmemop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = 0==8;
bool b2 = memval+0>7;
if (b1||b2) {
cell1 = 1|memval;
} else {
if (true) {
cell1 = g|memval;
} 
}
if (true) {
return cell1;
} }

memop allowedmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g<8;
bool b2 = 0==4;
if (b1||b2) {
cell1 = f^^0;
} else {
if (true) {
cell1 = f^^1;
} 
}
if (true) {
return cell1;
} }

memop allowedmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>7;
bool b2 = memval+f==8;
if (b1||b2) {
cell1 = 1|memval;
} else {
if (true) {
cell1 = f^^1;
} 
}
if (true) {
return cell1;
} }

global Array.t<<32>> times = Array.create(4096);


memop set_m(int<<32>> memval,int<<32>> input)
 {return input;}

memop get_m(int<<32>> memval,int<<32>> input)
 {return memval;}

handle ip_pkt(eth_hdr eth,ip_hdr_prefix ip,int<<32>> src,int<<32>> dst) {
int<<32>> idx = (int<<32>>)hash<<12>>(19,src,dst);
if ({bool ansallowed = true;
int<<'idxvalsize~0>> allowedidx = idx;
int<<8>> f_synthesized_meta_varallowed = 0;
int<<8>> g_synthesized_meta_varallowed = 0;
int<<8>> memop_synthesized_meta_varallowed = 0;
int<<32>> start_time = Array.setm(assigned_var_allowedstart_time,allowedidx,re12351sdaCheckThenSet,Sys.time());
int<<'predsizeval0~0>> pred0allowed = Sys.time()-start_time-10000;
int<<'predsizeval1~0>> pred1allowed = ip#tos-TOS_TRUSTED;
match (pred0allowed,pred1allowed) with 
| 0b1*******************************,0 -> {
f_synthesized_meta_varallowed = 180;
g_synthesized_meta_varallowed = 249;
memop_synthesized_meta_varallowed = 1;
}
| 0b1*******************************,_ -> {
f_synthesized_meta_varallowed = 201;
g_synthesized_meta_varallowed = 249;
memop_synthesized_meta_varallowed = 1;
}
| _,0 -> {
f_synthesized_meta_varallowed = 176;
g_synthesized_meta_varallowed = 0;
memop_synthesized_meta_varallowed = 3;
}
| _,_ -> {
f_synthesized_meta_varallowed = 176;
g_synthesized_meta_varallowed = 8;
memop_synthesized_meta_varallowed = 2;
}
int<<8>> resallowed = 0;
match memop_synthesized_meta_varallowed with 
| 1 -> {
resallowed = Array.update_complex(allowed,allowedidx,allowedmemop1,f_synthesized_meta_varallowed,g_synthesized_meta_varallowed,0);
}
| 2 -> {
resallowed = Array.update_complex(allowed,allowedidx,allowedmemop2,f_synthesized_meta_varallowed,g_synthesized_meta_varallowed,0);
}
| 3 -> {
resallowed = Array.update_complex(allowed,allowedidx,allowedmemop3,f_synthesized_meta_varallowed,g_synthesized_meta_varallowed,0);
}
printf "state machine transitioned to %d" resallowed;
match resallowed with 
| 176 -> {
ansallowed = true;
}
| _ -> {
ansallowed = false;
}; return ansallowed}) {
printf "Detected timeout error!" ;
} 
int<<32>> t = Array.update(times,idx,get_m,0,set_m,Sys.time());
if (ip#tos==TOS_TRUSTED||Sys.time()-t<10000) {
generate_port (out_port, this);
} 
}