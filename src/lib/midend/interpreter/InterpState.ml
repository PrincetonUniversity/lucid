(* Interpreter context + helpers for data structure interpretation. *)
open CoreSyntax
open InterpSyntax
open Batteries
module Env = Collections.CidMap
module IntMap = Map.Make (Int)

open InterpSwitch

module State = struct

  (* Maps switch -> port -> (switch * port) *)
  type topology = (int * int) IntMap.t IntMap.t

  let empty_topology num_switches (recirc_ports : int list) =
    List.fold_left2
      (fun acc swid recirc_port -> IntMap.add swid 
        (* add the recirculation port mapping *)
        (IntMap.add recirc_port (swid, recirc_port) IntMap.empty) acc)
      IntMap.empty
      (List.init num_switches (fun n -> n))
      recirc_ports
  ;;

  type config =
    { max_time : int
    ; default_input_gap : int
    ; generate_delay : int
    ; propagate_delay : int
    ; random_seed : int
    ; random_delay_range : int
    ; random_propagate_range : int
    ; drop_chance : int
    }

  type network_state =
    { current_time : int
    ; config : config
    ; event_sorts : event_sort Env.t
    ; event_signatures  : (Cid.t * CoreSyntax.ty list) IntMap.t
    ; handlers : handler Env.t
    ; egress_handlers : handler Env.t
    ; links : topology
    ; switches : switch array
    ; actions : action Env.t
    ; global_names : SyntaxGlobalDirectory.dir
    }
    and handler = network_state InterpSyntax.handler
    and switch = network_state InterpSwitch.state
  
  type global_fun =
    { cid : Cid.t
    ; body : network_state InterpSyntax.code
    ; ty : Syntax.ty
        (* Not CoreSyntax.ty, since this is needed only for type inference *)
    }

  let create config : network_state =
    { current_time = -1
    ; config
    ; event_sorts = Env.empty
    ; event_signatures = IntMap.empty
    ; handlers = Env.empty
    ; egress_handlers = Env.empty
    ; switches = Array.of_list []
    ; links = empty_topology 0 []
    ; actions = Env.empty
    ; global_names = SyntaxGlobalDirectory.empty_dir
    }
  ;;

  (* switch wrappers *)

  let sw nst swid = nst.switches.(swid)

  let mem_env swid cid nst = InterpSwitch.mem_env cid nst.switches.(swid)
  let lookup swid k nst = InterpSwitch.lookup k nst.switches.(swid)


  let sw_update nst swid update_f = 
    nst.switches.(swid) <- update_f nst.switches.(swid)
  ;;

  
  let add_global swid cid v nst = sw_update nst swid (InterpSwitch.add_global cid v)
  ;;

  let add_global_function (g : global_fun) nst =
    Array.modify
      (fun st ->
        if InterpSwitch.mem_env g.cid st
        then
          error ("global variable " ^ Cid.to_string g.cid ^ "  already defined")
        else InterpSwitch.add_global g.cid (F g.body) st)
      nst.switches
  ;;

  (* let lookup_handler cid nst =
    try Some (Env.find cid nst.handlers) with
    | Not_found -> error ("missing handler: " ^ Cid.to_string cid)
  ;; *)

  let lookup_action cid nst =
    try Env.find cid nst.actions with
    | Not_found -> error ("missing action: " ^ Cid.to_string cid)
  ;;

  let add_handler cid lam nst =
    { nst with handlers = Env.add cid lam nst.handlers }
  ;;

  let add_action cid action nst =
    { nst with actions = Env.add cid action nst.actions }
  ;;

  let log_exit swid port event nst =
    InterpSwitch.log_exit  port event nst.current_time (sw nst swid)
  ;;

  let log_drop swid event nst =
    InterpSwitch.log_drop  event nst.current_time (sw nst swid)
  ;;

  let update_counter swid event nst =
    let st = nst.switches.(swid) in
    let event_sort = Env.find event.eid nst.event_sorts in
    InterpSwitch.update_counter event_sort st
  ;;

  (* Maps switch * port -> switch * port according to the topology *)
  let lookup_dst nst (sw, p) =
    match IntMap.find_opt sw nst.links with
    | Some map ->
      (match IntMap.find_opt p map with
       | None -> 
        (* print_endline ("could not find port "^string_of_int p^" in switch "^string_of_int sw);         *)
        -1, p
       | Some ret -> ret)
    (* the switch ID does not exist in the topology... *)
    | None ->
      error @@ "lookup_dst error -- Invalid switch id " ^ string_of_int sw
  ;;

  type push_loc = 
  | Port of int
  | Switch of int
  | PExit of int

  (* push a single event to a single switch's queue, used for
     events generated by the program itself. *)
  let push_generated_event src_id dst_id port (ievent : interp_event) nst =
    let delay = InterpSyntax.delay ievent in
    let st = nst.switches.(dst_id) in
    let propagate_delay =
      if src_id = dst_id
      then
        nst.config.propagate_delay
        + Random.int nst.config.random_propagate_range
      else 0
    in
    let t =
      nst.current_time
      + max delay nst.config.generate_delay
      + propagate_delay
      + Random.int nst.config.random_delay_range
    in    
    if Random.int 100 < nst.config.drop_chance
    then (InterpSwitch.log_drop  ievent nst.current_time st)
    else (nst.switches.(dst_id) <- InterpSwitch.push_event  ievent t port st;)
  ;;

  (* given an event generated at swid to local output ports, find the 
     destination switch for each port and push all events to the 
     appropriate queues. *)
     let push_generated_event_to_ports src_id out_ports ievent nst = 
      let dsts = List.map 
        (fun push_loc -> 
          match push_loc with
          | Port port -> lookup_dst nst (src_id, port)
          | Switch sw -> (sw, 0)  (*an event located at the switch zoops right over there as if by magic.*)
          | PExit port -> (-1, port)
        ) 
        out_ports 
      in
        List.iter (fun (dst_id, dst_port) -> 
        if (dst_id = -1) then log_exit src_id (Some dst_port) ievent nst
        else        
          push_generated_event src_id dst_id dst_port ievent nst) dsts
     ;;
   


  (* push an event from the user, which may be a program event
     or a control event. Doesn't add delays. *)
  let push_input_event (loc : loc) (event : interp_event) nst =
    let st = nst.switches.(loc.switch) in
    nst.switches.(loc.switch) <- InterpSwitch.push_event  event (interp_event_delay event) loc.port st
  ;;

  (* Push an event to a list of entry points *)
  let push_interp_events locs event nst =
    let push_wrapper loc = push_input_event loc event nst in
    List.iter push_wrapper locs
  ;;

  (* push a located event to multiple switches where it should appear *)
  let push_located_events (located_events : located_event list) nst =
    let wrapper located_event =
      push_interp_events located_event.ilocs located_event.ievent nst
    in
    List.iter wrapper located_events
  ;;

  let next_event swid nst =
    let st = nst.switches.(swid) in
    match InterpSwitch.next_event nst.current_time st with
      | None -> None
      | Some(st, event, port, gress) -> 
        nst.switches.(swid) <- st;
        Some(event, port, gress)
  ;;

  let next_time nst =
    Array.fold_left
      (fun acc st ->
        match acc, InterpSwitch.next_time st with
        | None, x | x, None -> x
        | Some x, Some y -> Some (min x y))
      None
      nst.switches
  ;;


  let ival_to_string v =
    match v with
    | V v -> CorePrinting.value_to_string v
    | F _ -> "<function>"
    | P pv -> InterpSyntax.payload_to_string pv
  ;;


  let env_to_string env =
    if Env.is_empty env
    then "{ }"
    else
      Printf.sprintf "{\n%s  }"
      @@ Env.fold
           (fun id v acc ->
             let kstr = Cid.to_string id in
             acc ^ "    " ^ kstr ^ " = " ^ ival_to_string v ^ ";\n")
           env
           ""
  ;;
  let event_queue_to_string = InterpSwitch.event_queue_to_string 
  let exits_to_string = InterpSwitch.exits_to_string 
  let drops_to_string = InterpSwitch.drops_to_string
  let stats_counter_to_string = InterpSwitch.stats_counter_to_string

  let st_to_string = (InterpSwitch.to_string ival_to_string)

  let nst_to_string
    ?(show_vars = false)
    ?(show_pipeline = true)
    ?(show_queue = true)
    ?(show_exits = true)
    nst
    =
    Array.fold_lefti
      (fun acc idx st ->
        Printf.sprintf "%s\nSwitch %d : %s" acc idx
        @@ st_to_string ~show_vars ~show_pipeline ~show_queue ~show_exits st)
      ""
      nst.switches
  ;;
end

let extract_ival iv =InterpSyntax.extract_ival iv
;;
