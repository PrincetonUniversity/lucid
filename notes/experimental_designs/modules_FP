module Foo : sig
  type t<<'a>>;

  event setCond(int idx, int<<'a>> data);
  event setCond2(int idx, int<<'a>> data);

  fun void setBoth(t<<'a>> t, int idx, int<<'a>> data);
  event setCond(t<<'a>> t, int idx, int<<'a>> data);
end
=
struct
  // Like a record, but order of declaration matters
  type t<<'a>> = {
    Array<<'a>> arr1;
    Array<<'a>> arr2;
  };

  event setCond(int idx, int<<'a>> data);
  event setCond2(int idx, int<<'a>> data);

  // Since we're creating globals a regular function won't cut it
  constr create_t<<'a>>(int size) {
    arr1 = new Array<<'a>>(size);
    arr2 = new Array<<'a>>(size);
  };

  // We need to somehow ensure that arr1 is used before arr2 during typechecking
  fun void setBoth(t<<'a>> t, int idx, int<<'a>> data) {
    Array.set(t.arr1, idx, data);
    Array.set(t.arr2, idx, data);
  }

  event setCond(t<<'a>> t, int idx, int<<'a>> data) {
    int x = Array.get(t.arr1, idx);
    if (x = 3) {
      Array.set(t.arr2, idx, data);
    } else {
      int y = Array.get(t.arr2, idx);
      if (y = x) {
        generate setCond2(t, idx, data);
      }
    }
  }

  // Make this hidden via ML-like signature
  event setCond2(t<<'a>> t, int idx, int<<'a>> data) {
    Array.set(t.arr1, idx, data);
  }
end

/** Usage **/

global Array<<32>> arr = Array.create(length);
global Counter<<5>> c = Counter.create(0);
global Foo.t<<3>> foo = Foo.create_t(16);

handle packetin(...) {
  if(...) {
    Foo.setBoth(foo, 3, 7);
  } else {
    generate Foo.setCond(foo, 5, 8);
  }
}

// What about modules which define a whole program, rather than just a single datatype?
// What about functions which use global variables from outside the module?
// What about timed "background" events? E.g. timing out a bloom filter
