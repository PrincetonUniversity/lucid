type ip_t = {
    int src;
    int dst;
}

global Array.t<32> arr = Array.create(10);

global PairArray.t<32> pair_arr = PairArray.create(10);

packet event ip(HIGH int dst);

packet event arr_test(int idx); 

fun HIGH int test(int i) {
    return 5;
}

// generalize type to: HIGH int -> 'a int
fun int test2(HIGH int i) { // check that arguments are equal to HIGH int
    return 4;
}

fun int test3(int i) {
    return 3;
}

memop foo(int memval, int localval) { 
    if (true) { return localval; } else { return localval; }
}

memop foo4(int memval1, int memval2, int localval1, int localval2) {
  // May be omitted entirely, or just the else branch may be omitted
  if (true) { cell1 = localval1; }
  
  // May be omitted entirely, or just the else branch may be omitted 
  if (true) { cell2 = localval2; }

  // Default return value is passed as a parameter to PairArray.update
}

handle ip(int dst) {                                    // HIGH propagates to dst in handler
    int x = dst + 1;
    // x = 3;
    // LOW int y = 2;

    Array.set(arr, 1, 0);
    generate(arr_test(1));
    // int z = up(2);
    // int w = x + 1;
    // int x = dst+1;                                      // HIGH propagates to x
    
    // int i = test(4);                                    // HIGH propagates to i
    // int j = test2(4);                                   // HIGH propagates to j
    // int k = test3(x);                                   // HIGH propagates to k
    
    // ip_t ip_addr = { src = x; dst = 2 };
    // ip_addr = { ip_addr with src = x };
    //int w = ip_addr#src;                                // HIGH propagates to w
    //int v = ip_addr#dst;                                // but v is not HIGH (as expected)
    // // Propagation also works for size casting, hashing, polymorphism, and getting values from HIGH array

    // // But doesn't work for...
    // HIGH ip_t ip_addr2 = { src = 3; dst = 4; };         // src + dst both marked LOW
    // int a = ip_addr2#src;                               // a + b both marked LOW        
    // int b = ip_addr2#dst;
    // ip_t ip_addr3 = { src = a; dst = b; };
    
    // int[4] vec = [0; 1; 2; 3];                     // all values in vector marked LOW still
    // int w = vec[0];                                     // w is marked LOW

    // generate_port(1, ip(x));
    // HIGH bool y = true;
    // if (y) {
    //     generate_port(1, ip(1));                        // doesn't throw error
    // }
    // else {
    //     generate_port(1, ip(2));                        // doesn't throw error
    // }
    // Tables also don't work
}

handle arr_test(int idx) {
    int y = Array.get(arr, idx);
}