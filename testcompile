compiler: Compilation to P4 started...
------- port configuration -------
recirc dpid: 196
lucid internal ports: 
lucid external ports: 128@10Gb/s, 129@10Gb/s, 130@10Gb/s, 131@10Gb/s
port-event bindings: 
compiler: Starting P4-Tofino compilation. Using switch port configuration: 
recirc dpid: 196
lucid internal ports: 
lucid external ports: 128@10Gb/s, 129@10Gb/s, 130@10Gb/s, 131@10Gb/s
port-event bindings: 
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0;

const RECOVERED int<<8>> = 1;

exit event Consensus_success(int<<32>> idx) ;

spec msre event

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
}
dpt: -------Checking well-formedness---------
dpt: ----------Elim alphabet-------
dpt: ----------Elim spec-------
num_events1
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0;

const RECOVERED int<<8>> = 1;

exit event Consensus_success(int<<32>> idx) ;

spec msre event TODO: EVENT SPEC TO STRING

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if (transition(msre, idx, None)) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ----------Elim regex-------
Status is unknown. Time spent on synthesis is 21.273339
States map has size 5"":232
0:252
(Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000))))))))))))))):240
((Paxos11111 + (Paxos11101 + (Paxos11011 + (Paxos11001 + (Paxos10111 + (Paxos10101 + (Paxos10011 + (Paxos10001 + (Paxos01111 + (Paxos01101 + (Paxos01011 + (Paxos01001 + (Paxos00111 + (Paxos00101 + (Paxos00011 + (Paxos00001 + (Paxos11111 + (Paxos11110 + (Paxos11011 + (Paxos11010 + (Paxos10111 + (Paxos10110 + (Paxos10011 + (Paxos10010 + (Paxos01111 + (Paxos01110 + (Paxos01011 + (Paxos01010 + (Paxos00111 + (Paxos00110 + (Paxos00011 + (Paxos00010 + (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos00111 + (Paxos00110 + (Paxos00101 + Paxos00100))))))))))))))))))))))))))))))))))))))))))))))) . (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000)))))))))))))))):248
((Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos10011 + (Paxos10010 + (Paxos10001 + Paxos10000))))))))))))))) . ((Paxos11111 + (Paxos11101 + (Paxos11011 + (Paxos11001 + (Paxos10111 + (Paxos10101 + (Paxos10011 + (Paxos10001 + (Paxos01111 + (Paxos01101 + (Paxos01011 + (Paxos01001 + (Paxos00111 + (Paxos00101 + (Paxos00011 + (Paxos00001 + (Paxos11111 + (Paxos11110 + (Paxos11011 + (Paxos11010 + (Paxos10111 + (Paxos10110 + (Paxos10011 + (Paxos10010 + (Paxos01111 + (Paxos01110 + (Paxos01011 + (Paxos01010 + (Paxos00111 + (Paxos00110 + (Paxos00011 + (Paxos00010 + (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos00111 + (Paxos00110 + (Paxos00101 + Paxos00100))))))))))))))))))))))))))))))))))))))))))))))) . (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000))))))))))))))))):0
solved.Paxos11111: 31
Paxos11110: 30
Paxos11101: 29
Paxos11100: 28
Paxos11011: 27
Paxos11010: 26
Paxos11001: 25
Paxos11000: 24
Paxos10111: 23
Paxos10110: 22
Paxos10101: 21
Paxos10100: 20
Paxos10011: 19
Paxos10010: 18
Paxos10001: 17
Paxos10000: 16
Paxos01111: 15
Paxos01110: 14
Paxos01101: 13
Paxos01100: 12
Paxos01011: 11
Paxos01010: 10
Paxos01001: 9
Paxos01000: 8
Paxos00111: 7
Paxos00110: 6
Paxos00101: 5
Paxos00100: 4
Paxos00011: 3
Paxos00010: 2
Paxos00001: 1
Paxos00000: 0
States
""
0
(Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000)))))))))))))))
((Paxos11111 + (Paxos11101 + (Paxos11011 + (Paxos11001 + (Paxos10111 + (Paxos10101 + (Paxos10011 + (Paxos10001 + (Paxos01111 + (Paxos01101 + (Paxos01011 + (Paxos01001 + (Paxos00111 + (Paxos00101 + (Paxos00011 + (Paxos00001 + (Paxos11111 + (Paxos11110 + (Paxos11011 + (Paxos11010 + (Paxos10111 + (Paxos10110 + (Paxos10011 + (Paxos10010 + (Paxos01111 + (Paxos01110 + (Paxos01011 + (Paxos01010 + (Paxos00111 + (Paxos00110 + (Paxos00011 + (Paxos00010 + (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos00111 + (Paxos00110 + (Paxos00101 + Paxos00100))))))))))))))))))))))))))))))))))))))))))))))) . (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000))))))))))))))))
((Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos10011 + (Paxos10010 + (Paxos10001 + Paxos10000))))))))))))))) . ((Paxos11111 + (Paxos11101 + (Paxos11011 + (Paxos11001 + (Paxos10111 + (Paxos10101 + (Paxos10011 + (Paxos10001 + (Paxos01111 + (Paxos01101 + (Paxos01011 + (Paxos01001 + (Paxos00111 + (Paxos00101 + (Paxos00011 + (Paxos00001 + (Paxos11111 + (Paxos11110 + (Paxos11011 + (Paxos11010 + (Paxos10111 + (Paxos10110 + (Paxos10011 + (Paxos10010 + (Paxos01111 + (Paxos01110 + (Paxos01011 + (Paxos01010 + (Paxos00111 + (Paxos00110 + (Paxos00011 + (Paxos00010 + (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos00111 + (Paxos00110 + (Paxos00101 + Paxos00100))))))))))))))))))))))))))))))))))))))))))))))) . (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000)))))))))))))))))
Alphabet
Paxos11111
Paxos11110
Paxos11101
Paxos11100
Paxos11011
Paxos11010
Paxos11001
Paxos11000
Paxos10111
Paxos10110
Paxos10101
Paxos10100
Paxos10011
Paxos10010
Paxos10001
Paxos10000
Paxos01111
Paxos01110
Paxos01101
Paxos01100
Paxos01011
Paxos01010
Paxos01001
Paxos01000
Paxos00111
Paxos00110
Paxos00101
Paxos00100
Paxos00011
Paxos00010
Paxos00001
Paxos00000
((Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos10011 + (Paxos10010 + (Paxos10001 + Paxos10000))))))))))))))) . ((Paxos11111 + (Paxos11101 + (Paxos11011 + (Paxos11001 + (Paxos10111 + (Paxos10101 + (Paxos10011 + (Paxos10001 + (Paxos01111 + (Paxos01101 + (Paxos01011 + (Paxos01001 + (Paxos00111 + (Paxos00101 + (Paxos00011 + (Paxos00001 + (Paxos11111 + (Paxos11110 + (Paxos11011 + (Paxos11010 + (Paxos10111 + (Paxos10110 + (Paxos10011 + (Paxos10010 + (Paxos01111 + (Paxos01110 + (Paxos01011 + (Paxos01010 + (Paxos00111 + (Paxos00110 + (Paxos00011 + (Paxos00010 + (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos10111 + (Paxos10110 + (Paxos10101 + (Paxos10100 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos00111 + (Paxos00110 + (Paxos00101 + Paxos00100))))))))))))))))))))))))))))))))))))))))))))))) . (Paxos11111 + (Paxos11110 + (Paxos11101 + (Paxos11100 + (Paxos11011 + (Paxos11010 + (Paxos11001 + (Paxos11000 + (Paxos01111 + (Paxos01110 + (Paxos01101 + (Paxos01100 + (Paxos01011 + (Paxos01010 + (Paxos01001 + Paxos01000)))))))))))))))))Handler: Paxos
Pred: l1<aPred: l2<cPred: l3<ePred: ty==RECOVEREDPred: ty==RECOVERdecls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0;

const RECOVERED int<<8>> = 1;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<'memvalsize~0>> memval,int<<'newvalsize~0>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<'idxvalsize~0>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<'predsizeval0~0>> pred0msre = l1-a;
int<<'predsizeval1~0>> pred1msre = l2-c;
int<<'predsizeval2~0>> pred2msre = l3-e;
int<<'predsizeval3~0>> pred3msre = ty-RECOVERED;
int<<'predsizeval4~0>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------typing1---------
dpt: ---------Concretizing symbolics-------------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------Aliasing Modules-------------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------Making returns explicit-------------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------renaming-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating modules---------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Inlining size declarations---------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------typing2---------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating type aliases 2---------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------inlining functions-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------inlining tables-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

exit event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------Assigning extern events default handlers-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

handle Consensus_success(int<<32>> idx) {

}

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------Eliminating events with global arguments----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------------typing3-------------
dpt: -------Eliminating vectors-------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------re-renaming-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
if ({bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}; return ansmsre}) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating EStmts-------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating records-------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating tuples-------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

const RECOVER int<<8>> = 0<<8>>;

const RECOVERED int<<8>> = 1<<8>>;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-RECOVERED;
int<<8>> pred4msre = ty-RECOVER;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Inlining Constants-------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-1<<8>>;
int<<8>> pred4msre = ty-0<<8>>;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -----------re-re-renaming-----------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-1<<8>>;
int<<8>> pred4msre = ty-0<<8>>;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: ---------------typing again-------------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) ;

event Consensus_success(int<<32>> idx) ;

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+f==4;
if (b1||b2) {
cell1 = g|4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f>8;
bool b2 = memval+0!=8;
if (b1&&b2) {
cell1 = g^^4;
} else {
if (true) {
cell1 = g+memval;
} 
}
if (true) {
return cell1;
} }

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g>8;
bool b2 = memval+0>8;
if (b1&&b2) {
cell1 = f^^4;
} else {
if (true) {
cell1 = f+memval;
} 
}
if (true) {
return cell1;
} }

event msrereset(int<<32>> msreidx) ;

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-1<<8>>;
int<<8>> pred4msre = ty-0<<8>>;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
-------Eliminating events in match statements---------
decls: 
dpt: entry event Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src);

event Consensus_success(int<<32>> idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msreidx);

handle Consensus_success(int<<32>> idx) {

}

handle msrereset(int<<32>> msreidx) {
Array.set(assigned_var_msrea,msreidx,0);
Array.set(assigned_var_msrec,msreidx,0);
Array.set(assigned_var_msree,msreidx,0);
Array.set(msre,msreidx,0);
}

handle Paxos(int<<32>> idx,int<<8>> ty,int<<32>> l1,int<<32>> l2,int<<32>> l3,int<<32>> src) {
printf "Doing nothing" ;
bool ansmsre = true;
int<<32>> msreidx = idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,l3);
int<<32>> pred0msre = l1-a;
int<<32>> pred1msre = l2-c;
int<<32>> pred2msre = l3-e;
int<<8>> pred3msre = ty-1;
int<<8>> pred4msre = ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
printf "state machine transitioned to %d" resmsre;
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
printf "sequence success!" ;
generate Consensus_success(idx);
} 
}
dpt: -------Eliminating interpreter-only operations--------
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
dpt: -------Eliminating value cast ops--------
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
dpt: -------Eliminating range relational ops--------
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
dpt: -------Adding default branches--------
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
dpt: -------Making variables in if / match conditions constants--------
Tofino translation: making branch variables single assignment
Tofino translation: partial ssa finished
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
bool ansmsre = true;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = true;
}
| _ -> {
ansmsre = false;
}
if (ansmsre) {
generate Consensus_success(Paxos_idx);
} 
}
dpt: -------Breaking down compound expressions--------
Tofino translation: Starting cannonization before IR...
Tofino translation: boolean elimination complete. 
Tofino translation: Normalizing relational ops...
Tofino translation: Normalizing if expressions...
Tofino translation: if-else cannonization complete.
Tofino translation: immediate elimination complete.
normalizeIntOps: assignments transformed to balanced exps
normalizeIntOps: expressions atomized
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
if (ansmsre==1) {
generate Consensus_success(Paxos_idx);
} 
}
decls: 
dpt: entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);

event Consensus_success(int<<32>> Consensus_success_idx);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<32>> assigned_var_msrea = Array.create(1024);


global Array.t<<32>> assigned_var_msrec = Array.create(1024);


global Array.t<<32>> assigned_var_msree = Array.create(1024);


global Array.t<<8>> msre = Array.create(1024);


memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}

memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}

event msrereset(int<<32>> msrereset_msreidx);

handle Consensus_success(int<<32>> Consensus_success_idx) {

}

handle msrereset(int<<32>> msrereset_msreidx) {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}

handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
if (ansmsre==1) {
generate Consensus_success(Paxos_idx);
} 
}
----------- initial tofinoCore program------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 3 -> {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
if (ansmsre==1) {
generate Consensus_success(Paxos_idx);
} 
}}
----------- initial tofinoCore program------- 
----------- after IfToMatch ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (true -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (true -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 3 -> {
Array.set(assigned_var_msrea,msrereset_msreidx,0);
Array.set(assigned_var_msrec,msrereset_msreidx,0);
Array.set(assigned_var_msree,msrereset_msreidx,0);
Array.set(msre,msrereset_msreidx,0);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.setm(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1);
int<<32>> c = Array.setm(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2);
int<<32>> e = Array.setm(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
}}
----------- after IfToMatch ------- 
----------- after RegularizeMemops ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 3 -> {
Array.update_complex(assigned_var_msrea,msrereset_msreidx,set_3702,0,0,0);
Array.update_complex(assigned_var_msrec,msrereset_msreidx,set_3706,0,0,0);
Array.update_complex(assigned_var_msree,msrereset_msreidx,set_3710,0,0,0);
Array.update_complex(msre,msrereset_msreidx,set_3714,0,0,0);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<32>> a = Array.update_complex(assigned_var_msrea,msreidx,re12351sdaCheckThenSet,Paxos_l1,0,0);
int<<32>> c = Array.update_complex(assigned_var_msrec,msreidx,re12351sdaCheckThenSet,Paxos_l2,0,0);
int<<32>> e = Array.update_complex(assigned_var_msree,msreidx,re12351sdaCheckThenSet,Paxos_l3,0,0);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
resmsre = Array.update_complex(msre,msreidx,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after RegularizeMemops ------- 
----------- after ShareMemopInputs ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:
int<<32>> msre_idx_3724;
int<<32>> assigned_var_msree_idx_3723;
int<<32>> assigned_var_msrec_idx_3722;
int<<32>> assigned_var_msrea_idx_3721;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 3 -> {
assigned_var_msrea_idx_3721 = msrereset_msreidx;
Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,set_3702,0,0,0);
assigned_var_msrec_idx_3722 = msrereset_msreidx;
Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,set_3706,0,0,0);
assigned_var_msree_idx_3723 = msrereset_msreidx;
Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,set_3710,0,0,0);
msre_idx_3724 = msrereset_msreidx;
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
assigned_var_msrea_idx_3721 = msreidx;
int<<32>> a = Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,re12351sdaCheckThenSet,Paxos_l1,0,0);
assigned_var_msrec_idx_3722 = msreidx;
int<<32>> c = Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,re12351sdaCheckThenSet,Paxos_l2,0,0);
assigned_var_msree_idx_3723 = msreidx;
int<<32>> e = Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,re12351sdaCheckThenSet,Paxos_l3,0,0);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after ShareMemopInputs ------- 
----------- after Generates.eliminate ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:
int<<32>> msre_idx_3724;
int<<32>> assigned_var_msree_idx_3723;
int<<32>> assigned_var_msrec_idx_3722;
int<<32>> assigned_var_msrea_idx_3721;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.Consensus_success(Consensus_success_idx);
}
| 3 -> {
assigned_var_msrea_idx_3721 = msrereset_msreidx;
Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,set_3702,0,0,0);
assigned_var_msrec_idx_3722 = msrereset_msreidx;
Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,set_3706,0,0,0);
assigned_var_msree_idx_3723 = msrereset_msreidx;
Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,set_3710,0,0,0);
msre_idx_3724 = msrereset_msreidx;
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
Sys.invalidate.msrereset(msrereset_msreidx);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
assigned_var_msrea_idx_3721 = msreidx;
int<<32>> a = Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,re12351sdaCheckThenSet,Paxos_l1,0,0);
assigned_var_msrec_idx_3722 = msreidx;
int<<32>> c = Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,re12351sdaCheckThenSet,Paxos_l2,0,0);
assigned_var_msree_idx_3723 = msreidx;
int<<32>> e = Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,re12351sdaCheckThenSet,Paxos_l3,0,0);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
Sys.invalidate.Paxos(Paxos_idx,Paxos_ty,Paxos_l1,Paxos_l2,Paxos_l3,Paxos_src);
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after Generates.eliminate ------- 
----------- after SingleTableMatch ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:
int<<32>> msre_idx_3724;
int<<32>> assigned_var_msree_idx_3723;
int<<32>> assigned_var_msrec_idx_3722;
int<<32>> assigned_var_msrea_idx_3721;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.Consensus_success(Consensus_success_idx);
}
| 3 -> {
assigned_var_msrea_idx_3721 = msrereset_msreidx;
Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,set_3702,0,0,0);
assigned_var_msrec_idx_3722 = msrereset_msreidx;
Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,set_3706,0,0,0);
assigned_var_msree_idx_3723 = msrereset_msreidx;
Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,set_3710,0,0,0);
msre_idx_3724 = msrereset_msreidx;
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
Sys.invalidate.msrereset(msrereset_msreidx);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
assigned_var_msrea_idx_3721 = msreidx;
int<<32>> a = Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,re12351sdaCheckThenSet,Paxos_l1,0,0);
assigned_var_msrec_idx_3722 = msreidx;
int<<32>> c = Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,re12351sdaCheckThenSet,Paxos_l2,0,0);
assigned_var_msree_idx_3723 = msreidx;
int<<32>> e = Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,re12351sdaCheckThenSet,Paxos_l3,0,0);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
Sys.invalidate.Paxos(Paxos_idx,Paxos_ty,Paxos_l1,Paxos_l2,Paxos_l3,Paxos_src);
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after SingleTableMatch ------- 
----------- after ActionsToFunctions ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:
int<<32>> msre_idx_3724;
int<<32>> assigned_var_msree_idx_3723;
int<<32>> assigned_var_msrec_idx_3722;
int<<32>> assigned_var_msrea_idx_3721;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.Consensus_success(Consensus_success_idx);
}
| 3 -> {
assigned_var_msrea_idx_3721 = msrereset_msreidx;
Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,set_3702,0,0,0);
assigned_var_msrec_idx_3722 = msrereset_msreidx;
Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,set_3706,0,0,0);
assigned_var_msree_idx_3723 = msrereset_msreidx;
Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,set_3710,0,0,0);
msre_idx_3724 = msrereset_msreidx;
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
Sys.invalidate.msrereset(msrereset_msreidx);
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
assigned_var_msrea_idx_3721 = msreidx;
int<<32>> a = Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,re12351sdaCheckThenSet,Paxos_l1,0,0);
assigned_var_msrec_idx_3722 = msreidx;
int<<32>> c = Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,re12351sdaCheckThenSet,Paxos_l2,0,0);
assigned_var_msree_idx_3723 = msreidx;
int<<32>> e = Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,re12351sdaCheckThenSet,Paxos_l3,0,0);
int<<32>> pred0msre = Paxos_l1-a;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred2msre = Paxos_l3-e;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
match (pred0msre,pred1msre,pred2msre,pred3msre,pred4msre) with 
| 0b1*******************************,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 16;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| _,0b1*******************************,_,0,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 20;
memop_synthesized_meta_varmsre = 2;
}
| 0b1*******************************,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,0,_ -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| 0b1*******************************,_,_,_,0 -> {
f_synthesized_meta_varmsre = 8;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,0,_ -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,0b1*******************************,_,_,0 -> {
f_synthesized_meta_varmsre = 16;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,0,_ -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,0 -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 1;
}
| 0b1*******************************,_,_,_,_ -> {
f_synthesized_meta_varmsre = 248;
g_synthesized_meta_varmsre = 188;
memop_synthesized_meta_varmsre = 2;
}
| _,0b1*******************************,_,_,_ -> {
f_synthesized_meta_varmsre = 21;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,0b1*******************************,_,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,0,_ -> {
f_synthesized_meta_varmsre = 14;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,0 -> {
f_synthesized_meta_varmsre = 13;
g_synthesized_meta_varmsre = 248;
memop_synthesized_meta_varmsre = 0;
}
| _,_,_,_,_ -> {
f_synthesized_meta_varmsre = 56;
g_synthesized_meta_varmsre = 252;
memop_synthesized_meta_varmsre = 0;
}
int<<8>> resmsre = 0;
match memop_synthesized_meta_varmsre with 
| 0 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 1 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2 -> {
msre_idx_3724 = msreidx;
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| _ -> {

}
match resmsre with 
| 232 -> {
ansmsre = 1;
}
| _ -> {
ansmsre = 0;
}
match ansmsre with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate Consensus_success(Paxos_idx);
}
| _ -> {

}
Sys.invalidate.Paxos(Paxos_idx,Paxos_ty,Paxos_l1,Paxos_l2,Paxos_l3,Paxos_src);
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after ActionsToFunctions ------- 
-------- layout ----------
number of nodes in dfg: 137
[dfg_to_sgdfg] number of vertex_stmts in statement_groups before constructing dfg: 137
[dfg_to_sgdfg] number of statement group nodes in dfg: 131
[dfg_to_sgdfg] number of vertex_stmts in dfg: 137
placing IR statement 1 / 137 into current pipeline:
--- 0 IR statements in 0 physical tables across 0 stages ---

[try_place_in_stage] attempting to create new table in stage.
placing IR statement 2 / 137 into current pipeline:
--- 1 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 1, IR statements: 1, statement groups: 1)]
placing IR statement 3 / 137 into current pipeline:
--- 2 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 2, IR statements: 2, statement groups: 2)]
placing IR statement 4 / 137 into current pipeline:
--- 3 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 3, IR statements: 3, statement groups: 3)]
placing IR statement 5 / 137 into current pipeline:
--- 4 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 3, IR statements: 4, statement groups: 4)]
placing IR statement 6 / 137 into current pipeline:
--- 5 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 3, IR statements: 5, statement groups: 5)]
placing IR statement 7 / 137 into current pipeline:
--- 6 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 3, IR statements: 6, statement groups: 6)]
placing IR statement 8 / 137 into current pipeline:
--- 7 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 7, statement groups: 7)]
placing IR statement 9 / 137 into current pipeline:
--- 8 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 8, statement groups: 8)]
placing IR statement 10 / 137 into current pipeline:
--- 9 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 9, statement groups: 9)]
placing IR statement 11 / 137 into current pipeline:
--- 10 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 10, statement groups: 10)]
placing IR statement 12 / 137 into current pipeline:
--- 11 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 11, statement groups: 11)]
placing IR statement 13 / 137 into current pipeline:
--- 12 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 12, statement groups: 12)]
placing IR statement 14 / 137 into current pipeline:
--- 13 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 13, statement groups: 13)]
placing IR statement 15 / 137 into current pipeline:
--- 14 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 16 / 137 into current pipeline:
--- 15 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 3, IR statements: 1, statement groups: 1)]
placing IR statement 17 / 137 into current pipeline:
--- 16 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 2, statement groups: 2)]
placing IR statement 18 / 137 into current pipeline:
--- 17 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
placing IR statement 19 / 137 into current pipeline:
--- 18 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 21 / 137 into current pipeline:
--- 20 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 1 tables: [(branches: 4, IR statements: 2, statement groups: 1)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 23 / 137 into current pipeline:
--- 22 IR statements in 4 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 2 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 25 / 137 into current pipeline:
--- 24 IR statements in 5 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 26 / 137 into current pipeline:
--- 25 IR statements in 6 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 1, statement groups: 1)]
placing IR statement 27 / 137 into current pipeline:
--- 26 IR statements in 6 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 2, statement groups: 2)]
placing IR statement 28 / 137 into current pipeline:
--- 27 IR statements in 6 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 29 / 137 into current pipeline:
--- 28 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 1, statement groups: 1)]
placing IR statement 30 / 137 into current pipeline:
--- 29 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 2, statement groups: 2)]
placing IR statement 31 / 137 into current pipeline:
--- 30 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 3, statement groups: 3)]
placing IR statement 32 / 137 into current pipeline:
--- 31 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 4, statement groups: 4)]
placing IR statement 33 / 137 into current pipeline:
--- 32 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 5, statement groups: 5)]
placing IR statement 34 / 137 into current pipeline:
--- 33 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 6, statement groups: 6)]
placing IR statement 35 / 137 into current pipeline:
--- 34 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 7, statement groups: 7)]
placing IR statement 36 / 137 into current pipeline:
--- 35 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 8, statement groups: 8)]
placing IR statement 37 / 137 into current pipeline:
--- 36 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 9, statement groups: 9)]
placing IR statement 38 / 137 into current pipeline:
--- 37 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 10, statement groups: 10)]
placing IR statement 39 / 137 into current pipeline:
--- 38 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 11, statement groups: 11)]
placing IR statement 40 / 137 into current pipeline:
--- 39 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 12, statement groups: 12)]
placing IR statement 41 / 137 into current pipeline:
--- 40 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 13, statement groups: 13)]
placing IR statement 42 / 137 into current pipeline:
--- 41 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 14, statement groups: 14)]
placing IR statement 43 / 137 into current pipeline:
--- 42 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 15, statement groups: 15)]
placing IR statement 44 / 137 into current pipeline:
--- 43 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 16, statement groups: 16)]
placing IR statement 45 / 137 into current pipeline:
--- 44 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 17, statement groups: 17)]
placing IR statement 46 / 137 into current pipeline:
--- 45 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 18, statement groups: 18)]
placing IR statement 47 / 137 into current pipeline:
--- 46 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 19, statement groups: 19)]
placing IR statement 48 / 137 into current pipeline:
--- 47 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 20, statement groups: 20)]
placing IR statement 49 / 137 into current pipeline:
--- 48 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 21, statement groups: 21)]
placing IR statement 50 / 137 into current pipeline:
--- 49 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 22, statement groups: 22)]
placing IR statement 51 / 137 into current pipeline:
--- 50 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 23, statement groups: 23)]
placing IR statement 52 / 137 into current pipeline:
--- 51 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 24, statement groups: 24)]
placing IR statement 53 / 137 into current pipeline:
--- 52 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 25, statement groups: 25)]
placing IR statement 54 / 137 into current pipeline:
--- 53 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 26, statement groups: 26)]
placing IR statement 55 / 137 into current pipeline:
--- 54 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 27, statement groups: 27)]
placing IR statement 56 / 137 into current pipeline:
--- 55 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 28, statement groups: 28)]
placing IR statement 57 / 137 into current pipeline:
--- 56 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 29, statement groups: 29)]
placing IR statement 58 / 137 into current pipeline:
--- 57 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 30, statement groups: 30)]
placing IR statement 59 / 137 into current pipeline:
--- 58 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 31, statement groups: 31)]
placing IR statement 60 / 137 into current pipeline:
--- 59 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 32, statement groups: 32)]
placing IR statement 61 / 137 into current pipeline:
--- 60 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 33, statement groups: 33)]
placing IR statement 62 / 137 into current pipeline:
--- 61 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 34, statement groups: 34)]
placing IR statement 63 / 137 into current pipeline:
--- 62 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 35, statement groups: 35)]
placing IR statement 64 / 137 into current pipeline:
--- 63 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 36, statement groups: 36)]
placing IR statement 65 / 137 into current pipeline:
--- 64 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 37, statement groups: 37)]
placing IR statement 66 / 137 into current pipeline:
--- 65 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 38, statement groups: 38)]
placing IR statement 67 / 137 into current pipeline:
--- 66 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 39, statement groups: 39)]
placing IR statement 68 / 137 into current pipeline:
--- 67 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 40, statement groups: 40)]
placing IR statement 69 / 137 into current pipeline:
--- 68 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 41, statement groups: 41)]
placing IR statement 70 / 137 into current pipeline:
--- 69 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 42, statement groups: 42)]
placing IR statement 71 / 137 into current pipeline:
--- 70 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 43, statement groups: 43)]
placing IR statement 72 / 137 into current pipeline:
--- 71 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 44, statement groups: 44)]
placing IR statement 73 / 137 into current pipeline:
--- 72 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 45, statement groups: 45)]
placing IR statement 74 / 137 into current pipeline:
--- 73 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 46, statement groups: 46)]
placing IR statement 75 / 137 into current pipeline:
--- 74 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 47, statement groups: 47)]
placing IR statement 76 / 137 into current pipeline:
--- 75 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 48, statement groups: 48)]
placing IR statement 77 / 137 into current pipeline:
--- 76 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 49, statement groups: 49)]
placing IR statement 78 / 137 into current pipeline:
--- 77 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 50, statement groups: 50)]
placing IR statement 79 / 137 into current pipeline:
--- 78 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 51, statement groups: 51)]
placing IR statement 80 / 137 into current pipeline:
--- 79 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 52, statement groups: 52)]
placing IR statement 81 / 137 into current pipeline:
--- 80 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 53, statement groups: 53)]
placing IR statement 82 / 137 into current pipeline:
--- 81 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 54, statement groups: 54)]
placing IR statement 83 / 137 into current pipeline:
--- 82 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 55, statement groups: 55)]
placing IR statement 84 / 137 into current pipeline:
--- 83 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 56, statement groups: 56)]
placing IR statement 85 / 137 into current pipeline:
--- 84 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 57, statement groups: 57)]
placing IR statement 86 / 137 into current pipeline:
--- 85 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 58, statement groups: 58)]
placing IR statement 87 / 137 into current pipeline:
--- 86 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 59, statement groups: 59)]
placing IR statement 88 / 137 into current pipeline:
--- 87 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 60, statement groups: 60)]
placing IR statement 89 / 137 into current pipeline:
--- 88 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 61, statement groups: 61)]
placing IR statement 90 / 137 into current pipeline:
--- 89 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 62, statement groups: 62)]
placing IR statement 91 / 137 into current pipeline:
--- 90 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 63, statement groups: 63)]
placing IR statement 92 / 137 into current pipeline:
--- 91 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 64, statement groups: 64)]
placing IR statement 93 / 137 into current pipeline:
--- 92 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 65, statement groups: 65)]
placing IR statement 94 / 137 into current pipeline:
--- 93 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 66, statement groups: 66)]
placing IR statement 95 / 137 into current pipeline:
--- 94 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 67, statement groups: 67)]
placing IR statement 96 / 137 into current pipeline:
--- 95 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 68, statement groups: 68)]
placing IR statement 97 / 137 into current pipeline:
--- 96 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 69, statement groups: 69)]
placing IR statement 98 / 137 into current pipeline:
--- 97 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 70, statement groups: 70)]
placing IR statement 99 / 137 into current pipeline:
--- 98 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 71, statement groups: 71)]
placing IR statement 100 / 137 into current pipeline:
--- 99 IR statements in 7 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 1 tables: [(branches: 97, IR statements: 72, statement groups: 72)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 101 / 137 into current pipeline:
--- 100 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 1, statement groups: 1)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 102 / 137 into current pipeline:
--- 101 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 2, statement groups: 2)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 103 / 137 into current pipeline:
--- 102 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 3, statement groups: 3)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 104 / 137 into current pipeline:
--- 103 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 4, statement groups: 4)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 105 / 137 into current pipeline:
--- 104 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 5, statement groups: 5)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 106 / 137 into current pipeline:
--- 105 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 6, statement groups: 6)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 107 / 137 into current pipeline:
--- 106 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 7, statement groups: 7)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 108 / 137 into current pipeline:
--- 107 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 8, statement groups: 8)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 109 / 137 into current pipeline:
--- 108 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 9, statement groups: 9)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 110 / 137 into current pipeline:
--- 109 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 10, statement groups: 10)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 111 / 137 into current pipeline:
--- 110 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 11, statement groups: 11)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 112 / 137 into current pipeline:
--- 111 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 12, statement groups: 12)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 113 / 137 into current pipeline:
--- 112 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 13, statement groups: 13)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 114 / 137 into current pipeline:
--- 113 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 14, statement groups: 14)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 115 / 137 into current pipeline:
--- 114 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 15, statement groups: 15)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 116 / 137 into current pipeline:
--- 115 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 16, statement groups: 16)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 117 / 137 into current pipeline:
--- 116 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 17, statement groups: 17)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 118 / 137 into current pipeline:
--- 117 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 18, statement groups: 18)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 119 / 137 into current pipeline:
--- 118 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 19, statement groups: 19)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 120 / 137 into current pipeline:
--- 119 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 20, statement groups: 20)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 121 / 137 into current pipeline:
--- 120 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 21, statement groups: 21)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 122 / 137 into current pipeline:
--- 121 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 22, statement groups: 22)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 123 / 137 into current pipeline:
--- 122 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 23, statement groups: 23)]
[table_fits] FAIL!
[table_fits] c_stmts: false c_keywidth: true c_hashers: true c_arrays: true
placing IR statement 124 / 137 into current pipeline:
--- 123 IR statements in 8 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 125 / 137 into current pipeline:
--- 124 IR statements in 9 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 126 / 137 into current pipeline:
--- 125 IR statements in 9 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 127 / 137 into current pipeline:
--- 126 IR statements in 9 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 128 / 137 into current pipeline:
--- 127 IR statements in 9 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 132 / 137 into current pipeline:
--- 131 IR statements in 10 physical tables across 7 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 133 / 137 into current pipeline:
--- 132 IR statements in 11 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 1, statement groups: 1)]
placing IR statement 134 / 137 into current pipeline:
--- 133 IR statements in 11 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 135 / 137 into current pipeline:
--- 134 IR statements in 12 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 8 -- 1 tables: [(branches: 7, IR statements: 1, statement groups: 1)]
placing IR statement 136 / 137 into current pipeline:
--- 135 IR statements in 12 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 8 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
placing IR statement 137 / 137 into current pipeline:
--- 136 IR statements in 12 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 8 -- 1 tables: [(branches: 7, IR statements: 3, statement groups: 3)]
[try_place_in_stage] attempting to create new table in stage.
[coreLayoutNew] final pipeline
--- 137 IR statements in 13 physical tables across 10 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 14, statement groups: 14)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
stage 2 -- 3 tables: [(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1),(branches: 4, IR statements: 2, statement groups: 1)]
stage 3 -- 1 tables: [(branches: 4, IR statements: 3, statement groups: 3)]
stage 4 -- 2 tables: [(branches: 97, IR statements: 72, statement groups: 72),(branches: 25, IR statements: 24, statement groups: 24)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 7 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 8 -- 1 tables: [(branches: 7, IR statements: 3, statement groups: 3)]
stage 9 -- 1 tables: [(branches: 4, IR statements: 1, statement groups: 1)]
----------- after layout ------- 
entry event Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src);
event Consensus_success(int<<32>> Consensus_success_idx);
global Array.t<<32>> assigned_var_msrea = Array.create(1024);

global Array.t<<32>> assigned_var_msrec = Array.create(1024);

global Array.t<<32>> assigned_var_msree = Array.create(1024);

global Array.t<<8>> msre = Array.create(1024);

memop msrememop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+f==4)
cell1=(b1||b2 -> g|4), (!b1&&!b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop1(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f>8);
b2=(b2,memval+0!=8)
cell1=(b1&&b2 -> g^^4), (!b1&&b2 -> g+memval)
cell2=None, None

ret=(true -> cell1)
}}
memop msrememop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g>8);
b2=(b2,memval+0>8)
cell1=(b1&&b2 -> f^^4), (!b1&&b2 -> f+memval)
cell2=None, None

ret=(true -> cell1)
}}
event msrereset(int<<32>> msrereset_msreidx);
handle Consensus_success(int<<32>> Consensus_success_idx) {

}
handle msrereset(int<<32>> msrereset_msreidx) {

}
handle Paxos(int<<32>> Paxos_idx,int<<8>> Paxos_ty,int<<32>> Paxos_l1,int<<32>> Paxos_l2,int<<32>> Paxos_l3,int<<32>> Paxos_src) {

}
// shared locals:
int<<32>> msre_idx_3724;
int<<32>> assigned_var_msree_idx_3723;
int<<32>> assigned_var_msrec_idx_3722;
int<<32>> assigned_var_msrea_idx_3721;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.Consensus_success(Consensus_success_idx);
}
| 3 -> {
assigned_var_msrea_idx_3721 = msrereset_msreidx;
assigned_var_msrec_idx_3722 = msrereset_msreidx;
assigned_var_msree_idx_3723 = msrereset_msreidx;
msre_idx_3724 = msrereset_msreidx;
}
| 1 -> {
int<<1>> ansmsre = 1;
int<<32>> msreidx = Paxos_idx;
int<<8>> f_synthesized_meta_varmsre = 0;
int<<8>> g_synthesized_meta_varmsre = 0;
int<<8>> memop_synthesized_meta_varmsre = 0;
int<<8>> pred3msre = Paxos_ty-1;
int<<8>> pred4msre = Paxos_ty-0;
int<<8>> resmsre = 0;
}
| _ -> {

}
// Stage 1
match event_id with 
| 2 -> {

}
| 3 -> {
Sys.invalidate.msrereset(msrereset_msreidx);
}
| 1 -> {
assigned_var_msree_idx_3723 = msreidx;
assigned_var_msrec_idx_3722 = msreidx;
assigned_var_msrea_idx_3721 = msreidx;
}
| _ -> {

}
// Stage 2
match event_id with 
| 2 -> {

}
| 3 -> {
Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,set_3710,0,0,0);
}
| 1 -> {
int<<32>> e = Array.update_complex(assigned_var_msree,assigned_var_msree_idx_3723,re12351sdaCheckThenSet,Paxos_l3,0,0);
}
| _ -> {

}
match event_id with 
| 2 -> {

}
| 3 -> {
Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,set_3706,0,0,0);
}
| 1 -> {
int<<32>> c = Array.update_complex(assigned_var_msrec,assigned_var_msrec_idx_3722,re12351sdaCheckThenSet,Paxos_l2,0,0);
}
| _ -> {

}
match event_id with 
| 2 -> {

}
| 3 -> {
Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,set_3702,0,0,0);
}
| 1 -> {
int<<32>> a = Array.update_complex(assigned_var_msrea,assigned_var_msrea_idx_3721,re12351sdaCheckThenSet,Paxos_l1,0,0);
}
| _ -> {

}
// Stage 3
match event_id with 
| 2 -> {

}
| 3 -> {

}
| 1 -> {
int<<32>> pred2msre = Paxos_l3-e;
int<<32>> pred1msre = Paxos_l2-c;
int<<32>> pred0msre = Paxos_l1-a;
}
| _ -> {

}
// Stage 4
match (pred4msre,pred3msre,pred2msre,pred1msre,pred0msre,event_id) with 
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {

}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {

}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {

}
| 0,0,_,0b1*******************************,0b1*******************************,2 -> {

}
| 0,0,_,0b1*******************************,0b1*******************************,3 -> {

}
| 0,0,_,0b1*******************************,0b1*******************************,1 -> {

}
| 0,0,0b1*******************************,_,0b1*******************************,2 -> {

}
| 0,0,0b1*******************************,_,0b1*******************************,3 -> {

}
| 0,0,0b1*******************************,_,0b1*******************************,1 -> {

}
| 0,0,0b1*******************************,0b1*******************************,_,2 -> {

}
| 0,0,0b1*******************************,0b1*******************************,_,3 -> {

}
| 0,0,0b1*******************************,0b1*******************************,_,1 -> {

}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {

}
| _,0,_,0b1*******************************,0b1*******************************,2 -> {

}
| _,0,_,0b1*******************************,0b1*******************************,3 -> {

}
| _,0,_,0b1*******************************,0b1*******************************,1 -> {

}
| 0,_,_,0b1*******************************,0b1*******************************,2 -> {

}
| 0,_,_,0b1*******************************,0b1*******************************,3 -> {

}
| 0,_,_,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| _,0,0b1*******************************,_,0b1*******************************,2 -> {

}
| _,0,0b1*******************************,_,0b1*******************************,3 -> {

}
| _,0,0b1*******************************,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| 0,_,0b1*******************************,_,0b1*******************************,2 -> {

}
| 0,_,0b1*******************************,_,0b1*******************************,3 -> {

}
| 0,_,0b1*******************************,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| 0,0,_,_,0b1*******************************,2 -> {

}
| 0,0,_,_,0b1*******************************,3 -> {

}
| 0,0,_,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| _,0,0b1*******************************,0b1*******************************,_,2 -> {

}
| _,0,0b1*******************************,0b1*******************************,_,3 -> {

}
| _,0,0b1*******************************,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 1;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| 0,_,0b1*******************************,0b1*******************************,_,2 -> {

}
| 0,_,0b1*******************************,0b1*******************************,_,3 -> {

}
| 0,_,0b1*******************************,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 1;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| 0,0,_,0b1*******************************,_,2 -> {

}
| 0,0,_,0b1*******************************,_,3 -> {

}
| 0,0,_,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| 0,0,0b1*******************************,_,_,2 -> {

}
| 0,0,0b1*******************************,_,_,3 -> {

}
| 0,0,0b1*******************************,_,_,1 -> {
memop_synthesized_meta_varmsre = 1;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 14;
}
| _,_,_,0b1*******************************,0b1*******************************,2 -> {

}
| _,_,_,0b1*******************************,0b1*******************************,3 -> {

}
| _,_,_,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 20;
f_synthesized_meta_varmsre = 248;
}
| _,_,0b1*******************************,_,0b1*******************************,2 -> {

}
| _,_,0b1*******************************,_,0b1*******************************,3 -> {

}
| _,_,0b1*******************************,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| _,0,_,_,0b1*******************************,2 -> {

}
| _,0,_,_,0b1*******************************,3 -> {

}
| _,0,_,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| 0,_,_,_,0b1*******************************,2 -> {

}
| 0,_,_,_,0b1*******************************,3 -> {

}
| 0,_,_,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| _,_,0b1*******************************,0b1*******************************,_,2 -> {

}
| _,_,0b1*******************************,0b1*******************************,_,3 -> {

}
| _,_,0b1*******************************,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| _,0,_,0b1*******************************,_,2 -> {

}
| _,0,_,0b1*******************************,_,3 -> {

}
| _,0,_,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| 0,_,_,0b1*******************************,_,2 -> {

}
| 0,_,_,0b1*******************************,_,3 -> {

}
| 0,_,_,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| _,0,0b1*******************************,_,_,2 -> {

}
| _,0,0b1*******************************,_,_,3 -> {

}
| _,0,0b1*******************************,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 13;
}
| 0,_,0b1*******************************,_,_,2 -> {

}
| 0,_,0b1*******************************,_,_,3 -> {

}
| 0,_,0b1*******************************,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 14;
}
| 0,0,_,_,_,2 -> {

}
| 0,0,_,_,_,3 -> {

}
| 0,0,_,_,_,1 -> {
memop_synthesized_meta_varmsre = 1;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 13;
}
| _,_,_,_,0b1*******************************,2 -> {

}
| _,_,_,_,0b1*******************************,3 -> {

}
| _,_,_,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 188;
f_synthesized_meta_varmsre = 248;
}
| _,_,_,0b1*******************************,_,2 -> {

}
| _,_,_,0b1*******************************,_,3 -> {

}
| _,_,_,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 21;
}
| _,_,0b1*******************************,_,_,2 -> {

}
| _,_,0b1*******************************,_,_,3 -> {

}
| _,_,0b1*******************************,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 14;
}
| _,0,_,_,_,2 -> {

}
| _,0,_,_,_,3 -> {

}
| _,0,_,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 14;
}
| 0,_,_,_,_,2 -> {

}
| 0,_,_,_,_,3 -> {

}
| 0,_,_,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 13;
}
| _,_,_,_,_,2 -> {

}
| _,_,_,_,_,3 -> {

}
| _,_,_,_,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 252;
f_synthesized_meta_varmsre = 56;
}
| _,_,_,_,_,_ -> {

}
match (pred4msre,pred3msre,pred2msre,pred1msre,pred0msre,event_id) with 
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| 0,0,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| _,0,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| 0,_,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| 0,0,_,0b1*******************************,0b1*******************************,2 -> {

}
| 0,0,_,0b1*******************************,0b1*******************************,3 -> {

}
| 0,0,_,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| 0,0,0b1*******************************,_,0b1*******************************,2 -> {

}
| 0,0,0b1*******************************,_,0b1*******************************,3 -> {

}
| 0,0,0b1*******************************,_,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 8;
}
| 0,0,0b1*******************************,0b1*******************************,_,2 -> {

}
| 0,0,0b1*******************************,0b1*******************************,_,3 -> {

}
| 0,0,0b1*******************************,0b1*******************************,_,1 -> {
memop_synthesized_meta_varmsre = 0;
g_synthesized_meta_varmsre = 248;
f_synthesized_meta_varmsre = 16;
}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,2 -> {

}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,3 -> {

}
| _,_,0b1*******************************,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| _,0,_,0b1*******************************,0b1*******************************,2 -> {

}
| _,0,_,0b1*******************************,0b1*******************************,3 -> {

}
| _,0,_,0b1*******************************,0b1*******************************,1 -> {
memop_synthesized_meta_varmsre = 2;
g_synthesized_meta_varmsre = 16;
f_synthesized_meta_varmsre = 248;
}
| _,_,_,_,_,_ -> {

}
// Stage 5
match (memop_synthesized_meta_varmsre,event_id) with 
| 0,2 -> {

}
| 0,3 -> {

}
| 0,1 -> {
msre_idx_3724 = msreidx;
}
| 1,2 -> {

}
| 1,3 -> {

}
| 1,1 -> {
msre_idx_3724 = msreidx;
}
| 2,2 -> {

}
| 2,3 -> {

}
| 2,1 -> {
msre_idx_3724 = msreidx;
}
| _,2 -> {

}
| _,3 -> {

}
| _,1 -> {

}
| _,_ -> {

}
// Stage 6
match (event_id,memop_synthesized_meta_varmsre) with 
| 2,0 -> {

}
| 3,0 -> {
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
}
| 1,0 -> {
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop0,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2,1 -> {

}
| 3,1 -> {
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
}
| 1,1 -> {
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop1,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2,2 -> {

}
| 3,2 -> {
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
}
| 1,2 -> {
resmsre = Array.update_complex(msre,msre_idx_3724,msrememop2,f_synthesized_meta_varmsre,g_synthesized_meta_varmsre,0);
}
| 2,_ -> {

}
| 3,_ -> {
Array.update_complex(msre,msre_idx_3724,set_3714,0,0,0);
}
| _,_ -> {

}
// Stage 7
match (resmsre,event_id) with 
| 232,2 -> {

}
| 232,3 -> {

}
| 232,1 -> {
ansmsre = 1;
}
| _,2 -> {

}
| _,3 -> {

}
| _,1 -> {
ansmsre = 0;
}
| _,_ -> {

}
// Stage 8
match (ansmsre,event_id) with 
| 1,2 -> {

}
| 1,3 -> {

}
| 1,1 -> {
generate Consensus_success(Paxos_idx);
recirc_mcid = recirc_mcid+1;
}
| _,2 -> {

}
| _,3 -> {

}
| _,1 -> {

}
| _,_ -> {

}
// Stage 9
match event_id with 
| 2 -> {

}
| 3 -> {

}
| 1 -> {
Sys.invalidate.Paxos(Paxos_idx,Paxos_ty,Paxos_l1,Paxos_l2,Paxos_l3,Paxos_src);
}
| _ -> {

}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3720)
 {{
b1=None;
b2=(mbool_3719,memval==0)
cell1=None, None
cell2=(mbool_3719 -> newval), (!mbool_3719 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3718)
 {{
b1=None;
b2=(mbool_3717,memval==0)
cell1=None, None
cell2=(mbool_3717 -> newval), (!mbool_3717 -> memval)

ret=(true -> cell2)
}}
memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval,int<<32>> unused_3716)
 {{
b1=None;
b2=(mbool_3715,memval==0)
cell1=None, None
cell2=(mbool_3715 -> newval), (!mbool_3715 -> memval)

ret=(true -> cell2)
}}
memop set_3714(int<<8>> mem_val_3713,int<<8>> new_val_3711,int<<8>> unused_3712)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3711), None
cell2=None, None

ret=None
}}
memop set_3710(int<<32>> mem_val_3709,int<<32>> new_val_3707,int<<32>> unused_3708)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3707), None
cell2=None, None

ret=None
}}
memop set_3706(int<<32>> mem_val_3705,int<<32>> new_val_3703,int<<32>> unused_3704)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3703), None
cell2=None, None

ret=None
}}
memop set_3702(int<<32>> mem_val_3701,int<<32>> new_val_3699,int<<32>> unused_3700)
 {{
b1=None;
b2=None
cell1=(true -> new_val_3699), None
cell2=None, None

ret=None
}}
----------- after layout ------- 
compiler: Compilation to P4 finished. Writing to build directory:lucid_tofino_build
Packager: Packaging lucid tofino app in: lucid_tofino_build
Packager: copying runtime libraries from: /Users/aj3189/workspace/lucid/tofinoLibs
Packager: Lucid app generation complete in: lucid_tofino_build
