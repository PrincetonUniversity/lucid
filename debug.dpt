compiler: Compilation to P4 started...
------- port configuration -------
recirc dpid: 196
lucid internal ports: 
lucid external ports: 128@10Gb/s, 129@10Gb/s, 130@10Gb/s, 131@10Gb/s
port-event bindings: 
compiler: Starting P4-Tofino compilation. Using switch port configuration: 
recirc dpid: 196
lucid internal ports: 
lucid external ports: 128@10Gb/s, 129@10Gb/s, 130@10Gb/s, 131@10Gb/s
port-event bindings: 
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

Alphabet sizes = S8S7S6S5S4S3S2S1

global Array.t<<32>> arr = Array.create(256);


spec RE_fingerprint_videoA event TODO: EVENT SPEC TO STRING

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,sip,dip,sport,dport);
if (s>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10) {
S = S1();
} else {
if (10<s&&s<=20) {
S = S2();
} else {
if (20<s&&s<=30) {
S = S3();
} else {
if (30<s&&s<=40) {
S = S4();
} else {
if (40<s&&s<=50) {
S = S5();
} else {
if (50<s&&s<=60) {
S = S6();
} else {
if (60<s&&s<=70) {
S = S7();
} else {
if (70<s&&s<=80) {
S = S8();
} 
}
}
}
}
}
}
}
if (transition(RE_fingerprint_videoA, idx, S)) {
generate match_report();
} 
}
}
dpt: -------Checking well-formedness---------
dpt: ----------Elim alphabet-------
dpt: ----------Elim spec-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256);


spec RE_fingerprint_videoA event TODO: EVENT SPEC TO STRING

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,sip,dip,sport,dport);
if (s>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10) {
S = S1();
} else {
if (10<s&&s<=20) {
S = S2();
} else {
if (20<s&&s<=30) {
S = S3();
} else {
if (30<s&&s<=40) {
S = S4();
} else {
if (40<s&&s<=50) {
S = S5();
} else {
if (50<s&&s<=60) {
S = S6();
} else {
if (60<s&&s<=70) {
S = S7();
} else {
if (70<s&&s<=80) {
S = S8();
} 
}
}
}
}
}
}
}
if (transition(RE_fingerprint_videoA, idx, S)) {
generate match_report();
} 
}
}
dpt: ----------Elim regex-------
Status is unknown. Time spent on synthesis is 1.953125
States map has size 10"":32
0:4
S2:252
(S1 . S2):228
(S1 . (S4 . (S7 . (S8 . (S1 . S2))))):1
(S1 . (S5 . (S1 . (S4 . (S7 . (S8 . (S1 . S2))))))):0
(S4 . (S7 . (S8 . (S1 . S2)))):125
(S5 . (S1 . (S4 . (S7 . (S8 . (S1 . S2)))))):124
(S7 . (S8 . (S1 . S2))):5
(S8 . (S1 . S2)):33
solved.S1: 0
S2: 1
S3: 2
S4: 3
S5: 4
S6: 5
S7: 6
S8: 7
States
""
0
S2
(S1 . S2)
(S1 . (S4 . (S7 . (S8 . (S1 . S2)))))
(S1 . (S5 . (S1 . (S4 . (S7 . (S8 . (S1 . S2)))))))
(S4 . (S7 . (S8 . (S1 . S2))))
(S5 . (S1 . (S4 . (S7 . (S8 . (S1 . S2))))))
(S7 . (S8 . (S1 . S2)))
(S8 . (S1 . S2))
Alphabet
S1
S2
S3
S4
S5
S6
S7
S8
(S1 . (S5 . (S1 . (S4 . (S7 . (S8 . (S1 . S2)))))))decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,sip,dip,sport,dport);
if (s>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10) {
S = S1();
} else {
if (10<s&&s<=20) {
S = S2();
} else {
if (20<s&&s<=30) {
S = S3();
} else {
if (30<s&&s<=40) {
S = S4();
} else {
if (40<s&&s<=50) {
S = S5();
} else {
if (50<s&&s<=60) {
S = S6();
} else {
if (60<s&&s<=70) {
S = S7();
} else {
if (70<s&&s<=80) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------typing1---------
dpt: ---------Concretizing symbolics-------------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------Aliasing Modules-------------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------Making returns explicit-------------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -----------renaming-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -------Eliminating modules---------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -------Inlining size declarations---------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~224>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~368>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------typing2---------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1048>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -------Eliminating type aliases 2---------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1048>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -----------inlining functions-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1325>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -----------inlining tables-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

exit event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1325>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -----------Assigning extern events default handlers-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

handle match_report() {

}

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1325>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------Eliminating events with global arguments----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~909>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1480>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: ---------------typing3-------------
dpt: -------Eliminating vectors-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -----------re-renaming-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
if ({bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}; return ansRE_fingerprint_videoA}) {
generate match_report();
} 
}
}
dpt: -------Eliminating EStmts-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Eliminating records-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Eliminating tuples-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

const type_A int<<32>> = 1;

const type_B int<<32>> = 2;

const type_C int<<32>> = 3;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Inlining Constants-------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -----------re-re-renaming-----------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~1788>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~1927>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: ---------------typing again-------------
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size) ;

event match_report() ;

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;}

event S1() ;

event S2() ;

event S3() ;

event S4() ;

event S5() ;

event S6() ;

event S7() ;

event S8() ;

global Array.t<<32>> arr = Array.create(256<<?sz~2512>>);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=1;
bool b2 = memval+g!=8;
if (b1&&b2) {
cell1 = 6^^2;
} else {
if (true) {
cell1 = g|0;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+g==8;
bool b2 = memval+0<4;
if (b1||b2) {
cell1 = f|memval;
} else {
if (true) {
cell1 = 5^^1;
} 
}
if (true) {
return cell1;
} }

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>8;
bool b2 = memval+g>8;
if (b1&&b2) {
cell1 = 5&memval;
} else {
if (true) {
cell1 = 2^^6;
} 
}
if (true) {
return cell1;
} }

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) ;

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13<<'sz~2648>>,sip,dip,sport,dport);
if (s>130<<16>>) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
event S = S1();
if (s<=10<<16>>) {
S = S1();
} else {
if (10<<16>><s&&s<=20<<16>>) {
S = S2();
} else {
if (20<<16>><s&&s<=30<<16>>) {
S = S3();
} else {
if (30<<16>><s&&s<=40<<16>>) {
S = S4();
} else {
if (40<<16>><s&&s<=50<<16>>) {
S = S5();
} else {
if (50<<16>><s&&s<=60<<16>>) {
S = S6();
} else {
if (60<<16>><s&&s<=70<<16>>) {
S = S7();
} else {
if (70<<16>><s&&s<=80<<16>>) {
S = S8();
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S with 
| S1 -> {
counterRE_fingerprint_videoA = 0;
}
| S2 -> {
counterRE_fingerprint_videoA = 1;
}
| S3 -> {
counterRE_fingerprint_videoA = 2;
}
| S4 -> {
counterRE_fingerprint_videoA = 3;
}
| S5 -> {
counterRE_fingerprint_videoA = 4;
}
| S6 -> {
counterRE_fingerprint_videoA = 5;
}
| S7 -> {
counterRE_fingerprint_videoA = 6;
}
| S8 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
-------Eliminating events in match statements---------
REPLACED LOCAL DEF
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
REPLACED LOCAL ASSIGN
decls: 
dpt: entry event packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> sip,int<<32>> dip,int<<16>> sport,int<<16>> dport,int<<16>> s) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,sip,dip,sport,dport);
if (s>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
event S = S1();
if (s<=10) {
S_event_int = 3;
} else {
if (10<s&&s<=20) {
S_event_int = 4;
} else {
if (20<s&&s<=30) {
S_event_int = 5;
} else {
if (30<s&&s<=40) {
S_event_int = 6;
} else {
if (40<s&&s<=50) {
S_event_int = 7;
} else {
if (50<s&&s<=60) {
S_event_int = 8;
} else {
if (60<s&&s<=70) {
S_event_int = 9;
} else {
if (70<s&&s<=80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
printf "state machine transitioned to %d" resRE_fingerprint_videoA;
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Eliminating interpreter-only operations--------
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<=10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<=20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<=30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<=40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<=50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<=60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<=70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<=80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Eliminating value cast ops--------
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<=10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<=20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<=30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<=40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<=50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<=60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<=70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<=80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Eliminating range relational ops--------
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<10||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<20||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<30||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<40||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<50||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<60||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<70||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<80||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Adding default branches--------
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<10||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<20||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<30||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<40||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<50||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<60||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<70||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<80||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<10||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<20||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<30||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<40||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<50||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<60||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<70||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<80||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Making variables in if / match conditions constants--------
Tofino translation: making branch variables single assignment
Tofino translation: partial ssa finished
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<32>> idx = (int<<32>>)hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
if (packet_in_pkt_size>130) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
if (packet_in_pkt_size<10||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
if (10<packet_in_pkt_size&&packet_in_pkt_size<20||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
if (20<packet_in_pkt_size&&packet_in_pkt_size<30||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
if (30<packet_in_pkt_size&&packet_in_pkt_size<40||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
if (40<packet_in_pkt_size&&packet_in_pkt_size<50||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
if (50<packet_in_pkt_size&&packet_in_pkt_size<60||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
if (60<packet_in_pkt_size&&packet_in_pkt_size<70||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
if (70<packet_in_pkt_size&&packet_in_pkt_size<80||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
bool ansRE_fingerprint_videoA = true;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = true;
}
| _ -> {
ansRE_fingerprint_videoA = false;
}
if (ansRE_fingerprint_videoA) {
generate match_report();
} 
}
}
dpt: -------Breaking down compound expressions--------
Tofino translation: Starting cannonization before IR...
Tofino translation: boolean elimination complete. 
Tofino translation: Normalizing relational ops...
Tofino translation: Normalizing if expressions...
Tofino translation: if-else cannonization complete.
Tofino translation: immediate elimination complete.
normalizeIntOps: assignments transformed to balanced exps
normalizeIntOps: expressions atomized
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
if (if_precomp!=0) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp = 10|-|packet_in_pkt_size;
if (if_precomp!=0||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|10;
int<<16>> if_precomp = 20|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|20;
int<<16>> if_precomp = 30|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|30;
int<<16>> if_precomp = 40|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|40;
int<<16>> if_precomp = 50|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|50;
int<<16>> if_precomp = 60|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|60;
int<<16>> if_precomp = 70|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
int<<16>> if_precomp = packet_in_pkt_size|-|70;
int<<16>> if_precomp = 80|-|packet_in_pkt_size;
if (if_precomp!=0&&if_precomp!=0||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
if (ansRE_fingerprint_videoA==1) {
generate match_report();
} 
}
}
decls: 
dpt: entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);

event match_report();

memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}

memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}

memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}

event S1();

event S2();

event S3();

event S4();

event S5();

event S6();

event S7();

event S8();

global Array.t<<32>> arr = Array.create(256);


memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);


memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}

memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}

event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);

handle match_report() {

}

handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}

handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
if (if_precomp!=0) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
if (if_precomp2921!=0||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
if (if_precomp2919!=0&&if_precomp2920!=0||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
if (if_precomp2917!=0&&if_precomp2918!=0||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
if (if_precomp2915!=0&&if_precomp2916!=0||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
if (if_precomp2913!=0&&if_precomp2914!=0||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
if (if_precomp2911!=0&&if_precomp2912!=0||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
if (if_precomp2909!=0&&if_precomp2910!=0||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
if (if_precomp2907!=0&&if_precomp2908!=0||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
if (ansRE_fingerprint_videoA==1) {
generate match_report();
} 
}
}
----------- initial tofinoCore program------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}
memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}
memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}
global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 11 -> {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
if (if_precomp!=0) {
Array.setm(arr,idx,incr,1);
} else {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
if (if_precomp2921!=0||packet_in_pkt_size==10) {
S_event_int = 3;
} else {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
if (if_precomp2919!=0&&if_precomp2920!=0||packet_in_pkt_size==20) {
S_event_int = 4;
} else {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
if (if_precomp2917!=0&&if_precomp2918!=0||packet_in_pkt_size==30) {
S_event_int = 5;
} else {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
if (if_precomp2915!=0&&if_precomp2916!=0||packet_in_pkt_size==40) {
S_event_int = 6;
} else {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
if (if_precomp2913!=0&&if_precomp2914!=0||packet_in_pkt_size==50) {
S_event_int = 7;
} else {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
if (if_precomp2911!=0&&if_precomp2912!=0||packet_in_pkt_size==60) {
S_event_int = 8;
} else {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
if (if_precomp2909!=0&&if_precomp2910!=0||packet_in_pkt_size==70) {
S_event_int = 9;
} else {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
if (if_precomp2907!=0&&if_precomp2908!=0||packet_in_pkt_size==80) {
S_event_int = 10;
} 
}
}
}
}
}
}
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
if (ansRE_fingerprint_videoA==1) {
generate match_report();
} 
}
}}
----------- initial tofinoCore program------- 
----------- after IfToMatch ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
memop get_stored(int<<32>> stored,int<<32>> dummy)
 {return stored;
}
memop wipe(int<<32>> stored,int<<32>> dummy)
 {return 0;
}
memop incr(int<<32>> stored_ct,int<<32>> incr_by)
 {return stored_ct+incr_by;
}
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

memop re12351sdaCheckThenSet(int<<32>> memval,int<<32>> newval)
 {if memval==0 then newval else memval}
global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (true -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (true -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (true -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 11 -> {
Array.set(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,0);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update(arr,idx,get_stored,0,wipe,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.setm(arr,idx,incr,1);
}
}}
----------- after IfToMatch ------- 
----------- after RegularizeMemops ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:

// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 11 -> {
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAreset_RE_fingerprint_videoAidx,set_2928,0,0,0);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoAidx,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after RegularizeMemops ------- 
----------- after ShareMemopInputs ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:
int<<32>> RE_fingerprint_videoA_idx_2935;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {

}
| 11 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAreset_RE_fingerprint_videoAidx;
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after ShareMemopInputs ------- 
----------- after Generates.eliminate ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:
int<<32>> RE_fingerprint_videoA_idx_2935;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.match_report();
}
| 11 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAreset_RE_fingerprint_videoAidx;
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
Sys.invalidate.RE_fingerprint_videoAreset(RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after Generates.eliminate ------- 
----------- after SingleTableMatch ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:
int<<32>> RE_fingerprint_videoA_idx_2935;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.match_report();
}
| 11 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAreset_RE_fingerprint_videoAidx;
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
Sys.invalidate.RE_fingerprint_videoAreset(RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after SingleTableMatch ------- 
----------- after ActionsToFunctions ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:
int<<32>> RE_fingerprint_videoA_idx_2935;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.match_report();
}
| 11 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAreset_RE_fingerprint_videoAidx;
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
Sys.invalidate.RE_fingerprint_videoAreset(RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<16>> if_precomp = packet_in_pkt_size|-|130;
match if_precomp with 
| 0 -> {
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<8>> S_event_int = 3;
int<<32>> Spacket_insipevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
match (if_precomp2921,packet_in_pkt_size) with 
| 0,10 -> {
S_event_int = 3;
}
| 0,_ -> {
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
match (if_precomp2919,if_precomp2920,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
match (if_precomp2917,if_precomp2918,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
match (if_precomp2915,if_precomp2916,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
match (if_precomp2913,if_precomp2914,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
match (if_precomp2911,if_precomp2912,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
match (if_precomp2909,if_precomp2910,packet_in_pkt_size) with 
| 0,_,_ -> {
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
match (if_precomp2907,if_precomp2908,packet_in_pkt_size) with 
| 0,_,_ -> {

}
| _,_,_ -> {
S_event_int = 10;
}
}
| _,_,_ -> {
S_event_int = 9;
}
}
| _,_,_ -> {
S_event_int = 8;
}
}
| _,_,_ -> {
S_event_int = 7;
}
}
| _,_,_ -> {
S_event_int = 6;
}
}
| _,_,_ -> {
S_event_int = 5;
}
}
| _,_,_ -> {
S_event_int = 4;
}
}
| _,_ -> {
S_event_int = 3;
}
int<<1>> ansRE_fingerprint_videoA = 1;
int<<32>> RE_fingerprint_videoAidx = idx;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
match S_event_int with 
| 3 -> {
counterRE_fingerprint_videoA = 0;
}
| 4 -> {
counterRE_fingerprint_videoA = 1;
}
| 5 -> {
counterRE_fingerprint_videoA = 2;
}
| 6 -> {
counterRE_fingerprint_videoA = 3;
}
| 7 -> {
counterRE_fingerprint_videoA = 4;
}
| 8 -> {
counterRE_fingerprint_videoA = 5;
}
| 9 -> {
counterRE_fingerprint_videoA = 6;
}
| 10 -> {
counterRE_fingerprint_videoA = 7;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA = 0;
match counterRE_fingerprint_videoA with 
| 0 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 124;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
}
| 1 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 5;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 2 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 157;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 3 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 125;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
}
| 4 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 133;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 5 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 134;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 6 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 252;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| 7 -> {
f_synthesized_meta_varRE_fingerprint_videoA = 224;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
}
| _ -> {

}
int<<8>> resRE_fingerprint_videoA2338 = 0;
match memop_synthesized_meta_varRE_fingerprint_videoA with 
| 0 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 3 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| _ -> {

}
match resRE_fingerprint_videoA2338 with 
| 32 -> {
ansRE_fingerprint_videoA = 1;
}
| _ -> {
ansRE_fingerprint_videoA = 0;
}
match ansRE_fingerprint_videoA with 
| 1 -> {
recirc_mcid = recirc_mcid+1;
generate match_report();
}
| _ -> {

}
}
| _ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after ActionsToFunctions ------- 
-------- layout ----------
number of nodes in dfg: 104
[dfg_to_sgdfg] number of vertex_stmts in statement_groups before constructing dfg: 104
[dfg_to_sgdfg] number of statement group nodes in dfg: 100
[dfg_to_sgdfg] number of vertex_stmts in dfg: 104
placing IR statement 1 / 104 into current pipeline:
--- 0 IR statements in 0 physical tables across 0 stages ---

[try_place_in_stage] attempting to create new table in stage.
placing IR statement 2 / 104 into current pipeline:
--- 1 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 1, IR statements: 1, statement groups: 1)]
placing IR statement 3 / 104 into current pipeline:
--- 2 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 2, IR statements: 2, statement groups: 2)]
placing IR statement 4 / 104 into current pipeline:
--- 3 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 3, IR statements: 3, statement groups: 3)]
placing IR statement 5 / 104 into current pipeline:
--- 4 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 4, statement groups: 4)]
placing IR statement 6 / 104 into current pipeline:
--- 5 IR statements in 1 physical tables across 1 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 7 / 104 into current pipeline:
--- 6 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 3, IR statements: 1, statement groups: 1)]
placing IR statement 8 / 104 into current pipeline:
--- 7 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 4, IR statements: 2, statement groups: 2)]
placing IR statement 9 / 104 into current pipeline:
--- 8 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 3, statement groups: 3)]
placing IR statement 10 / 104 into current pipeline:
--- 9 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 4, statement groups: 4)]
placing IR statement 11 / 104 into current pipeline:
--- 10 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 5, statement groups: 5)]
placing IR statement 12 / 104 into current pipeline:
--- 11 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 6, statement groups: 6)]
placing IR statement 13 / 104 into current pipeline:
--- 12 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 7, statement groups: 7)]
placing IR statement 14 / 104 into current pipeline:
--- 13 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 8, statement groups: 8)]
placing IR statement 15 / 104 into current pipeline:
--- 14 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 9, statement groups: 9)]
placing IR statement 16 / 104 into current pipeline:
--- 15 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 10, statement groups: 10)]
placing IR statement 17 / 104 into current pipeline:
--- 16 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 11, statement groups: 11)]
placing IR statement 18 / 104 into current pipeline:
--- 17 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 12, statement groups: 12)]
placing IR statement 19 / 104 into current pipeline:
--- 18 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 13, statement groups: 13)]
placing IR statement 20 / 104 into current pipeline:
--- 19 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 14, statement groups: 14)]
placing IR statement 21 / 104 into current pipeline:
--- 20 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 15, statement groups: 15)]
placing IR statement 22 / 104 into current pipeline:
--- 21 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 16, statement groups: 16)]
placing IR statement 23 / 104 into current pipeline:
--- 22 IR statements in 2 physical tables across 2 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 24 / 104 into current pipeline:
--- 23 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 4, IR statements: 1, statement groups: 1)]
placing IR statement 26 / 104 into current pipeline:
--- 25 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 7, IR statements: 3, statement groups: 2)]
placing IR statement 27 / 104 into current pipeline:
--- 26 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 3)]
placing IR statement 28 / 104 into current pipeline:
--- 27 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 5, statement groups: 4)]
placing IR statement 29 / 104 into current pipeline:
--- 28 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 6, statement groups: 5)]
placing IR statement 30 / 104 into current pipeline:
--- 29 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 7, statement groups: 6)]
placing IR statement 31 / 104 into current pipeline:
--- 30 IR statements in 3 physical tables across 3 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 32 / 104 into current pipeline:
--- 31 IR statements in 4 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 33 / 104 into current pipeline:
--- 32 IR statements in 4 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 34 / 104 into current pipeline:
--- 33 IR statements in 4 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 35 / 104 into current pipeline:
--- 34 IR statements in 4 physical tables across 4 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 36 / 104 into current pipeline:
--- 35 IR statements in 5 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 37 / 104 into current pipeline:
--- 36 IR statements in 5 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 38 / 104 into current pipeline:
--- 37 IR statements in 5 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 39 / 104 into current pipeline:
--- 38 IR statements in 5 physical tables across 5 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 40 / 104 into current pipeline:
--- 39 IR statements in 6 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 41 / 104 into current pipeline:
--- 40 IR statements in 6 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 42 / 104 into current pipeline:
--- 41 IR statements in 6 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 43 / 104 into current pipeline:
--- 42 IR statements in 6 physical tables across 6 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 44 / 104 into current pipeline:
--- 43 IR statements in 7 physical tables across 7 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 45 / 104 into current pipeline:
--- 44 IR statements in 7 physical tables across 7 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 46 / 104 into current pipeline:
--- 45 IR statements in 7 physical tables across 7 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 47 / 104 into current pipeline:
--- 46 IR statements in 7 physical tables across 7 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 48 / 104 into current pipeline:
--- 47 IR statements in 8 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 49 / 104 into current pipeline:
--- 48 IR statements in 8 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 50 / 104 into current pipeline:
--- 49 IR statements in 8 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 51 / 104 into current pipeline:
--- 50 IR statements in 8 physical tables across 8 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 52 / 104 into current pipeline:
--- 51 IR statements in 9 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 53 / 104 into current pipeline:
--- 52 IR statements in 9 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 54 / 104 into current pipeline:
--- 53 IR statements in 9 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 55 / 104 into current pipeline:
--- 54 IR statements in 9 physical tables across 9 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 56 / 104 into current pipeline:
--- 55 IR statements in 10 physical tables across 10 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 57 / 104 into current pipeline:
--- 56 IR statements in 10 physical tables across 10 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 58 / 104 into current pipeline:
--- 57 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 1, statement groups: 1)]
placing IR statement 59 / 104 into current pipeline:
--- 58 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 2, statement groups: 2)]
placing IR statement 60 / 104 into current pipeline:
--- 59 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 3, statement groups: 3)]
placing IR statement 61 / 104 into current pipeline:
--- 60 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 4, statement groups: 4)]
placing IR statement 62 / 104 into current pipeline:
--- 61 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 5, statement groups: 5)]
placing IR statement 63 / 104 into current pipeline:
--- 62 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 6, statement groups: 6)]
placing IR statement 64 / 104 into current pipeline:
--- 63 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 7, statement groups: 7)]
placing IR statement 65 / 104 into current pipeline:
--- 64 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 8, statement groups: 8)]
placing IR statement 66 / 104 into current pipeline:
--- 65 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 28, IR statements: 9, statement groups: 9)]
placing IR statement 67 / 104 into current pipeline:
--- 66 IR statements in 11 physical tables across 11 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 68 / 104 into current pipeline:
--- 67 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 1, statement groups: 1)]
placing IR statement 69 / 104 into current pipeline:
--- 68 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 2, statement groups: 2)]
placing IR statement 70 / 104 into current pipeline:
--- 69 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 3, statement groups: 3)]
placing IR statement 71 / 104 into current pipeline:
--- 70 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 4, statement groups: 4)]
placing IR statement 72 / 104 into current pipeline:
--- 71 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 5, statement groups: 5)]
placing IR statement 73 / 104 into current pipeline:
--- 72 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 6, statement groups: 6)]
placing IR statement 74 / 104 into current pipeline:
--- 73 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 7, statement groups: 7)]
placing IR statement 75 / 104 into current pipeline:
--- 74 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 8, statement groups: 8)]
placing IR statement 76 / 104 into current pipeline:
--- 75 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 9, statement groups: 9)]
placing IR statement 77 / 104 into current pipeline:
--- 76 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 10, statement groups: 10)]
placing IR statement 78 / 104 into current pipeline:
--- 77 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 11, statement groups: 11)]
placing IR statement 79 / 104 into current pipeline:
--- 78 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 12, statement groups: 12)]
placing IR statement 80 / 104 into current pipeline:
--- 79 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 13, statement groups: 13)]
placing IR statement 81 / 104 into current pipeline:
--- 80 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 14, statement groups: 14)]
placing IR statement 82 / 104 into current pipeline:
--- 81 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 15, statement groups: 15)]
placing IR statement 83 / 104 into current pipeline:
--- 82 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 16, statement groups: 16)]
placing IR statement 84 / 104 into current pipeline:
--- 83 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 17, statement groups: 17)]
placing IR statement 85 / 104 into current pipeline:
--- 84 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 18, statement groups: 18)]
placing IR statement 86 / 104 into current pipeline:
--- 85 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 19, statement groups: 19)]
placing IR statement 87 / 104 into current pipeline:
--- 86 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 20, statement groups: 20)]
placing IR statement 88 / 104 into current pipeline:
--- 87 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 21, statement groups: 21)]
placing IR statement 89 / 104 into current pipeline:
--- 88 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 22, statement groups: 22)]
placing IR statement 90 / 104 into current pipeline:
--- 89 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 23, statement groups: 23)]
placing IR statement 91 / 104 into current pipeline:
--- 90 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 24, statement groups: 24)]
placing IR statement 92 / 104 into current pipeline:
--- 91 IR statements in 12 physical tables across 12 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 93 / 104 into current pipeline:
--- 92 IR statements in 13 physical tables across 13 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 1, statement groups: 1)]
placing IR statement 94 / 104 into current pipeline:
--- 93 IR statements in 13 physical tables across 13 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
placing IR statement 95 / 104 into current pipeline:
--- 94 IR statements in 13 physical tables across 13 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 3, statement groups: 3)]
placing IR statement 96 / 104 into current pipeline:
--- 95 IR statements in 13 physical tables across 13 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 100 / 104 into current pipeline:
--- 99 IR statements in 14 physical tables across 14 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 101 / 104 into current pipeline:
--- 100 IR statements in 15 physical tables across 15 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 14 -- 1 tables: [(branches: 7, IR statements: 1, statement groups: 1)]
placing IR statement 102 / 104 into current pipeline:
--- 101 IR statements in 15 physical tables across 15 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 14 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
[try_place_in_stage] attempting to create new table in stage.
placing IR statement 103 / 104 into current pipeline:
--- 102 IR statements in 16 physical tables across 16 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 14 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 15 -- 1 tables: [(branches: 7, IR statements: 1, statement groups: 1)]
placing IR statement 104 / 104 into current pipeline:
--- 103 IR statements in 16 physical tables across 16 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 14 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 15 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
[coreLayoutNew] final pipeline
--- 104 IR statements in 16 physical tables across 16 stages ---
stage 0 -- 1 tables: [(branches: 4, IR statements: 5, statement groups: 5)]
stage 1 -- 1 tables: [(branches: 7, IR statements: 17, statement groups: 17)]
stage 2 -- 1 tables: [(branches: 13, IR statements: 8, statement groups: 7)]
stage 3 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 4 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 5 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 6 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 7 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 8 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 9 -- 1 tables: [(branches: 13, IR statements: 2, statement groups: 2)]
stage 10 -- 1 tables: [(branches: 31, IR statements: 10, statement groups: 10)]
stage 11 -- 1 tables: [(branches: 28, IR statements: 25, statement groups: 25)]
stage 12 -- 1 tables: [(branches: 13, IR statements: 4, statement groups: 4)]
stage 13 -- 1 tables: [(branches: 12, IR statements: 4, statement groups: 1)]
stage 14 -- 1 tables: [(branches: 7, IR statements: 2, statement groups: 2)]
stage 15 -- 1 tables: [(branches: 7, IR statements: 3, statement groups: 3)]
----------- after layout ------- 
entry event packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size);
event match_report();
event S1();
event S2();
event S3();
event S4();
event S5();
event S6();
event S7();
event S8();
global Array.t<<32>> arr = Array.create(256);

global Array.t<<8>> RE_fingerprint_videoA = Array.create(256);

memop RE_fingerprint_videoAmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+f!=1);
b2=(b2,memval+g!=8)
cell1=(b1&&b2 -> 6^^2), (!b1&&b2 -> g|0)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop2(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+g==8);
b2=(b2,memval+0<4)
cell1=(b1||b2 -> f|memval), (!b1&&!b2 -> 5^^1)
cell2=None, None

ret=(true -> cell1)
}}
memop RE_fingerprint_videoAmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {{
b1=(b1,memval+0>8);
b2=(b2,memval+g>8)
cell1=(b1&&b2 -> 5&memval), (!b1&&b2 -> 2^^6)
cell2=None, None

ret=(true -> cell1)
}}
event RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
handle match_report() {

}
handle RE_fingerprint_videoAreset(int<<32>> RE_fingerprint_videoAreset_RE_fingerprint_videoAidx) {

}
handle packet_in(int<<32>> packet_in_sip,int<<32>> packet_in_dip,int<<16>> packet_in_sport,int<<16>> packet_in_dport,int<<16>> packet_in_pkt_size) {

}
// shared locals:
int<<32>> RE_fingerprint_videoA_idx_2935;
// MAIN HANDLER 
handler main(...){
// Stage 0
match event_id with 
| 2 -> {
Sys.invalidate.match_report();
}
| 11 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAreset_RE_fingerprint_videoAidx;
}
| 1 -> {
int<<8>> to_immediate_tmp = hash<<8>>(13,packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport);
int<<16>> if_precomp = packet_in_pkt_size|-|130;
}
| _ -> {

}
// Stage 1
match (event_id,if_precomp) with 
| 2,0 -> {

}
| 11,0 -> {
Sys.invalidate.RE_fingerprint_videoAreset(RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
}
| 1,0 -> {
int<<32>> idx = (int<<32>>)to_immediate_tmp;
int<<8>> resRE_fingerprint_videoA2338 = 0;
int<<8>> resRE_fingerprint_videoA = 0;
int<<8>> counterRE_fingerprint_videoA = 0;
int<<8>> memop_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> g_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<8>> f_synthesized_meta_varRE_fingerprint_videoA = 0;
int<<1>> ansRE_fingerprint_videoA = 1;
int<<16>> if_precomp2921 = 10|-|packet_in_pkt_size;
int<<32>> SRE_fingerprint_videoAresetRE_fingerprint_videoAidxevent_param_id = 0;
int<<16>> Spacket_inpkt_sizeevent_param_id = 0;
int<<16>> Spacket_indportevent_param_id = 0;
int<<16>> Spacket_insportevent_param_id = 0;
int<<32>> Spacket_indipevent_param_id = 0;
int<<32>> Spacket_insipevent_param_id = 0;
int<<8>> S_event_int = 3;
}
| 2,_ -> {

}
| 11,_ -> {
Sys.invalidate.RE_fingerprint_videoAreset(RE_fingerprint_videoAreset_RE_fingerprint_videoAidx);
}
| 1,_ -> {
int<<32>> idx = (int<<32>>)to_immediate_tmp;
}
| _,_ -> {

}
// Stage 2
match (if_precomp,event_id,packet_in_pkt_size,if_precomp2921) with 
| 0,2,10,0 -> {

}
| 0,11,10,0 -> {

}
| 0,1,10,0 -> {
int<<32>> RE_fingerprint_videoAidx = idx;
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
S_event_int = 3;
}
| 0,2,_,0 -> {

}
| 0,11,_,0 -> {

}
| 0,1,_,0 -> {
int<<32>> RE_fingerprint_videoAidx = idx;
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
int<<16>> if_precomp2920 = 20|-|packet_in_pkt_size;
int<<16>> if_precomp2919 = packet_in_pkt_size|-|10;
}
| 0,2,_,_ -> {

}
| 0,11,_,_ -> {

}
| 0,1,_,_ -> {
int<<32>> RE_fingerprint_videoAidx = idx;
int<<32>> r = Array.update_complex(arr,idx,combined_memop_get_stored_wipe_2932,0,0,0);
S_event_int = 3;
}
| _,2,_,_ -> {

}
| _,11,_,_ -> {

}
| _,1,_,_ -> {
Array.update_complex(arr,idx,incr,1,0,0);
}
| _,_,_,_ -> {

}
// Stage 3
match (if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,10,0,0,2 -> {

}
| _,0,10,0,0,11 -> {

}
| _,0,10,0,0,1 -> {

}
| _,0,_,0,0,2 -> {

}
| _,0,_,0,0,11 -> {

}
| _,0,_,0,0,1 -> {
int<<16>> if_precomp2918 = 30|-|packet_in_pkt_size;
int<<16>> if_precomp2917 = packet_in_pkt_size|-|20;
}
| _,_,10,0,0,2 -> {

}
| _,_,10,0,0,11 -> {

}
| _,_,10,0,0,1 -> {

}
| _,_,_,0,0,2 -> {

}
| _,_,_,0,0,11 -> {

}
| _,_,_,0,0,1 -> {
S_event_int = 4;
}
| _,_,_,_,_,_ -> {

}
// Stage 4
match (if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,0,1 -> {
int<<16>> if_precomp2916 = 40|-|packet_in_pkt_size;
int<<16>> if_precomp2915 = packet_in_pkt_size|-|30;
}
| _,_,_,0,10,0,0,2 -> {

}
| _,_,_,0,10,0,0,11 -> {

}
| _,_,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,0,1 -> {
S_event_int = 5;
}
| _,_,_,_,_,_,_,_ -> {

}
// Stage 5
match (if_precomp2916,if_precomp2915,if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,0,1 -> {
int<<16>> if_precomp2914 = 50|-|packet_in_pkt_size;
int<<16>> if_precomp2913 = packet_in_pkt_size|-|40;
}
| _,_,_,0,_,0,10,0,0,2 -> {

}
| _,_,_,0,_,0,10,0,0,11 -> {

}
| _,_,_,0,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,0,1 -> {
S_event_int = 6;
}
| _,_,_,_,_,_,_,_,_,_ -> {

}
// Stage 6
match (if_precomp2914,if_precomp2913,if_precomp2916,if_precomp2915,if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,0,1 -> {
int<<16>> if_precomp2912 = 60|-|packet_in_pkt_size;
int<<16>> if_precomp2911 = packet_in_pkt_size|-|50;
}
| _,_,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,0,1 -> {
S_event_int = 7;
}
| _,_,_,_,_,_,_,_,_,_,_,_ -> {

}
// Stage 7
match (if_precomp2912,if_precomp2911,if_precomp2914,if_precomp2913,if_precomp2916,if_precomp2915,if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,0,1 -> {
int<<16>> if_precomp2910 = 70|-|packet_in_pkt_size;
int<<16>> if_precomp2909 = packet_in_pkt_size|-|60;
}
| _,_,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,0,1 -> {
S_event_int = 8;
}
| _,_,_,_,_,_,_,_,_,_,_,_,_,_ -> {

}
// Stage 8
match (if_precomp2910,if_precomp2909,if_precomp2912,if_precomp2911,if_precomp2914,if_precomp2913,if_precomp2916,if_precomp2915,if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,0,1 -> {
int<<16>> if_precomp2908 = 80|-|packet_in_pkt_size;
int<<16>> if_precomp2907 = packet_in_pkt_size|-|70;
}
| _,_,_,0,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,0,1 -> {
S_event_int = 9;
}
| _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ -> {

}
// Stage 9
match (if_precomp2908,if_precomp2907,if_precomp2910,if_precomp2909,if_precomp2912,if_precomp2911,if_precomp2914,if_precomp2913,if_precomp2916,if_precomp2915,if_precomp2918,if_precomp2917,if_precomp2920,if_precomp2919,packet_in_pkt_size,if_precomp2921,if_precomp,event_id) with 
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,0,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,10,0,0,1 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,2 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,11 -> {

}
| _,_,_,0,_,0,_,0,_,0,_,0,_,0,_,0,0,1 -> {
S_event_int = 10;
}
| _,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_ -> {

}
// Stage 10
match (S_event_int,if_precomp,event_id) with 
| 3,0,2 -> {

}
| 4,0,2 -> {

}
| 5,0,2 -> {

}
| 6,0,2 -> {

}
| 7,0,2 -> {

}
| 8,0,2 -> {

}
| 9,0,2 -> {

}
| 10,0,2 -> {

}
| _,0,2 -> {

}
| _,_,2 -> {

}
| 3,0,11 -> {

}
| 4,0,11 -> {

}
| 5,0,11 -> {

}
| 6,0,11 -> {

}
| 7,0,11 -> {

}
| 8,0,11 -> {

}
| 9,0,11 -> {

}
| 10,0,11 -> {

}
| _,0,11 -> {

}
| _,_,11 -> {

}
| 3,0,1 -> {
counterRE_fingerprint_videoA = 0;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 4,0,1 -> {
counterRE_fingerprint_videoA = 1;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 5,0,1 -> {
counterRE_fingerprint_videoA = 2;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 6,0,1 -> {
counterRE_fingerprint_videoA = 3;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 7,0,1 -> {
counterRE_fingerprint_videoA = 4;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 8,0,1 -> {
counterRE_fingerprint_videoA = 5;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 9,0,1 -> {
counterRE_fingerprint_videoA = 6;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| 10,0,1 -> {
counterRE_fingerprint_videoA = 7;
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| _,0,1 -> {
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| _,_,1 -> {
Sys.invalidate.packet_in(packet_in_sip,packet_in_dip,packet_in_sport,packet_in_dport,packet_in_pkt_size);
}
| _,_,_ -> {

}
// Stage 11
match (counterRE_fingerprint_videoA,if_precomp,event_id) with 
| 0,0,2 -> {

}
| 0,0,11 -> {

}
| 0,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 2;
g_synthesized_meta_varRE_fingerprint_videoA = 36;
f_synthesized_meta_varRE_fingerprint_videoA = 124;
}
| 1,0,2 -> {

}
| 1,0,11 -> {

}
| 1,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 32;
f_synthesized_meta_varRE_fingerprint_videoA = 5;
}
| 2,0,2 -> {

}
| 2,0,11 -> {

}
| 2,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 67;
f_synthesized_meta_varRE_fingerprint_videoA = 157;
}
| 3,0,2 -> {

}
| 3,0,11 -> {

}
| 3,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 3;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
f_synthesized_meta_varRE_fingerprint_videoA = 125;
}
| 4,0,2 -> {

}
| 4,0,11 -> {

}
| 4,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 1;
f_synthesized_meta_varRE_fingerprint_videoA = 133;
}
| 5,0,2 -> {

}
| 5,0,11 -> {

}
| 5,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 2;
f_synthesized_meta_varRE_fingerprint_videoA = 134;
}
| 6,0,2 -> {

}
| 6,0,11 -> {

}
| 6,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 33;
f_synthesized_meta_varRE_fingerprint_videoA = 252;
}
| 7,0,2 -> {

}
| 7,0,11 -> {

}
| 7,0,1 -> {
memop_synthesized_meta_varRE_fingerprint_videoA = 0;
g_synthesized_meta_varRE_fingerprint_videoA = 228;
f_synthesized_meta_varRE_fingerprint_videoA = 224;
}
| _,0,2 -> {

}
| _,0,11 -> {

}
| _,0,1 -> {

}
| _,_,_ -> {

}
// Stage 12
match (memop_synthesized_meta_varRE_fingerprint_videoA,if_precomp,event_id) with 
| 0,0,2 -> {

}
| 0,0,11 -> {

}
| 0,0,1 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
}
| 2,0,2 -> {

}
| 2,0,11 -> {

}
| 2,0,1 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
}
| 3,0,2 -> {

}
| 3,0,11 -> {

}
| 3,0,1 -> {
RE_fingerprint_videoA_idx_2935 = RE_fingerprint_videoAidx;
}
| _,0,2 -> {

}
| _,0,11 -> {

}
| _,0,1 -> {

}
| _,_,_ -> {

}
// Stage 13
match (event_id,memop_synthesized_meta_varRE_fingerprint_videoA,if_precomp) with 
| 2,0,0 -> {

}
| 11,0,0 -> {
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
}
| 1,0,0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop0,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2,2,0 -> {

}
| 11,2,0 -> {
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
}
| 1,2,0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop2,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2,3,0 -> {

}
| 11,3,0 -> {
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
}
| 1,3,0 -> {
resRE_fingerprint_videoA2338 = Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,RE_fingerprint_videoAmemop3,f_synthesized_meta_varRE_fingerprint_videoA,g_synthesized_meta_varRE_fingerprint_videoA,0);
}
| 2,_,_ -> {

}
| 11,_,_ -> {
Array.update_complex(RE_fingerprint_videoA,RE_fingerprint_videoA_idx_2935,set_2928,0,0,0);
}
| _,_,_ -> {

}
// Stage 14
match (resRE_fingerprint_videoA2338,if_precomp,event_id) with 
| 32,0,2 -> {

}
| 32,0,11 -> {

}
| 32,0,1 -> {
ansRE_fingerprint_videoA = 1;
}
| _,0,2 -> {

}
| _,0,11 -> {

}
| _,0,1 -> {
ansRE_fingerprint_videoA = 0;
}
| _,_,_ -> {

}
// Stage 15
match (ansRE_fingerprint_videoA,if_precomp,event_id) with 
| 1,0,2 -> {

}
| 1,0,11 -> {

}
| 1,0,1 -> {
generate match_report();
recirc_mcid = recirc_mcid+1;
}
| _,0,2 -> {

}
| _,0,11 -> {

}
| _,0,1 -> {

}
| _,_,_ -> {

}}
memop incr(int<<32>> stored_ct,int<<32>> incr_by,int<<32>> unused_2934)
 {{
b1=None;
b2=(mbool_2933,true)
cell1=None, None
cell2=(mbool_2933 -> stored_ct+incr_by), None

ret=(true -> cell2)
}}
memop combined_memop_get_stored_wipe_2932(int<<32>> stored,int<<32>> dummy,int<<32>> dummy_set_2929)
 {{
b1=(mbool_2930,true);
b2=(mbool_2931,true)
cell1=(mbool_2930 -> 0), None
cell2=(mbool_2931 -> stored), None

ret=(true -> cell2)
}}
memop set_2928(int<<8>> mem_val_2927,int<<8>> new_val_2925,int<<8>> unused_2926)
 {{
b1=None;
b2=None
cell1=(true -> new_val_2925), None
cell2=None, None

ret=None
}}
----------- after layout ------- 
compiler: Compilation to P4 finished. Writing to build directory:basicCompile
Packager: Packaging lucid tofino app in: basicCompile
Packager: copying runtime libraries from: /mnt/c/Users/johns/workspace/lucid/tofinoLibs
Packager: Lucid app generation complete in: basicCompile
